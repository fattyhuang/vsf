<?xml version="1.0" encoding="utf-8"?>

<!-- File naming: <vendor>_<part/series name>.svd -->

<!--
  Copyright (C) 2012 ARM Limited. All rights reserved.

  Purpose: System Viewer Description (SVD) Example (Schema Version 1.0)
           This is a description of a none-existent and incomplete device
           for demonstration purposes only.
 -->

<device schemaVersion="1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" xs:noNamespaceSchemaLocation="CMSIS-SVD_Schema_1_0.xsd" >
  <name>cmem7</name>                                          		<!-- name of part or part series -->
  <version>1.0</version>                                          <!-- version of this description -->
  <description>ARM 32-bit Cortex-M3 Microcontroller based device, CPU clock up to 80MHz, etc. </description>
  <addressUnitBits>8</addressUnitBits>                            <!-- byte addressable memory -->
  <width>32</width>                                               <!-- bus width is 32 bits -->
  <!-- default settings implicitly inherited by subsequent sections -->
  <size>32</size>                                                 <!-- this is the default size (number of bits) of all peripherals
                                                                       and register that do not define "size" themselves -->
  <access>read-write</access>                                     <!-- default access permission for all subsequent registers -->
  <resetValue>0x00000000</resetValue>                             <!-- by default all bits of the registers are initialized to 0 on reset -->
  <resetMask>0xFFFFFFFF</resetMask>                               <!-- by default all 32Bits of the registers are used -->

  <peripherals>
    <!-- UART 0 -->
    <peripheral>
      <name>UART0</name>
      <version>1.0</version>
      <description>asynchronous serial controller 0</description>
      <groupName>UART</groupName>
      <baseAddress>0x41005000</baseAddress>
      <size>32</size>
      <access>read-write</access>

      <addressBlock>
        <offset>0</offset>
        <size>0x30</size>
        <usage>registers</usage>
      </addressBlock>

      <interrupt>
        <name>UART0_INT</name>
        <value>21</value>
      </interrupt>

      <registers>
        <!-- BAUDRATE: baudrate Register -->
        <register>
          <name>BAUDRATE</name>
          <description>baudrate Register</description>
          <addressOffset>0x00</addressOffset>
          <size>16</size>
          <access>read-write</access>
          <resetValue>0x0008</resetValue>
          <resetMask>0xFFFF</resetMask>
        </register>

        <!-- TX_BUF: transmit buffer Register -->
        <register>
          <name>TX_BUF</name>
          <description>transmit buffer Register</description>
          <addressOffset>0x04</addressOffset>
          <size>16</size>
          <access>read-write</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x01FF</resetMask>
        </register>

        <!-- RX_BUF: receive buffer Register -->
        <register>
          <name>RX_BUF</name>
          <description>receive buffer Register</description>
          <addressOffset>0x08</addressOffset>
          <size>16</size>
          <access>read-only</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x03FF</resetMask>
        </register>

        <!-- CTRL: control Register -->
        <register>
          <name>CTRL</name>
          <description>control Register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x001CE001</resetValue>
          <resetMask>0x007FFD7F</resetMask>

          <fields>
            <!-- MODE: asc mode control -->
            <field>
              <name>MODE</name>
              <description>asc mode control</description>
              <bitRange>[2:0]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MODE_8BIT</name>
                  <description>8-bit data in buffer</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MODE_7BIT_PARITY</name>
                  <description>7-bit data and parity in buffer</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MODE_9BIT</name>
                  <description>9-bit data in buffer</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MODE_8BIT_WAKEUP</name>
                  <description>8-bit data and a wakeup bit in buffer</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MODE_8BIT_PARITY</name>
                  <description>8-bit data and parity in buffer</description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- STOP: number of stop bits selection -->
            <field>
              <name>STOP</name>
              <description>number of stop bits selection</description>
              <bitRange>[4:3]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>STOP_HALF</name>
                  <description>0.5 stop bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>STOP_ONE</name>
                  <description>1 stop bit</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>STOP_ONE_AND_HALF</name>
                  <description>1.5 stop bit</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>STOP_TWO</name>
                  <description>2 stop bits</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- PARITY: parity selection -->
            <field>
              <name>PARITY</name>
              <description>parity selection</description>
              <bitRange>[5:5]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PARITY_EVEN</name>
                  <description>even parity</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PARITY_ODD</name>
                  <description>odd parity</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- LOOPBACK: loopback mode enable bit -->
            <field>
              <name>LOOPBACK</name>
              <description>loopback mode enable bit</description>
              <bitRange>[6:6]</bitRange>
            </field>

            <!-- RX_EN: receive enable bit -->
            <field>
              <name>RX_EN</name>
              <description>receive enable bit</description>
              <bitRange>[8:8]</bitRange>
            </field>

            <!-- FIFO_EN: FIFO enable bit -->
            <field>
              <name>FIFO_EN</name>
              <description>FIFO enable bit</description>
              <bitRange>[10:10]</bitRange>
            </field>

            <!-- CTS: Clear to send, enable signal to send  -->
            <field>
              <name>CTS</name>
              <description>Clear to send, enable signal to send </description>
              <bitRange>[11:11]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>IGNORED</name>
                  <description>CTS is ignored</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>CTS is enabled</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- BAUD_MODE: baudrate generation mode -->
            <field>
              <name>BAUD_MODE</name>
              <description>baudrate generation mode</description>
              <bitRange>[12:12]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>BAUD_MODE_DECREMENT</name>
                  <description>baud counter decrements, ticks when it reaches 1</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>BAUD_MODE_INCREMENT</name>
                  <description>baud counter increments, ticks when there is a carry</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- RX_THRESHOLD: receive threshold -->
            <field>
              <name>RX_THRESHOLD</name>
              <description>receive threshold</description>
              <bitRange>[17:13]</bitRange>
            </field>

            <!-- RX_HALF_FULL: receive fifi half full level -->
            <field>
              <name>RX_HALF_FULL</name>
              <description>receive fifi half full level</description>
              <bitRange>[22:18]</bitRange>
            </field>
          </fields>
        </register>

        <!-- INT_MASK: interrupt mask register -->
        <register>
          <name>INT_MASK</name>
          <description>interrupt mask register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000007FF</resetValue>
          <resetMask>0x000007FF</resetMask>

          <fields>
            <!-- RNE: Receive FIFO not empty interrupt -->
            <field>
              <name>RNE</name>
              <description>Receive FIFO not empty interrupt</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- TE: Transmitter FIFO empty interrupt -->
            <field>
              <name>TE</name>
              <description>Transmitter FIFO empty interrupt</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- THE: Transmitter FIFO at least half empty flag -->
            <field>
              <name>THE</name>
              <description>Transmitter FIFO at least half empty flag</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- TONE: timeout when the receiver FIFO is not empty interrupt -->
            <field>
              <name>TONE</name>
              <description>timeout when the receiver FIFO is not empty interrupt</description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- TOE: timeout when the receiver FIFO is empty interrupt -->
            <field>
              <name>TOE</name>
              <description>timeout when the receiver FIFO is empty interrupt</description>
              <bitRange>[4:4]</bitRange>
            </field>

            <!-- RHF: receiver FIFO is half full interrupt -->
            <field>
              <name>RHF</name>
              <description>receiver FIFO is half full interrupt</description>
              <bitRange>[5:5]</bitRange>
            </field>

            <!-- TF: transmitter FIFO full interrupt -->
            <field>
              <name>TF</name>
              <description>transmitter FIFO full interrupt</description>
              <bitRange>[6:6]</bitRange>
            </field>

            <!-- PE: parity error interrupt -->
            <field>
              <name>PE</name>
              <description>parity error interrupt</description>
              <bitRange>[7:7]</bitRange>
            </field>

            <!-- FE: frame error interrupt -->
            <field>
              <name>FE</name>
              <description>frame error interrupt</description>
              <bitRange>[8:8]</bitRange>
            </field>

            <!-- OE: overrun error interrupt -->
            <field>
              <name>OE</name>
              <description>overrun error interrupt</description>
              <bitRange>[9:9]</bitRange>
            </field>

            <!-- RX_THRE_REACH: Receive threshold reach interrupt -->
            <field>
              <name>RX_THRE_REACH</name>
              <description>Receive threshold reach interrupt</description>
              <bitRange>[10:10]</bitRange>
            </field>
          </fields>
        </register>

        <!-- STATUS: status register -->
        <register>
          <name>STATUS</name>
          <description>status register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000006</resetValue>
          <resetMask>0x0000FFFF</resetMask>

          <fields>
            <!-- RNE: Receive FIFO not empty -->
            <field>
              <name>RNE</name>
              <description>receiver FIFO not empty </description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- TE: Transmitter FIFO empty -->
            <field>
              <name>TE</name>
              <description>Transmitter FIFO empty</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- THE: Transmitter FIFO at least half empty flag -->
            <field>
              <name>THE</name>
              <description>Transmitter FIFO at least half empty flag</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- TONE: timeout when the receiver FIFO is not empty -->
            <field>
              <name>TONE</name>
              <description>timeout when the receiver FIFO is not empty</description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- TOE: time out when the receiver FIFO is empty -->
            <field>
              <name>TOE</name>
              <description>time out when the receiver FIFO is empty</description>
              <bitRange>[4:4]</bitRange>
            </field>

            <!-- RHF: receiver FIFO is half full -->
            <field>
              <name>RHF</name>
              <description>receiver FIFO is half full</description>
              <bitRange>[5:5]</bitRange>
            </field>

            <!-- TF: transmitter FIFO is full -->
            <field>
              <name>TF</name>
              <description>transmitter FIFO is full</description>
              <bitRange>[6:6]</bitRange>
            </field>
          </fields>
        </register>

        <!-- TIMEOUT: timeout Register -->
        <register>
          <name>TIMEOUT</name>
          <description>timeout Register</description>
          <addressOffset>0x18</addressOffset>
          <size>8</size>
          <access>read-write</access>
          <resetValue>0x00</resetValue>
          <resetMask>0xFF</resetMask>
        </register>

        <!-- TX_RESET: transmit reset Register -->
        <register>
          <name>TX_RESET</name>
          <description>transmit reset Register</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x00000001</resetMask>

          <fields>
            <!-- EN: transmit reset enable -->
            <field>
              <name>EN</name>
              <description>enable</description>
              <bitRange>[0:0]</bitRange>
            </field>
          </fields>
        </register>

        <!-- RX_RESET: receive reset Register -->
        <register derivedFrom="TX_RESET">
          <name>RX_RESET</name>
          <description>receive reset Register</description>
          <addressOffset>0x20</addressOffset>
        </register>

        <!-- RUN: uart enable register -->
        <register derivedFrom="TX_RESET">
          <name>RUN</name>
          <description>uart enable register</description>
          <addressOffset>0x24</addressOffset>
        </register>

        <!-- INT_RAW: raw interrupt before mask register -->
        <register derivedFrom="INT_MASK">
          <name>INT_RAW</name>
          <description>raw interrupt before mask register</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x000007FF</resetMask>
        </register>

        <!-- INT_SEEN: interrupt after mask register -->
        <register derivedFrom="INT_MASK">
          <name>INT_SEEN</name>
          <description>interrupt after mask register</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x000007FF</resetMask>
        </register>
      </registers>
    </peripheral>

    <!-- UART 1 -->
    <peripheral derivedFrom="UART0">
      <name>UART1</name>
      <version>1.0</version>
      <description>asynchronous serial controller 1</description>
      <groupName>UART</groupName>
      <baseAddress>0x4100C000</baseAddress>
      <size>32</size>
      <access>read-write</access>

      <interrupt>
        <name>UART1_INT</name>
        <value>22</value>
      </interrupt>
    </peripheral>

    <!-- UART 2 -->
    <peripheral derivedFrom="UART0">
      <name>UART2</name>
      <version>1.0</version>
      <description>asynchronous serial controller 2</description>
      <groupName>UART</groupName>
      <baseAddress>0x4100E000</baseAddress>
      <size>32</size>
      <access>read-write</access>

      <interrupt>
        <name>UART2_INT</name>
        <value>37</value>
      </interrupt>
    </peripheral>

    <!-- Watchdog -->
    <peripheral>
      <name>WDG</name>
      <version>1.0</version>
      <description>watchdog</description>
      <groupName>WATCHDOG</groupName>
      <baseAddress>0x41001000</baseAddress>
      <size>32</size>
      <access>read-write</access>

      <addressBlock>
        <offset>0</offset>
        <size>0x18</size>
        <usage>registers</usage>
      </addressBlock>

      <interrupt>
        <name>WDG_INT</name>
        <value>31</value>
      </interrupt>

      <registers>
        <!-- CTRL: control Register -->
        <register>
          <name>CTRL</name>
          <description>control Register</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x00000003</resetMask>

          <fields>
            <!-- EN: watchdog enable -->
            <field>
              <name>EN</name>
              <description>flag indicates if watchdog is enabled or not</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- INT_LEN: watchdog report interrupt when COUNTER is 1/4 or 1/2 of LENGTH -->
            <field>
              <name>INT_LEN</name>
              <description>watchdog report interrupt when COUNTER is 1/4 or 1/2 of LENGTH</description>
              <bitRange>[1:1]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>INT_LEN_QUARTER</name>
                  <description>watchdog report interrupt when COUNTER is 1/4 of LENGTH</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>INT_LEN_HALF</name>
                  <description>watchdog report interrupt when COUNTER is 1/2 of LENGTH</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>

        <!-- LEN: length Register -->
        <register>
          <name>LEN</name>
          <description>Ticks decrease down to 25% or 50% to trigger an interrupt</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
        </register>

        <!-- INT_CTRL: interrupt control register -->
        <register>
          <name>INT_CTRL</name>
          <description>interrupt control</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000001</resetValue>
          <resetMask>0x00000003</resetMask>

          <fields>
            <!-- MASK: mask register -->
            <field>
              <name>MASK</name>
              <description>mask register</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- TRIGGER_MODE: interrupt trigger mode -->
            <field>
              <name>TRIGGER_MODE</name>
              <description>trigger mode</description>
              <bitRange>[1:1]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>TRIGGER_MODE_EDGE</name>
                  <description>edge trigger</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TRIGGER_MODE_LEVEL</name>
                  <description>level trigger</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>

        <!-- INT_STA: interrupt status register -->
        <register>
          <name>INT_STA</name>
          <description>interrupt status register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x00000001</resetMask>

          <fields>
            <!-- STA: interrupt status -->
            <field>
              <name>STA</name>
              <description>interrupt status</description>
              <bitRange>[0:0]</bitRange>
            </field>
          </fields>
        </register>

        <!-- INT_RAW: interrupt raw register -->
        <register derivedFrom="INT_STA">
          <name>INT_RAW</name>
          <description>interrupt raw register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x00000001</resetMask>
        </register>

        <!-- CNT: counter register -->
        <register>
          <name>CNT</name>
          <description>counter register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
        </register>
      </registers>
    </peripheral>

    <!-- TIMER0 -->
    <peripheral>
      <name>TIMER0</name>
      <version>1.0</version>
      <description>timer 0</description>
      <groupName>TIMER</groupName>
			<baseAddress>0x41000000</baseAddress>
      <access>read-write</access>
      <size>32</size>

      <addressBlock>
        <offset>0</offset>
        <size>0x1C</size>
        <usage>registers</usage>
      </addressBlock>

      <interrupt>
        <name>TIMER_INT</name>
        <value>32</value>
      </interrupt>

      <registers>
        <!-- CTRL: control Register -->
        <register>
          <name>CTRL</name>
          <description>control Register</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x00000001</resetMask>

          <fields>
            <!-- EN: enable -->
            <field>
              <name>EN</name>
              <description>flag indicates if timer is enabled or not</description>
              <bitRange>[0:0]</bitRange>
            </field>
          </fields>
        </register>

        <!-- TYPE: type Register -->
        <register>
          <name>TYPE</name>
          <description>type Register</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x00000001</resetMask>

          <fields>
            <!-- SIGNLE_SHOT: indicate timer generate only one interrupt if not reload -->
            <field>
              <name>SIGNLE_SHOT</name>
              <description>indicate timer generate only one interrupt if not reload</description>
              <bitRange>[0:0]</bitRange>
            </field>
          </fields>
        </register>

        <!-- LEN: length register -->
        <register>
          <name>LEN</name>
          <description>length</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
        </register>

        <!-- INT_EN: interrupt enable Register -->
        <register>
          <name>INT_EN</name>
          <description>interrupt enable</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000001</resetValue>
          <resetMask>0x00000001</resetMask>

          <fields>
            <!-- EN_REVERSE: diable -->
            <field>
              <name>EN_REVERSE</name>
              <description>flag indicates if timer is disable or not</description>
              <bitRange>[0:0]</bitRange>
            </field>
          </fields>
        </register>

        <!-- INT_STA: interrupt status register -->
        <register>
          <name>INT_STA</name>
          <description>interrupt status</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x00000001</resetMask>

          <fields>
            <!-- STA: interrupt status -->
            <field>
              <name>STA</name>
              <description>interrupt status</description>
              <bitRange>[0:0]</bitRange>
            </field>
          </fields>
        </register>

        <!-- INT_RAW: interrupt raw register -->
        <register derivedFrom="INT_STA">
          <name>INT_RAW</name>
          <description>interrupt raw register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x00000001</resetMask>
        </register>

        <!-- CNT: counter register -->
        <register>
          <name>CNT</name>
          <description>counter register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
        </register>
      </registers>
    </peripheral>

    <!-- TIMER1 -->
    <peripheral derivedFrom="TIMER0">
      <name>TIMER1</name>
      <version>1.0</version>
      <description>timer 1</description>
      <groupName>TIMER</groupName>
			<baseAddress>0x41000020</baseAddress>
      <access>read-write</access>
      <size>32</size>
    </peripheral>

    <!-- TIMER2 -->
    <peripheral derivedFrom="TIMER0">
      <name>TIMER2</name>
      <version>1.0</version>
      <description>timer 2</description>
      <groupName>TIMER</groupName>
			<baseAddress>0x41000040</baseAddress>
      <access>read-write</access>
      <size>32</size>
    </peripheral>

    <!-- TIMER3 -->
    <peripheral derivedFrom="TIMER0">
      <name>TIMER3</name>
      <version>1.0</version>
      <description>timer 3</description>
      <groupName>TIMER</groupName>
			<baseAddress>0x41000060</baseAddress>
      <access>read-write</access>
      <size>32</size>
    </peripheral>

    <!-- SPI0 -->
    <peripheral>
      <name>SPI0</name>
      <version>1.0</version>
      <description>SPI 0</description>
      <groupName>SPI</groupName>
			<baseAddress>0x41004000</baseAddress>
      <access>read-write</access>
      <size>32</size>

      <addressBlock>
        <offset>0</offset>
        <size>0x2C</size>
        <usage>registers</usage>
      </addressBlock>

      <interrupt>
        <name>SPI0_INT</name>
        <value>27</value>
      </interrupt>

      <registers>
        <!-- STATUS: status Register -->
        <register>
          <name>STATUS</name>
          <description>status Register</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000055</resetValue>
          <resetMask>0x000001FF</resetMask>

          <fields>
            <!-- RFIFO_EMPTY: receive fifo is empty -->
            <field>
              <name>RFIFO_EMPTY</name>
              <description>receive fifo is empty</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- RFIFO_FULL: receive fifo is full -->
            <field>
              <name>RFIFO_FULL</name>
              <description>receive fifo is full</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- RFIFO_ALMOST_EMPTY: receive fifo is almost empty -->
            <field>
              <name>RFIFO_ALMOST_EMPTY</name>
              <description>receive fifo is almost empty</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- RFIFO_ALMOST_FULL: receive fifo almost full -->
            <field>
              <name>RFIFO_ALMOST_FULL</name>
              <description>receive fifo almost full</description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- TFIFO_EMPTY: transmit fifo is empty -->
            <field>
              <name>TFIFO_EMPTY</name>
              <description>transmit fifo is empty</description>
              <bitRange>[4:4]</bitRange>
            </field>

            <!-- TFIFO_FULL: transmit fifo is full -->
            <field>
              <name>TFIFO_FULL</name>
              <description>transmit fifo is full</description>
              <bitRange>[5:5]</bitRange>
            </field>

            <!-- TFIFO_ALMOST_EMPTY: transmit fifo is almost empty -->
            <field>
              <name>TFIFO_ALMOST_EMPTY</name>
              <description>transmit fifo is almost empty</description>
              <bitRange>[6:6]</bitRange>
            </field>

            <!-- TFIFO_ALMOST_FULL: transmit fifo almost full -->
            <field>
              <name>TFIFO_ALMOST_FULL</name>
              <description>transmit fifo almost full</description>
              <bitRange>[7:7]</bitRange>
            </field>

            <!-- BUSY: indecates if SPI is idle or busy -->
            <field>
              <name>BUSY</name>
              <description>indecates if SPI is idle or busy</description>
              <bitRange>[8:8]</bitRange>
            </field>
          </fields>
        </register>

        <!-- CTRL: control Register -->
        <register>
          <name>CTRL</name>
          <description>control Register</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x0000000F</resetMask>

          <fields>
            <!-- EN: indicates if SPI is enabled or not  -->
            <field>
              <name>EN</name>
              <description>indicates if SPI is enabled or not</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- RX_EN: indicates if SPI receiver is enabled or not  -->
            <field>
              <name>RX_EN</name>
              <description>indicates if SPI receiver is enabled or not</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- CLK_HIGH: positive idle clock polarity  -->
            <field>
              <name>CLK_HIGH</name>
              <description>indicats if idle clock polarity is high level</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- NEG_EDGE: indicates when SPI takes sample and transmit data  -->
            <field>
              <name>NEG_EDGE</name>
              <description>1, indicates SPI takes sample at the rise edge and transmit data at the trailing edge. 0, conversely. </description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- TX_BIT_SEQUENCE: transmit bit sequence. 0 : MSB is sent first  -->
            <field>
              <name>TX_BIT_SEQUENCE</name>
              <description>transmit bit sequence. 0 : MSB is sent first</description>
              <bitRange>[4:4]</bitRange>
            </field>

            <!-- RX_BIT_SEQUENCE: receive bit sequence. 0: MSB is received first  -->
            <field>
              <name>RX_BIT_SEQUENCE</name>
              <description>receive bit sequence. 0: MSB is received first</description>
              <bitRange>[5:5]</bitRange>
            </field>
          </fields>
        </register>

        <!-- INT_MASK: interrupt mask Register -->
        <register>
          <name>INT_MASK</name>
          <description>interrupt mask Register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000007F</resetValue>
          <resetMask>0x0000007F</resetMask>

          <fields>
            <!-- RFIFO_UNDERFLOW: receive fifo underflow interrupt -->
            <field>
              <name>RFIFO_UNDERFLOW</name>
              <description>receive fifo underflow interrupt</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- RFIFO_OVERFLOW: receive fifo overflow interrupt -->
            <field>
              <name>RFIFO_OVERFLOW</name>
              <description>receive fifo overflow interrupt</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- RFIFO_ALMOST_FULL: receive fifo almost full interrupt -->
            <field>
              <name>RFIFO_ALMOST_FULL</name>
              <description>receive fifo almost full interrupt</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- TFIFO_UNDERFLOW: transmit fifo underflow interrupt -->
            <field>
              <name>TFIFO_UNDERFLOW</name>
              <description>transmit fifo underflow interrupt</description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- TFIFO_OVERFLOW: transmit fifo overflow interrupt -->
            <field>
              <name>TFIFO_OVERFLOW</name>
              <description>transmit fifo overflow interrupt</description>
              <bitRange>[4:4]</bitRange>
            </field>

            <!-- TFIFO_ALMOST_EMPTY: transmit fifo almost empty interrupt -->
            <field>
              <name>TFIFO_ALMOST_EMPTY</name>
              <description>transmit fifo almost empty interrupt</description>
              <bitRange>[5:5]</bitRange>
            </field>

            <!-- DONE: transmit done interrupt -->
            <field>
              <name>DONE</name>
              <description>transmit done interrupt</description>
              <bitRange>[6:6]</bitRange>
            </field>
          </fields>
        </register>

        <!-- INT_STATUS: interrupt Register -->
        <register derivedFrom="INT_MASK">
          <name>INT_STATUS</name>
          <description>interrupt Register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x0000007F</resetMask>
        </register>

        <!-- INT_RAW: interrupt raw Register -->
        <register derivedFrom="INT_MASK">
          <name>INT_RAW</name>
          <description>interrupt raw Register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x0000007F</resetMask>
        </register>

        <!-- BCNT: bit length while transmitting and receiving -->
        <register>
          <name>BCNT</name>
          <description>bit length while transmitting and receiving</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000001F</resetValue>
          <resetMask>0x0000001F</resetMask>

          <fields>
            <!-- CNT: bit length while transmitting and receiving, BCNT + 1 -->
            <field>
              <name>CNT</name>
              <description>bit length while transmitting and receiving, BCNT + 1</description>
              <bitRange>[4:0]</bitRange>
            </field>
          </fields>
        </register>

        <!-- GAP: half cycle number between continuous data frame -->
        <register>
          <name>GAP</name>
          <description>half cycle number between continuous data frame</description>
          <addressOffset>0x18</addressOffset>
          <size>8</size>
          <access>read-write</access>
          <resetValue>0x00000001</resetValue>
          <resetMask>0x000000FF</resetMask>
        </register>

        <!-- DIV: frequency division register -->
        <register>
          <name>DIV</name>
          <description>frequency division register, fsck = fclk_io / (DIV + 1) / 2</description>
          <addressOffset>0x1C</addressOffset>
          <size>16</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x0000FFFF</resetMask>
        </register>

        <!-- TRANS_CNT: transmit data length register -->
        <register>
          <name>TRANS_CNT</name>
          <description>transmit data length, data number = TRANS_CNT + 1</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x000000FF</resetMask>
        </register>

        <!-- TRANS_START: transmit startup register -->
        <register>
          <name>TRANS_START</name>
          <description>transmit startup register, write 1 to trigger transmision once</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x00000001</resetMask>

          <fields>
            <!-- TX_TRIGGER: write 1 to trigger transmision once -->
            <field>
              <name>TX_TRIGGER</name>
              <description>write 1 to trigger transmision once</description>
              <bitRange>[0:0]</bitRange>
            </field>
          </fields>
        </register>

        <!-- RW_DATA: raw data register -->
        <register>
          <name>RW_DATA</name>
          <description>raw data register</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
        </register>
      </registers>
    </peripheral>

    <!-- SPI1 -->
    <peripheral derivedFrom="SPI0">
      <name>SPI1</name>
      <version>1.0</version>
      <description>SPI 1</description>
      <groupName>SPI</groupName>
			<baseAddress>0x4100b000</baseAddress>
      <access>read-write</access>
      <size>32</size>

      <interrupt>
        <name>SPI1_INT</name>
        <value>25</value>
      </interrupt>
    </peripheral>

    <!-- I2C0 -->
    <peripheral>
      <name>I2C0</name>
      <version>1.0</version>
      <description>I2C 0</description>
      <groupName>I2C</groupName>
			<baseAddress>0x41003000</baseAddress>
      <access>read-write</access>
      <size>32</size>

      <addressBlock>
        <offset>0</offset>
        <size>0x74</size>
        <usage>registers</usage>
      </addressBlock>

      <interrupt>
        <name>I2C0_INT</name>
        <value>28</value>
      </interrupt>

      <registers>
        <!-- CTRL: control Register -->
        <register>
          <name>CTRL</name>
          <description>control Register</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x00000007</resetMask>

          <fields>
            <!-- MODE: master or slave mode -->
            <field>
              <name>MODE</name>
              <description>master or slave mode</description>
              <bitRange>[0:0]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MODE_SLAVE</name>
                  <description>slave mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MODE_MASTER</name>
                  <description>master mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- MASTER_ADDR_WIDTH: 7- or 10-bits address as a master -->
            <field>
              <name>MASTER_ADDR_WIDTH</name>
              <description>7- or 10-bits address as a master</description>
              <bitRange>[1:1]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MASTER_ADDR_WIDTH_7BIT</name>
                  <description>7-bits address as a master</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MASTER_ADDR_WIDTH_10BIT</name>
                  <description>10-bits address as a master</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- SLAVE_ADDR_WIDTH: 7- or 10-bits address width as a slave -->
            <field>
              <name>SLAVE_ADDR_WIDTH</name>
              <description>7- or 10-bits address width as a slave</description>
              <bitRange>[2:2]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SLAVE_ADDR_WIDTH_7BIT</name>
                  <description>7-bits address as a slave</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SLAVE_ADDR_WIDTH_10BIT</name>
                  <description>10-bits address as a slave</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>

        <!-- TAR: target address Register -->
        <register>
          <name>TAR</name>
          <description>target address Register</description>
          <addressOffset>0x04</addressOffset>
          <size>16</size>
          <access>read-write</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x03FF</resetMask>

          <fields>
            <!-- ADDR10: 7- or 10-bits address  -->
            <field>
              <name>ADDR10</name>
              <description>7- or 10-bits address</description>
              <bitRange>[9:0]</bitRange>
            </field>

            <!-- START_BYTE: Enable start Byte for each transfer  -->
            <field>
              <name>START_BYTE</name>
              <description>Enable start Byte for each transfer</description>
              <bitRange>[10:10]</bitRange>
            </field>
          </fields>
        </register>

        <!-- SAR: slave address Register -->
        <register>
          <name>SAR</name>
          <description>slave address Register</description>
          <addressOffset>0x08</addressOffset>
          <size>16</size>
          <access>read-write</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x03FF</resetMask>

          <fields>
            <!-- ADDR10: 7- or 10-bits address  -->
            <field>
              <name>ADDR10</name>
              <description>7- or 10-bits address</description>
              <bitRange>[9:0]</bitRange>
            </field>
          </fields>
        </register>

        <!-- DATA_CMD: I2C transfer data/command entry -->
        <register>
          <name>DATA_CMD</name>
          <description>I2C transfer data/command entry</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x000003FF</resetMask>

          <fields>
            <!-- DATA: 8-bits data  -->
            <field>
              <name>DATA</name>
              <description>8-bits data</description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
            </field>

            <!-- RD_CMD: read command for master mode only, write 0 if slave mode -->
            <field>
              <name>RD_CMD</name>
              <description>read command for master mode only, write 0 if slave mode</description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
            </field>

            <!-- WR_CMD: write command for master mode only -->
            <field>
              <name>WR_CMD</name>
              <description>write command for master mode only</description>
              <bitRange>[9:9]</bitRange>
              <access>write-only</access>
            </field>

            <!-- WR_RD_CMD: write and read command for master mode only -->
            <field>
              <name>WR_RD_CMD</name>
              <description>write and read command for master mode only</description>
              <bitRange>[10:10]</bitRange>
              <access>write-only</access>
            </field>
          </fields>
        </register>

        <!-- WRITE_READ_CNT: I2C write and read data byte counter Register -->
        <register>
          <name>WRITE_READ_CNT</name>
          <description>I2C write and read data byte counter Register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x01FF01FF</resetMask>

          <fields>
            <!-- RD_BYTE_CNT: Decide the number of bytes read back as a master-receiver -->
            <field>
              <name>RD_BYTE_CNT</name>
              <description>Decide the number of bytes read back as a master-receiver</description>
              <bitRange>[8:0]</bitRange>
            </field>

            <!-- WR_BYTE_CNT: Decide the number of byte to send as a master-transmitter -->
            <field>
              <name>WR_BYTE_CNT</name>
              <description>Decide the number of byte to send as a master-transmitter</description>
              <bitRange>[24:16]</bitRange>
            </field>
          </fields>
        </register>

        <!-- SCL_CNT: I2C clk pulse counter -->
        <register>
          <name>SCL_CNT</name>
          <description>I2C clk pulse counter</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00080006</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>

          <fields>
            <!-- HIGH_LEVEL_TICK: the SCL clock high-period count -->
            <field>
              <name>HIGH_LEVEL_TICK</name>
              <description>the SCL clock high-period count</description>
              <bitRange>[15:0]</bitRange>
            </field>

            <!-- LOW_LEVEL_TICK: the SCL clock low-period count -->
            <field>
              <name>LOW_LEVEL_TICK</name>
              <description>the SCL clock low-period count</description>
              <bitRange>[31:16]</bitRange>
            </field>
          </fields>
        </register>

        <!-- INT_STATUS: I2C interrupt sources -->
        <register>
          <name>INT_STATUS</name>
          <description>I2C interrupt sources</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x000003FF</resetMask>

          <fields>
            <!-- RX_UNDER: receiver underflow -->
            <field>
              <name>RX_UNDER</name>
              <description>receiver underflow</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- RX_OVER: receiver overflow -->
            <field>
              <name>RX_OVER</name>
              <description>receiver overflow</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- RX_FULL: receiver is full -->
            <field>
              <name>RX_FULL</name>
              <description>receiver is full</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- TX_OVER: transmit overflow -->
            <field>
              <name>TX_OVER</name>
              <description>transmit overflow</description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- TX_EMPTY: transmit is empty -->
            <field>
              <name>TX_EMPTY</name>
              <description>transmit is empty</description>
              <bitRange>[4:4]</bitRange>
            </field>

            <!-- RD_REQ: read request -->
            <field>
              <name>RD_REQ</name>
              <description>read request</description>
              <bitRange>[5:5]</bitRange>
            </field>

            <!-- TX_ABRT: transmit abortion -->
            <field>
              <name>TX_ABRT</name>
              <description>transmit abortion</description>
              <bitRange>[6:6]</bitRange>
            </field>

            <!-- RX_DONE: receive done -->
            <field>
              <name>RX_DONE</name>
              <description>receive done</description>
              <bitRange>[7:7]</bitRange>
            </field>

            <!-- TX_DONE: transmit done -->
            <field>
              <name>TX_DONE</name>
              <description>transmit done</description>
              <bitRange>[8:8]</bitRange>
            </field>

            <!-- WR_REQ: write request -->
            <field>
              <name>WR_REQ</name>
              <description>write request</description>
              <bitRange>[9:9]</bitRange>
            </field>
          </fields>
        </register>

        <!-- INT_MASK: I2C interrupt mask register -->
        <register derivedFrom="INT_STATUS">
          <name>INT_MASK</name>
          <description>I2C interrupt mask register</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000003FF</resetValue>
          <resetMask>0x000003FF</resetMask>
        </register>

        <!-- RX_TL: I2C receive FIFO threshold -->
        <register>
          <name>RX_TL</name>
          <description>I2C receive FIFO threshold</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x0000001F</resetMask>

          <fields>
            <!-- THRESHOLD: FIFO threashold -->
            <field>
              <name>THRESHOLD</name>
              <description>FIFO threashold</description>
              <bitRange>[4:0]</bitRange>
            </field>
          </fields>
        </register>

        <!-- TX_TL: I2C transmit FIFO threshold -->
        <register derivedFrom="RX_TL">
          <name>TX_TL</name>
          <description>I2C transmit FIFO threshold</description>
          <addressOffset>0x2C</addressOffset>
        </register>

        <!-- CLR_ALL_INT: I2C clear all interrupt register -->
        <register>
          <name>CLR_ALL_INT</name>
          <description>I2C clear all interrupt register</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x00000001</resetMask>

          <fields>
            <!-- CLEAR: Read this register to clear all individual interrupts -->
            <field>
              <name>CLEAR</name>
              <description>Read this register to clear all individual interrupts</description>
              <bitRange>[0:0]</bitRange>
            </field>
          </fields>
        </register>

        <!-- CLR_RX_UNDER: I2C clear RX_UNDER interrupt -->
        <register>
          <name>CLR_RX_UNDER</name>
          <description>I2C clear RX_UNDER interrupt</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x00000001</resetMask>

          <fields>
            <!-- CLEAR: Read this register to clear the RX_UNDER interrupt (bit 19) of the I2C_STATUS register -->
            <field>
              <name>CLEAR</name>
              <description>Read this register to clear the RX_UNDER interrupt (bit 19) of the I2C_STATUS register</description>
              <bitRange>[0:0]</bitRange>
            </field>
          </fields>
        </register>

        <!-- CLR_RX_OVER: I2C clear RX_OVER interrupt -->
        <register>
          <name>CLR_RX_OVER</name>
          <description>I2C clear RX_OVER interrupt</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x00000001</resetMask>

          <fields>
            <!-- CLEAR: Read this register to clear the RX_OVER interrupt (bit 20) of the I2C_STATUS register -->
            <field>
              <name>CLEAR</name>
              <description>Read this register to clear the RX_OVER interrupt (bit 20) of the I2C_STATUS register</description>
              <bitRange>[0:0]</bitRange>
            </field>
          </fields>
        </register>

        <!-- CLR_TX_OVER: I2C clear TX_OVER interrupt -->
        <register>
          <name>CLR_TX_OVER</name>
          <description>I2C clear TX_OVER interrupt</description>
          <addressOffset>0x3C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x00000001</resetMask>

          <fields>
            <!-- CLEAR: Read this register to clear the TX_OVER interrupt (bit 22) of the I2C_STATUS register -->
            <field>
              <name>CLEAR</name>
              <description>Read this register to clear the TX_OVER interrupt (bit 22) of the I2C_STATUS register</description>
              <bitRange>[0:0]</bitRange>
            </field>
          </fields>
        </register>

        <!-- CLR_RD_REQ: I2C clear RD_REQ interrupt -->
        <register>
          <name>CLR_RD_REQ</name>
          <description>I2C clear RD_REQ interrupt</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x00000001</resetMask>

          <fields>
            <!-- CLEAR: Read this register to clear the RD_REQ interrupt (bit 24) of the I2C_STATUS register -->
            <field>
              <name>CLEAR</name>
              <description>Read this register to clear the RD_REQ interrupt (bit 24) of the I2C_STATUS register</description>
              <bitRange>[0:0]</bitRange>
            </field>
          </fields>
        </register>

        <!-- CLR_TX_ABRT: I2C clear TX_ABRT  interrupt -->
        <register>
          <name>CLR_TX_ABRT</name>
          <description>I2C clear TX_ABRT  interrupt</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x00000001</resetMask>

          <fields>
            <!-- CLEAR: Read this register to clear the TX_ABRT interrupts (bit 25 , bit 18, bit 17, bit 16 and bit 15) of the I2C_STATUS register. -->
            <field>
              <name>CLEAR</name>
              <description>Read this register to clear the TX_ABRT interrupts (bit 25 , bit 18, bit 17, bit 16 and bit 15) of the I2C_STATUS register.</description>
              <bitRange>[0:0]</bitRange>
            </field>
          </fields>
        </register>

        <!-- CLR_RX_DONE: I2C clear RX_DONE interrupt -->
        <register>
          <name>CLR_RX_DONE</name>
          <description>I2C clear RX_DONE interrupt</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x00000001</resetMask>

          <fields>
            <!-- CLEAR: Read this register to clear the RX_DONE interrupt (bit 26) of the I2C_STATUS register -->
            <field>
              <name>CLEAR</name>
              <description>Read this register to clear the RX_DONE interrupt (bit 26) of the I2C_STATUS register</description>
              <bitRange>[0:0]</bitRange>
            </field>
          </fields>
        </register>

        <!-- ENABLE: I2C enable register -->
        <register>
          <name>ENABLE</name>
          <description>I2C enable register</description>
          <addressOffset>0x4C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x80000000</resetValue>
          <resetMask>0x80000001</resetMask>

          <fields>
            <!-- EN: enable device -->
            <field>
              <name>EN</name>
              <description>enable device</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- RESET: TX and RX FIFO are held in an erased state( flushed) and all interrupts deserted -->
            <field>
              <name>RESET</name>
              <description>TX and RX FIFO are held in an erased state( flushed) and all interrupts deserted</description>
              <bitRange>[31:31]</bitRange>
            </field>
          </fields>
        </register>

        <!-- STATUS: I2C status register -->
        <register>
          <name>STATUS</name>
          <description>I2C status register</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00800006</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>

          <fields>
          	<!-- BUSY: I2C busy Status -->
            <field>
              <name>BUSY</name>
              <description>I2C busy Status</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- TX_FIFO_NOT_FULL: transmit FIFO is not full -->
            <field>
              <name>TX_FIFO_NOT_FULL</name>
              <description>transmit FIFO is not full</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- TX_FIFO_EMPTY: transmit FIFO is empty -->
            <field>
              <name>TX_FIFO_EMPTY</name>
              <description>transmit FIFO is empty</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- RX_FIFO_NOT_EMPTY: receive FIFO is not empty -->
            <field>
              <name>RX_FIFO_NOT_EMPTY</name>
              <description>receive FIFO is not empty</description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- RX_FIFO_FULL: receive FIFO is full -->
            <field>
              <name>RX_FIFO_FULL</name>
              <description>receive FIFO is full</description>
              <bitRange>[4:4]</bitRange>
            </field>

            <!-- EN: I2C is enabled -->
            <field>
              <name>EN</name>
              <description>I2C is enabled</description>
              <bitRange>[5:5]</bitRange>
            </field>

            <!-- TX_BYTE_W_ACK: Number of bytes sent to slave with acknowledge during the last write transaction as a master-transmitter only -->
            <field>
              <name>TX_BYTE_W_ACK</name>
              <description>Number of bytes sent to slave with acknowledge during the last write transaction as a master-transmitter only</description>
              <bitRange>[14:6]</bitRange>
            </field>

            <!-- ABRT_ADDR_NOACK: the address sent was not acknowledged by any slave as a master -->
            <field>
              <name>ABRT_ADDR_NOACK</name>
              <description>the address sent was not acknowledged by any slave as a master</description>
              <bitRange>[15:15]</bitRange>
            </field>

            <!-- ABRT_TX_DATA_NOACK: the data sent was not acknowledged by any slave as a master -->
            <field>
              <name>ABRT_TX_DATA_NOACK</name>
              <description>the data sent was not acknowledged by any slave as a master</description>
              <bitRange>[16:16]</bitRange>
            </field>

            <!-- ABRT_SLAVE_FLUSH_TX_FIFO: Slave has received a read command and some data exists in the TX FIFO so the slave issues a TX_ABRT interrupt to flush old data in TX FIFO -->
            <field>
              <name>ABRT_SLAVE_FLUSH_TX_FIFO</name>
              <description>Slave has received a read command and some data exists in the TX FIFO so the slave issues a TX_ABRT interrupt to flush old data in TX FIFO</description>
              <bitRange>[17:17]</bitRange>
            </field>

            <!-- ABRT_SLAVE_RD_IN_TX: When the processor side responds to a slave mode request for data to be transmitted to a remote master and user writes a 1 in CMD (bit 8) of I2C_DATA_CMD register -->
            <field>
              <name>ABRT_SLAVE_RD_IN_TX</name>
              <description>When the processor side responds to a slave mode request for data to be transmitted to a remote master and user writes a 1 in CMD (bit 8) of I2C_DATA_CMD register</description>
              <bitRange>[18:18]</bitRange>
            </field>

            <!-- RX_UNDER: receiver is underflow -->
            <field>
              <name>RX_UNDER</name>
              <description>receiver is underflow</description>
              <bitRange>[19:19]</bitRange>
            </field>

            <!-- RX_OVER: receiver is overflow -->
            <field>
              <name>RX_OVER</name>
              <description>receiver is overflow</description>
              <bitRange>[20:20]</bitRange>
            </field>

            <!-- RX_FULL: receiver is full -->
            <field>
              <name>RX_FULL</name>
              <description>receiver is full</description>
              <bitRange>[21:21]</bitRange>
            </field>

            <!-- TX_OVER: transmit is overflow -->
            <field>
              <name>TX_OVER</name>
              <description>transmit is overflow</description>
              <bitRange>[22:22]</bitRange>
            </field>

            <!-- TX_EMPTY: transmit is empty -->
            <field>
              <name>TX_EMPTY</name>
              <description>transmit is empty</description>
              <bitRange>[23:23]</bitRange>
            </field>

            <!-- RD_REQ: read request is received -->
            <field>
              <name>RD_REQ</name>
              <description>read request is received</description>
              <bitRange>[24:24]</bitRange>
            </field>

            <!-- TX_ABRT: transmit is abort -->
            <field>
              <name>TX_ABRT</name>
              <description>transmit is abort</description>
              <bitRange>[25:25]</bitRange>
            </field>

            <!-- RX_DONE: receive is done -->
            <field>
              <name>RX_DONE</name>
              <description>receive is done</description>
              <bitRange>[26:26]</bitRange>
            </field>

            <!-- TX_DONE: transmit is done -->
            <field>
              <name>TX_DONE</name>
              <description>transmit is done</description>
              <bitRange>[27:27]</bitRange>
            </field>

            <!-- WR_REQ: write request is received -->
            <field>
              <name>WR_REQ</name>
              <description>write request is received</description>
              <bitRange>[28:28]</bitRange>
            </field>

            <!-- MST_RD_FLAG: Master is executing read command -->
            <field>
              <name>MST_RD_FLAG</name>
              <description>Master is executing read command</description>
              <bitRange>[29:29]</bitRange>
            </field>

            <!-- MST_WR_FLAG: Master is executing read command -->
            <field>
              <name>MST_WR_FLAG</name>
              <description>Master is executing read command</description>
              <bitRange>[30:30]</bitRange>
            </field>

            <!-- MST_WR_RD_FLAG: Master is executing write-read command -->
            <field>
              <name>MST_WR_RD_FLAG</name>
              <description>Master is executing write-read command</description>
              <bitRange>[31:31]</bitRange>
            </field>
          </fields>
        </register>

        <!-- TX_FIFO_LEVEL: I2C transmit FIFO level -->
        <register>
          <name>TX_FIFO_LEVEL</name>
          <description>I2C transmit FIFO level</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x0000001F</resetMask>

          <fields>
            <!-- LEVEL: FIFO level -->
            <field>
              <name>LEVEL</name>
              <description>FIFO level</description>
              <bitRange>[4:0]</bitRange>
            </field>
          </fields>
        </register>

        <!-- RX_FIFO_LEVEL: I2C receive FIFO level -->
        <register derivedFrom="TX_FIFO_LEVEL">
          <name>RX_FIFO_LEVEL</name>
          <description>I2C receive FIFO level</description>
          <addressOffset>0x58</addressOffset>
        </register>

        <!-- SLAVE_NACK: I2C slave send a data NACK -->
        <register>
          <name>SLAVE_NACK</name>
          <description>I2C slave send a data NACK</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x00000000</resetMask>

          <fields>
            <!-- NACK: data NACK -->
            <field>
              <name>NACK</name>
              <description>data NACK</description>
              <bitRange>[0:0]</bitRange>
            </field>
          </fields>
        </register>

        <!-- SDA_SETUP: I2C SDA setup timer -->
        <register>
          <name>SDA_SETUP</name>
          <description>I2C SDA setup timer</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000C3E8</resetValue>
          <resetMask>0x0003FFFF</resetMask>

          <fields>
            <!-- TSU_DAT: This counter defines the  constrain of TSU:DAT SLC_CNT: 250ns (or 100ns) / INPUT_CLK_PERIOD -->
            <field>
              <name>TSU_DAT</name>
              <description>This counter defines the  constrain of TSU:DAT: 250ns (or 100ns) / INPUT_CLK_PERIOD</description>
              <bitRange>[17:10]</bitRange>
            </field>

            <!-- TSETUP: This counter defines the max value of the following constrains:THD:STA TSU:STO,TSETUP: T / INPUT_CLK_PERIOD -->
            <field>
              <name>TSETUP</name>
              <description>This counter defines the max value of the following constrains:THD:STA TSU:STO,TSETUP: T / INPUT_CLK_PERIOD</description>
              <bitRange>[9:0]</bitRange>
            </field>
          </fields>
        </register>

        <!-- TSU_STA_SETUP: I2C  Tsu_sta and Tbuf_free timer -->
        <register>
          <name>TSU_STA_SETUP</name>
          <description>I2C Tsu_sta  and Tbuf_free timer</description>
          <addressOffset>0x6C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x084759D6</resetValue>
          <resetMask>0x3FFFFFFF</resetMask>

          <fields>
          	<!-- TBUF: This counter defines the constrain of bus free interval: Tbuf, Tbuf : Tbus_free / INPUT_CLK_PERIOD -->
            <field>
              <name>TBUF</name>
              <description>This counter defines the constrain of bus free interval: Tbuf, Tbuf : Tbus_free / INPUT_CLK_PERIOD</description>
              <bitRange>[9:0]</bitRange>
            </field>

            <!-- TSU_STA: This counter defines the  constrain of Tsu:sta, Tsu:sta : Tsu:sta / INPUT_CLK_PERIOD -->
            <field>
              <name>TSU_STA</name>
              <description>This counter defines the  constrain of Tsu:sta, Tsu:sta : Tsu:sta / INPUT_CLK_PERIOD</description>
              <bitRange>[19:10]</bitRange>
            </field>

            <!-- SDA_FILTER_CNT: SDA filter count -->
            <field>
              <name>SDA_FILTER_CNT</name>
              <description>SDA filter count</description>
              <bitRange>[23:20]</bitRange>
            </field>

            <!-- SDA_FILTER_EN: SDA filter enable bit -->
            <field>
              <name>SDA_FILTER_EN</name>
              <description>SDA filter enable bit</description>
              <bitRange>[24:24]</bitRange>
            </field>

            <!-- SCL_FILTER_CNT: SCL filter count -->
            <field>
              <name>SCL_FILTER_CNT</name>
              <description>SCL filter count</description>
              <bitRange>[28:25]</bitRange>
            </field>

            <!-- SCL_FILTER_EN: SCL filter enable bit -->
            <field>
              <name>SCL_FILTER_EN</name>
              <description>SCL filter enable bit</description>
              <bitRange>[29:29]</bitRange>
            </field>
          </fields>
        </register>

        <!-- CLR_TX_DONE: I2C clear TX_DONE interrupt -->
        <register>
          <name>CLR_TX_DONE</name>
          <description>I2C clear TX_DONE interrupt</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x00000000</resetMask>

          <fields>
            <!-- CLEAR: Read this register to clear the TX_DONE interrupt (bit 27) of the I2C_STATUS register -->
            <field>
              <name>CLEAR</name>
              <description>Read this register to clear the TX_DONE interrupt (bit 27) of the I2C_STATUS register</description>
              <bitRange>[0:0]</bitRange>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>

    <!-- I2C1 -->
    <peripheral derivedFrom="I2C0">
      <name>I2C1</name>
      <version>1.0</version>
      <description>I2C 1</description>
      <groupName>I2C</groupName>
			<baseAddress>0x4100A000</baseAddress>
      <access>read-write</access>
      <size>32</size>

      <interrupt>
        <name>I2C1_INT</name>
        <value>26</value>
      </interrupt>
    </peripheral>

    <!-- RTC -->
    <peripheral>
      <name>RTC</name>
      <version>1.0</version>
      <description>RTC</description>
      <groupName>RTC</groupName>
			<baseAddress>0x41007004</baseAddress>
      <access>read-write</access>
      <size>32</size>

      <addressBlock>
        <offset>0</offset>
        <size>0x10</size>
        <usage>registers</usage>
      </addressBlock>

      <interrupt>
        <name>RTC_1S_INT</name>
        <value>29</value>
      </interrupt>

      <interrupt>
        <name>RTC_1MS_INT</name>
        <value>30</value>
      </interrupt>

      <registers>
        <!-- INT_STATUS: interrupt Register -->
        <register>
          <name>INT_STATUS</name>
          <description>interrupt Register</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x00000003</resetMask>

          <fields>
          	<!-- SECOND: 1ms interrupt -->
            <field>
              <name>SECOND</name>
              <description>1s interrupt, write 1 clear 0</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- MILLSECOND: 1ms interrupt -->
            <field>
              <name>MILLSECOND</name>
              <description>1ms interrupt, write 1 clear 0</description>
              <bitRange>[1:1]</bitRange>
            </field>
          </fields>
        </register>

        <!-- SECOND: current seconds of system time -->
        <register>
          <name>SECOND</name>
          <description>current seconds of system time</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
        </register>

        <!-- MILLSECOND: current millseconds of system time -->
        <register>
          <name>MILLSECOND</name>
          <description>current millseconds of system time</description>
          <addressOffset>0x08</addressOffset>
          <size>16</size>
          <access>read-write</access>
          <resetValue>0x0000</resetValue>
          <resetMask>0x03FF</resetMask>

          <fields>
          	<!-- MS: micro seconds -->
            <field>
              <name>MS</name>
              <description>micro seconds</description>
              <bitRange>[9:0]</bitRange>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>

    <!-- GPIO -->
    <peripheral>
      <name>GPIO</name>
      <version>1.0</version>
      <description>GPIO</description>
      <groupName>GPIO</groupName>
			<baseAddress>0x41002000</baseAddress>
      <access>read-write</access>
      <size>32</size>

      <addressBlock>
        <offset>0</offset>
        <size>0x78</size>
        <usage>registers</usage>
      </addressBlock>

      <interrupt>
        <name>GPIO_INT</name>
        <value>24</value>
      </interrupt>

      <registers>
        <!-- GPIO_IN: GPIO input data Register -->
        <register>
          <name>GPIO_IN</name>
          <description>GPIO input data</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
        </register>

        <!-- GPIO_OUT_UNMASK: GPIO output unmask Register -->
        <register>
          <name>GPIO_OUT_UNMASK</name>
          <description>GPIO output mask Register</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
        </register>

        <!-- GPIO_OUT_DATA: GPIO output data register -->
        <register>
          <name>GPIO_OUT_DATA</name>
          <description>GPIO output data register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
        </register>

        <!-- GPIO_OE: GPIO output driver enable -->
        <register>
          <name>GPIO_OE</name>
          <description>GPIO output driver enable</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
        </register>

        <!-- GPIO_INT_MASK: GPIO input interrupt mask -->
        <register>
          <name>GPIO_INT_MASK</name>
          <description>GPIO input interrupt mask</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
        </register>

        <!-- GPIO_INT_STATUS: GPIO input interrupt status -->
        <register>
          <name>GPIO_INT_STATUS</name>
          <description>GPIO input interrupt status</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
        </register>

        <!-- GPIO_INT_RAW: GPIO input interrupt raw -->
        <register>
          <name>GPIO_INT_RAW</name>
          <description>GPIO input interrupt raw</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
        </register>

        <!-- GPIO_POSITIVE_EDGE_INT_TRIGGER: triggers an interrupt while a positive edge, else negitive edge -->
        <register>
          <name>GPIO_POSITIVE_EDGE_INT_TRIGGER</name>
          <description>triggers an interrupt while a positive edge, else negitive edge</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
        </register>

        <!-- PWM_OUT_SEL: Select gpio output from PWM -->
        <register>
          <name>PWM_OUT_SEL</name>
          <description>Select gpio output from PWM</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x0000000F</resetMask>

          <fields>
          	<!-- GPIO_31: GPIO[31] is selected to output PWM -->
            <field>
              <name>GPIO_31</name>
              <description>GPIO[31] is selected to output PWM</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- GPIO_H_9: GPIO_H[9] is selected to output PWM -->
            <field>
              <name>GPIO_H_9</name>
              <description>GPIO_H[9] is selected to output PWM</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- GPIO_H_19: GPIO_H[19] is selected to output PWM -->
            <field>
              <name>GPIO_H_19</name>
              <description>GPIO_H[19] is selected to output PWM</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- GPIO_H_20: GPIO_H[20] is selected to output PWM -->
            <field>
              <name>GPIO_H_20</name>
              <description>GPIO_H[20] is selected to output PWM</description>
              <bitRange>[3:3]</bitRange>
            </field>
          </fields>
        </register>

        <!-- PWM_OUT0_LEN: Pwm channel 0 paramters -->
        <register>
          <name>PWM_OUT0_LEN</name>
          <description>Pwm channel 0 paramters</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>

          <fields>
          	<!-- LOW_LEVEL_TICK: low level width = ticks + 1 -->
            <field>
              <name>LOW_LEVEL_TICK</name>
              <description>low level width = ticks + 1</description>
              <bitRange>[15:0]</bitRange>
            </field>

          	<!-- HIGH_LEVEL_TICK: high level width = ticks + 1 -->
            <field>
              <name>HIGH_LEVEL_TICK</name>
              <description>high level width = ticks + 1</description>
              <bitRange>[31:16]</bitRange>
            </field>
          </fields>
        </register>

        <!-- PWM_OUT1_LEN: Pwm channel 1 paramters -->
        <register derivedFrom="PWM_OUT0_LEN">
          <name>PWM_OUT1_LEN</name>
          <description>Pwm channel 1 paramters</description>
          <addressOffset>0x28</addressOffset>
        </register>

        <!-- PWM_OUT2_LEN: Pwm channel 2 paramters -->
        <register derivedFrom="PWM_OUT0_LEN">
          <name>PWM_OUT2_LEN</name>
          <description>Pwm channel 2 paramters</description>
          <addressOffset>0x2C</addressOffset>
        </register>

        <!-- PWM_OUT3_LEN: Pwm channel 3 paramters -->
        <register derivedFrom="PWM_OUT0_LEN">
          <name>PWM_OUT3_LEN</name>
          <description>Pwm channel 3 paramters</description>
          <addressOffset>0x30</addressOffset>
        </register>

        <!-- PWM_OUT_EN: Pwm enable -->
        <register derivedFrom="PWM_OUT_SEL">
          <name>PWM_OUT_EN</name>
          <description>Pwm enable</description>
          <addressOffset>0x34</addressOffset>
        </register>

        <!-- GPIO_H_IN: GPIO_H input data Register -->
        <register derivedFrom="GPIO_IN">
          <name>GPIO_H_IN</name>
          <description>GPIO_H input data</description>
          <addressOffset>0x38</addressOffset>
        </register>

        <!-- GPIO_H_OUT_UNMASK: GPIO_H output unmask Register -->
        <register derivedFrom="GPIO_OUT_UNMASK">
          <name>GPIO_H_OUT_UNMASK</name>
          <description>GPIO_H output unmask Register</description>
          <addressOffset>0x3C</addressOffset>
        </register>

        <!-- GPIO_H_OUT_DATA: GPIO_H output data register -->
        <register derivedFrom="GPIO_OUT_DATA">
          <name>GPIO_H_OUT_DATA</name>
          <description>GPIO_H output data register</description>
          <addressOffset>0x40</addressOffset>
        </register>

        <!-- GPIO_H_OE: GPIO_H output driver enable -->
        <register derivedFrom="GPIO_OE">
          <name>GPIO_H_OE</name>
          <description>GPIO_H output driver enable</description>
          <addressOffset>0x44</addressOffset>
        </register>

        <!-- GPIO_H_INT_MASK: GPIO_H interrupt mask -->
        <register derivedFrom="GPIO_INT_MASK">
          <name>GPIO_H_INT_MASK</name>
          <description>GPIO_H interrupt mask</description>
          <addressOffset>0x48</addressOffset>
        </register>

        <!-- GPIO_H_INT_STATUS: GPIO_H interrupt status -->
        <register derivedFrom="GPIO_INT_STATUS">
          <name>GPIO_H_INT_STATUS</name>
          <description>GPIO_H interrupt status</description>
          <addressOffset>0x4C</addressOffset>
        </register>

        <!-- GPIO_H_INT_RAW: GPIO_H interrupt raw -->
        <register derivedFrom="GPIO_INT_RAW">
          <name>GPIO_H_INT_RAW</name>
          <description>GPIO_H interrupt raw</description>
          <addressOffset>0x50</addressOffset>
        </register>

        <!-- GPIO_H_POSITIVE_EDGE_INT_TRIGGER: triggers an interrupt while a positive edge, else negitive edge -->
        <register derivedFrom="GPIO_POSITIVE_EDGE_INT_TRIGGER">
          <name>GPIO_H_POSITIVE_EDGE_INT_TRIGGER</name>
          <description>triggers an interrupt while a positive edge, else negitive edge</description>
          <addressOffset>0x54</addressOffset>
        </register>

        <!-- GPIO_N_IN: GPIO_N input data Register -->
        <register derivedFrom="GPIO_IN">
          <name>GPIO_N_IN</name>
          <description>GPIO_N input data</description>
          <addressOffset>0x58</addressOffset>
        </register>

        <!-- GPIO_N_OUT_UNMASK: GPIO_N output unmask Register -->
        <register derivedFrom="GPIO_OUT_UNMASK">
          <name>GPIO_N_OUT_UNMASK</name>
          <description>GPIO_N output unmask Register</description>
          <addressOffset>0x5C</addressOffset>
        </register>

        <!-- GPIO_N_OUT_DATA: GPIO_N output data register -->
        <register derivedFrom="GPIO_OUT_DATA">
          <name>GPIO_N_OUT_DATA</name>
          <description>GPIO_N output data register</description>
          <addressOffset>0x60</addressOffset>
        </register>

        <!-- GPIO_N_OE: GPIO_N output driver enable -->
        <register derivedFrom="GPIO_OE">
          <name>GPIO_N_OE</name>
          <description>GPIO_N output driver enable</description>
          <addressOffset>0x64</addressOffset>
        </register>

        <!-- GPIO_N_INT_MASK: GPIO_N interrupt mask -->
        <register derivedFrom="GPIO_INT_MASK">
          <name>GPIO_N_INT_MASK</name>
          <description>GPIO_N interrupt mask</description>
          <addressOffset>0x68</addressOffset>
        </register>

        <!-- GPIO_N_INT_STATUS: GPIO_N interrupt status -->
        <register derivedFrom="GPIO_INT_STATUS">
          <name>GPIO_N_INT_STATUS</name>
          <description>GPIO_N interrupt status</description>
          <addressOffset>0x6C</addressOffset>
        </register>

        <!-- GPIO_N_INT_RAW: GPIO_N interrupt raw -->
        <register derivedFrom="GPIO_INT_RAW">
          <name>GPIO_N_INT_RAW</name>
          <description>GPIO_N interrupt raw</description>
          <addressOffset>0x70</addressOffset>
        </register>

        <!-- GPIO_N_POSITIVE_EDGE_INT_TRIGGER: triggers an interrupt while a positive edge, else negitive edge -->
        <register derivedFrom="GPIO_POSITIVE_EDGE_INT_TRIGGER">
          <name>GPIO_N_POSITIVE_EDGE_INT_TRIGGER</name>
          <description>triggers an interrupt while a positive edge, else negitive edge</description>
          <addressOffset>0x74</addressOffset>
        </register>
      </registers>
    </peripheral>

    <!-- NOR_FLASH -->
    <peripheral>
      <name>NOR_FLASH</name>
      <version>1.0</version>
      <description>NOR_FLASH</description>
      <groupName>NOR_FLASH</groupName>
			<baseAddress>0x40800000</baseAddress>
      <access>read-write</access>
      <size>32</size>

      <addressBlock>
        <offset>0</offset>
        <size>0x18</size>
        <usage>registers</usage>
      </addressBlock>

      <registers>
        <!-- CTRL0: control Register 0 -->
        <register>
          <name>CTRL0</name>
          <description>control Register 0</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00010A00</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>

          <fields>
          	<!-- DIV: frequency division register, fsck = fclk_io / (DIV + 1) / 2 -->
            <field>
              <name>DIV</name>
              <description>frequency division register, fsck = fclk_io / (DIV + 1) / 2</description>
              <bitRange>[7:0]</bitRange>
            </field>

            <!-- CS_REVALID_INTERVAL: interval from CS invalid to valid, number of half cycle of SCK  -->
            <field>
              <name>CS_REVALID_INTERVAL</name>
              <description>interval from CS invalid to valid, number of half cycle of SCK</description>
              <bitRange>[15:8]</bitRange>
            </field>

            <!-- RW_BYTE_CNT: RW byte count (eliminate CMD, ADDRESS, DUMMY in normal state, contains all in transparent state. 0 is unlimited  -->
            <field>
              <name>RW_BYTE_CNT</name>
              <description>RW byte count (eliminate CMD, ADDRESS, DUMMY in normal state, contains all in transparent state. 0 is unlimited</description>
              <bitRange>[31:16]</bitRange>
            </field>
          </fields>
        </register>

        <!-- CTRL1: control Register 1 -->
        <register>
          <name>CTRL1</name>
          <description>control Register 1</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>

          <fields>
          	<!-- CMD: operated command -->
            <field>
              <name>CMD</name>
              <description>operated command</description>
              <bitRange>[7:0]</bitRange>
            </field>

            <!-- ADDRESS: RW address -->
            <field>
              <name>ADDRESS</name>
              <description>RW address</description>
              <bitRange>[31:8]</bitRange>
            </field>
          </fields>
        </register>

        <!-- TRIGGER: trigger register -->
        <register>
          <name>TRIGGER</name>
          <description>trigger register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x0000000F</resetMask>

          <fields>
          	<!-- OP_START: operation start -->
            <field>
              <name>OP_START</name>
              <description>operation start.</description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
            </field>

            <!-- OP_CLEAN: operation clean -->
            <field>
              <name>OP_CLEAN</name>
              <description>operation clean, stop current opration and clean FIFO</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
            </field>

            <!-- TRSP_RD_EN: if a read operation after transparent operation -->
            <field>
              <name>TRSP_RD_EN</name>
              <description>if a read operation after transparent operation</description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
            </field>

          	<!-- TRSP_EN: enable transparent operation -->
            <field>
              <name>TRSP_EN</name>
              <description>enable transparent operation</description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
            </field>
          </fields>
        </register>

        <!-- STATUS: status register -->
        <register>
          <name>STATUS</name>
          <description>status register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000000</resetValue>
          <resetMask>0x0000007F</resetMask>

          <fields>
          	<!-- BUSY: reading or writting -->
            <field>
              <name>BUSY</name>
              <description>reading or writting</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- RD_FIFO_ALMOST_FULL: read FIFO is almost full -->
            <field>
              <name>RD_FIFO_ALMOST_FULL</name>
              <description>read FIFO is almost full</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- RD_FIFO_EMPTY: read FIFO is empty -->
            <field>
              <name>RD_FIFO_EMPTY</name>
              <description>read FIFO is empty</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- RD_FIFO_FULL: read FIFO is full -->
            <field>
              <name>RD_FIFO_FULL</name>
              <description>read FIFO is full</description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- WR_FIFO_ALMOST_EMPTY: write FIFO is almost empty -->
            <field>
              <name>WR_FIFO_ALMOST_EMPTY</name>
              <description>write FIFO is almost empty</description>
              <bitRange>[4:4]</bitRange>
            </field>

            <!-- WR_FIFO_FULL: write FIFO is full -->
            <field>
              <name>WR_FIFO_FULL</name>
              <description>write FIFO is full</description>
              <bitRange>[5:5]</bitRange>
            </field>

            <!-- WR_FIFO_EMPTY: write FIFO is empty -->
            <field>
              <name>WR_FIFO_EMPTY</name>
              <description>write FIFO is empty</description>
              <bitRange>[6:6]</bitRange>
            </field>
          </fields>
        </register>

        <!-- DATA: data register -->
        <register>
          <name>DATA</name>
          <description>data register. lower bits are significant in read and higher bits are significant in writting</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
        </register>

        <!-- BYPASS: bypass Register, is used for JTAG connecting FLASH directly -->
        <register>
          <name>BYPASS</name>
          <description>bypass Register, is used for JTAG connecting FLASH directly</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x00000001</resetMask>

          <fields>
          	<!-- EN: enable bypass -->
            <field>
              <name>EN</name>
              <description>enable bypass</description>
              <bitRange>[0:0]</bitRange>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>

    <!-- ADC -->
    <peripheral>
      <name>ADC</name>
      <version>1.0</version>
      <description>ADC</description>
      <groupName>ADC</groupName>
			<baseAddress>0x41006000</baseAddress>
      <access>read-write</access>
      <size>32</size>

      <addressBlock>
        <offset>0</offset>
        <size>0x78</size>
        <usage>registers</usage>
      </addressBlock>

      <interrupt>
        <name>ADC_INT</name>
        <value>23</value>
      </interrupt>

      <registers>
        <!-- POWERDOWN_RESET: power down and reset Register -->
        <register>
          <name>POWERDOWN_RESET</name>
          <description>power down and reset Register</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000000F</resetValue>
          <resetMask>0x0000000F</resetMask>

          <fields>
          	<!-- RESET_ADC2: ADC2, reset, active high -->
            <field>
              <name>RESET_ADC2</name>
              <description>ADC2, reset, active high</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- RESET_ADC1: ADC1, reset, active high -->
            <field>
              <name>RESET_ADC1</name>
              <description>ADC1, reset, active high</description>
              <bitRange>[1:1]</bitRange>
            </field>

          	<!-- POWERDOWN_ADC2: ADC2, power down, active high -->
            <field>
              <name>POWERDOWN_ADC2</name>
              <description>ADC2, power down, active high</description>
              <bitRange>[2:2]</bitRange>
            </field>

          	<!-- POWERDOWN_ADC1: ADC1, power down, active high -->
            <field>
              <name>POWERDOWN_ADC1</name>
              <description>ADC1, power down, active high</description>
              <bitRange>[3:3]</bitRange>
            </field>
          </fields>
        </register>

        <!-- CFG0: config Register -->
        <register>
          <name>CFG0</name>
          <description>config Register</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x0000001F</resetMask>

          <fields>
          	<!-- VSEN: ADC-1 VSEN Selection -->
            <field>
              <name>VSEN</name>
              <description>ADC-1 VSEN Selection</description>
              <bitRange>[2:0]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>VSEN_VDDCORE</name>
                  <description>Monitoring VDDCORE</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>VSEN_VDDIO</name>
                  <description>Monitoring VDDIO</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>VSEN_VDDIO2</name>
                  <description>Monitoring VDDIO2</description>
                  <value>4</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

          	<!-- PHASE_CTRL: ADC-1 and ADC-2 CLK Phase Control -->
            <field>
              <name>PHASE_CTRL</name>
              <description>ADC-1 and ADC-2 CLK Phase Control</description>
              <bitRange>[4:3]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PHASE_0DEG_RISE_EDGE</name>
                  <description>ADC-1 and ADC-2 CLK are 0DEG Phase Difference(Rising Edge)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PHASE_90DEG_AHEAD</name>
                  <description>ADC-1 90DEG ahead of ADC-2</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PHASE_90DEG_LAG</name>
                  <description>ADC-1 90DEG lag of ADC-2</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PHASE_0DEG_FALL_EDGE</name>
                  <description>ADC-1 and ADC-2 CLK are 0DEG Phase Difference(falling Edge)</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>

        <!-- CFG_ADC1: config ADC1 register -->
        <register>
          <name>CFG_ADC1</name>
          <description>config ADC1 register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x00007FFF</resetMask>

          <fields>
          	<!-- SYSTEM_MODE: system mode selection -->
            <field>
              <name>SYSTEM_MODE</name>
              <description>system mode selection</description>
              <bitRange>[2:0]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SYSTEM_MODE_IDLE</name>
                  <description>idle</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SYSTEM_MODE_SINGLE_CONV</name>
                  <description>Single-Conversion</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SYSTEM_MODE_CONTINUOUS_CONV</name>
                  <description>Continuous Conversion</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SYSTEM_MODE_OFFSET_CALIBRATION</name>
                  <description>Calibration Mode, Offset Calibration(INPUT=0)</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SYSTEM_MODE_NEGTIVE_GAIN_CALIBRATION</name>
                  <description>Calibration Mode, Gain Calibration(INPUT=-FS)</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SYSTEM_MODE_POSITIVE_GAIN_CALIBRATION</name>
                  <description>Calibration Mode, Gain Calibration(INPUT=FS)</description>
                  <value>5</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- CHANNEL: channel selection -->
            <field>
              <name>CHANNEL_SEL</name>
              <description>channel selection</description>
              <bitRange>[6:3]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>CHANNEL_SEL_0</name>
                  <description>ADCINPUT(+)=VIPP, ADCINPUT(-)=VIPN</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CHANNEL_SEL_1</name>
                  <description>ADCINPUT(+)=VSENP, ADCINPUT(-)=VSENN</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CHANNEL_SEL_2</name>
                  <description>ADCINPUT(+)=VTMP, ADCINPUT(-)=VTMPN</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CHANNEL_SEL_3</name>
                  <description>ADCINPUT(+)=ADIOP[0], ADCINPUT(-)=ADION[0]</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CHANNEL_SEL_4</name>
                  <description>ADCINPUT(+)=ADIOP[1], ADCINPUT(-)=ADION[1]</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CHANNEL_SEL_5</name>
                  <description>ADCINPUT(+)=ADIOP[2], ADCINPUT(-)=ADION[2]]</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CHANNEL_SEL_6</name>
                  <description>ADCINPUT(+)=ADIOP[3], ADCINPUT(-)=ADION[3]</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CHANNEL_SEL_7</name>
                  <description>ADCINPUT(+)=ADIOP[4], ADCINPUT(-)=ADION[4]</description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

          	<!-- MULTI_CHANNEL_CONTINUE_SCAN: If continue to scan multiply channel, else single scan -->
            <field>
              <name>MULTI_CHANNEL_CONTINUE_SCAN</name>
              <description>If continue to scan multiply channel, else single scan</description>
              <bitRange>[7:7]</bitRange>
            </field>

            <!-- MULTI_CHANNEL_BIT: each bit represents each channel -->
            <field>
              <name>MULTI_CHANNEL_BIT</name>
              <description>each bit represents each channel</description>
              <bitRange>[15:8]</bitRange>
            </field>
          </fields>
        </register>

        <!-- CFG_ADC2: config ADC1 register -->
        <register>
          <name>CFG_ADC2</name>
          <description>config ADC1 register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x00007FFF</resetMask>

          <fields>
          	<!-- SYSTEM_MODE: system mode selection -->
            <field derivedFrom="CFG_ADC1.SYSTEM_MODE">
              <name>SYSTEM_MODE</name>
              <description>system mode selection</description>
              <bitRange>[2:0]</bitRange>
            </field>

            <!-- CHANNEL: channel selection -->
            <field>
              <name>CHANNEL_SEL</name>
              <description>channel selection</description>
              <bitRange>[6:3]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>CHANNEL_SEL_0</name>
                  <description>ADCINPUT(+)=VINP, ADCINPUT(-)=VINN</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CHANNEL_SEL_1</name>
                  <description>ADCINPUT(+)=ADIOP[5], ADCINPUT(-)=ADION[5]</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CHANNEL_SEL_2</name>
                  <description>ADCINPUT(+)=ADIOP[6], ADCINPUT(-)=ADION[6]</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CHANNEL_SEL_3</name>
                  <description>ADCINPUT(+)=ADIOP[7], ADCINPUT(-)=ADION[7]</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CHANNEL_SEL_4</name>
                  <description>ADCINPUT(+)=ADIOP[8], ADCINPUT(-)=ADION[8]</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CHANNEL_SEL_5</name>
                  <description>ADCINPUT(+)=ADIOP[9], ADCINPUT(-)=ADION[9]</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CHANNEL_SEL_6</name>
                  <description>ADCINPUT(+)=ADIOP[10], ADCINPUT(-)=ADION[10]</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CHANNEL_SEL_7</name>
                  <description>ADCINPUT(+)=ADIOP[11], ADCINPUT(-)=ADION[11]</description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

          	<!-- MULTI_CHANNEL_CONTINUE_SCAN: If continue to scan multiply channel, else single scan -->
            <field>
              <name>MULTI_CHANNEL_CONTINUE_SCAN</name>
              <description>If continue to scan multiply channel, else single scan</description>
              <bitRange>[7:7]</bitRange>
            </field>

            <!-- MULTI_CHANNEL_BIT: each bit represents each channel -->
            <field>
              <name>MULTI_CHANNEL_BIT</name>
              <description>each bit represents each channel</description>
              <bitRange>[15:8]</bitRange>
            </field>
          </fields>
        </register>

        <!-- ADC1_FIFO_CLEAR: clear adc1 fifo data -->
        <register>
          <name>ADC1_FIFO_CLEAR</name>
          <description>clear adc1 fifo data</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x00000001</resetMask>

          <fields>
          	<!-- CLEAR: clear fifo data, active high -->
            <field>
              <name>CLEAR</name>
              <description>clear fifo data, active high</description>
              <bitRange>[0:0]</bitRange>
            </field>
          </fields>
        </register>

        <!-- ADC2_FIFO_CLEAR: clear adc2 fifo data -->
        <register derivedFrom="ADC1_FIFO_CLEAR">
          <name>ADC2_FIFO_CLEAR</name>
          <description>clear adc2 fifo data</description>
          <addressOffset>0x14</addressOffset>
        </register>

        <!-- ALL_ADC_FIFO_CLEAR: clear adc1 and adc2 fifo data -->
        <register derivedFrom="ADC1_FIFO_CLEAR">
          <name>ALL_ADC_FIFO_CLEAR</name>
          <description>clear adc1 and adc2  fifo data</description>
          <addressOffset>0x18</addressOffset>
        </register>

        <!-- INT_MASK: interrupt mask register -->
        <register>
          <name>INT_MASK</name>
          <description>interrupt mask register</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x0000003F</resetValue>
          <resetMask>0x0000003F</resetMask>

          <fields>
          	<!-- ADC1_ALMOST_FULL: ADC 1 almost full -->
            <field>
              <name>ADC1_ALMOST_FULL</name>
              <description>ADC 1 almost full</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- ADC1_OVERFLOW: ADC 1 is overflow -->
            <field>
              <name>ADC1_OVERFLOW</name>
              <description>ADC 1 is overflow</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- ADC1_EMPTY_ERR: ADC 1 read empty error -->
            <field>
              <name>ADC1_EMPTY_ERR</name>
              <description>ADC 1 read empty error</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- ADC2_ALMOST_FULL: ADC 2 almost full -->
            <field>
              <name>ADC2_ALMOST_FULL</name>
              <description>ADC 2 almost full</description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- ADC2_OVERFLOW: ADC 2 is overflow -->
            <field>
              <name>ADC2_OVERFLOW</name>
              <description>ADC 2 is overflow</description>
              <bitRange>[4:4]</bitRange>
            </field>

            <!-- ADC2_EMPTY_ERR: ADC 2 read empty error -->
            <field>
              <name>ADC2_EMPTY_ERR</name>
              <description>ADC 2 read empty error</description>
              <bitRange>[5:5]</bitRange>
            </field>
          </fields>
        </register>

        <!-- INT_RAW: interrupt raw register -->
        <register derivedFrom="INT_MASK">
          <name>INT_RAW</name>
          <description>interrupt raw register</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x0000003F</resetMask>
          <modifiedWriteValues>oneToClear</modifiedWriteValues>
        </register>

        <!-- INT_STATUS: interrupt status register -->
        <register derivedFrom="INT_MASK">
          <name>INT_STATUS</name>
          <description>interrupt status register</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x0000003F</resetMask>
          <modifiedWriteValues>oneToClear</modifiedWriteValues>
        </register>

        <!-- ADC1_OUT: ADC-1 Output data (Signed-Magnitude Format) -->
        <register>
          <name>ADC1_OUT</name>
          <description>ADC-1 Output data (Signed-Magnitude Format)</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x00000XXX</resetValue>
          <resetMask>0x00000FFF</resetMask>
        </register>

        <!-- ADC2_OUT: ADC-2 Output data (Signed-Magnitude Format) -->
        <register derivedFrom="ADC1_OUT">
          <name>ADC2_OUT</name>
          <description>ADC-2 Output data (Signed-Magnitude Format)</description>
          <addressOffset>0x2C</addressOffset>
        </register>

        <!-- ADC1_OUT_OFFSET_CALIBRATION: ADC-1 Output in offset calibration when Input=0, Ideally DAO[11:0]=000h -->
        <register derivedFrom="ADC1_OUT">
          <name>ADC1_OUT_OFFSET_CALIBRATION</name>
          <description>ADC-1 Output in offset calibration when Input=0, Ideally DAO[11:0]=000h</description>
          <addressOffset>0x30</addressOffset>
        </register>

        <!-- ADC2_OUT_OFFSET_CALIBRATION: ADC-2 Output in offset calibration when Input=0, Ideally DAO[11:0]=000h -->
        <register derivedFrom="ADC1_OUT">
          <name>ADC2_OUT_OFFSET_CALIBRATION</name>
          <description>ADC-2 Output in offset calibration when Input=0, Ideally DAO[11:0]=000h</description>
          <addressOffset>0x34</addressOffset>
        </register>

        <!-- ADC1_OUT_NEGTIVE_GAIN_CALIBRATION: ADC-1 Output in gain calibration when Input=-FS, Ideally DAO[11:0]=801h -->
        <register derivedFrom="ADC1_OUT">
          <name>ADC1_OUT_NEGTIVE_GAIN_CALIBRATION</name>
          <description>ADC-1 Output in gain calibration when Input=-FS, Ideally DAO[11:0]=801h</description>
          <addressOffset>0x38</addressOffset>
        </register>

        <!-- ADC2_OUT_NEGTIVE_GAIN_CALIBRATION: ADC-2 Output in gain calibration when Input=-FS, Ideally DAO[11:0]=801h -->
        <register derivedFrom="ADC1_OUT">
          <name>ADC2_OUT_NEGTIVE_GAIN_CALIBRATION</name>
          <description>ADC-2 Output in gain calibration when Input=-FS, Ideally DAO[11:0]=801h</description>
          <addressOffset>0x3C</addressOffset>
        </register>

        <!-- ADC1_OUT_POSITIVE_GAIN_CALIBRATION: ADC-1 Output in gain calibration when Input=FS, Ideally DAO[11:0]=7FFh -->
        <register derivedFrom="ADC1_OUT">
          <name>ADC1_OUT_POSITIVE_GAIN_CALIBRATION</name>
          <description>ADC-1 Output in gain calibration when Input=FS, Ideally DAO[11:0]=7FFh</description>
          <addressOffset>0x40</addressOffset>
        </register>

        <!-- ADC2_OUT_POSITIVE_GAIN_CALIBRATION: ADC-2 Output in gain calibration when Input=FS, Ideally DAO[11:0]=7FFh -->
        <register derivedFrom="ADC1_OUT">
          <name>ADC2_OUT_POSITIVE_GAIN_CALIBRATION</name>
          <description>ADC-2 Output in gain calibration when Input=FS, Ideally DAO[11:0]=7FFh</description>
          <addressOffset>0x44</addressOffset>
        </register>

        <!-- EOC: Conversion End Indicator -->
        <register>
          <name>EOC</name>
          <description>Conversion End Indicator</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x000000XX</resetValue>
          <resetMask>0x0000003F</resetMask>

          <fields>
          	<!-- ADC2_EOC_GAIN: ADC2 EOC_GAIN signal, conversion is done -->
            <field>
              <name>ADC2_EOC_GAIN</name>
              <description>ADC2 EOC_GAIN signal, conversion is done</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- ADC2_EOC_OFF: ADC2 EOC_OFF signal, conversion is done -->
            <field>
              <name>ADC2_EOC_OFF</name>
              <description>ADC2 EOC_OFF signal, conversion is done</description>
              <bitRange>[1:1]</bitRange>
            </field>

          	<!-- ADC2_EOC: ADC2 EOC signal, conversion is done -->
            <field>
              <name>ADC2_EOC</name>
              <description>ADC2 EOC signal, conversion is done</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- ADC1_EOC_GAIN: ADC1 EOC_GAIN signal, conversion is done -->
            <field>
              <name>ADC1_EOC_GAIN</name>
              <description>ADC1 EOC_GAIN signal, conversion is done</description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- ADC1_EOC_OFF: ADC1 EOC_OFF signal, conversion is done -->
            <field>
              <name>ADC1_EOC_OFF</name>
              <description>ADC1 EOC_OFF signal, conversion is done</description>
              <bitRange>[4:4]</bitRange>
            </field>

          	<!-- ADC1_EOC: ADC1 EOC signal, conversion is done -->
            <field>
              <name>ADC1_EOC</name>
              <description>ADC1 EOC signal, conversion is done</description>
              <bitRange>[5:5]</bitRange>
            </field>
          </fields>
        </register>

        <!-- BUSY: ADC is busy -->
        <register>
          <name>BUSY</name>
          <description>ADC is busy</description>
          <addressOffset>0x4C</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000000X</resetValue>
          <resetMask>0x00000003</resetMask>

          <fields>
          	<!-- ADC1_BUSY: ADC1 is busy -->
            <field>
              <name>ADC1_BUSY</name>
              <description>ADC1 is busy</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- ADC2_BUSY: ADC2 is busy -->
            <field>
              <name>ADC2_BUSY</name>
              <description>ADC2 is busy</description>
              <bitRange>[1:1]</bitRange>
            </field>
          </fields>
        </register>

        <!-- ADC1_START: ADC1 startup enable -->
        <register>
          <name>ADC1_START</name>
          <description>ADC1 startup enable</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x00000001</resetMask>

          <fields>
          	<!-- EN: start -->
            <field>
              <name>EN</name>
              <description>start</description>
              <bitRange>[0:0]</bitRange>
            </field>
          </fields>
        </register>

        <!-- ADC1_STOP: ADC1 stop enable -->
        <register derivedFrom="ADC1_START">
          <name>ADC1_STOP</name>
          <description>ADC1 stop enable</description>
          <addressOffset>0x54</addressOffset>
        </register>

        <!-- ADC1_FIFO_READ: ADC1 FIFO read data -->
        <register>
          <name>ADC1_FIFO_READ</name>
          <description>ADC1 FIFO read data</description>
          <addressOffset>0x58</addressOffset>
          <size>16</size>
          <access>write-only</access>
          <resetValue>0xXXXX</resetValue>
          <resetMask>0xFFFF</resetMask>

          <fields>
            <!-- DATA: data -->
            <field>
              <name>DATA</name>
              <description>data</description>
              <bitRange>[11:0]</bitRange>
            </field>

            <!-- CHANNEL: channel number -->
            <field>
              <name>CHANNEL</name>
              <description>channel number</description>
              <bitRange>[15:12]</bitRange>
            </field>
          </fields>
        </register>

        <!-- ADC2_START: ADC2 startup enable, only for single-conversion -->
        <register derivedFrom="ADC1_START">
          <name>ADC2_START</name>
          <description>ADC2 startup enable, only for single-conversion</description>
          <addressOffset>0x5C</addressOffset>
        </register>

        <!-- ADC2_STOP: ADC1 stop enable, only for single-conversion -->
        <register derivedFrom="ADC1_START">
          <name>ADC2_STOP</name>
          <description>ADC1 stop enable, only for single-conversion</description>
          <addressOffset>0x60</addressOffset>
        </register>

        <!-- ADC2_FIFO_READ: ADC2 FIFO read data -->
        <register derivedFrom="ADC1_FIFO_READ">
          <name>ADC2_FIFO_READ</name>
          <description>ADC2 FIFO read data</description>
          <addressOffset>0x64</addressOffset>
        </register>

        <!-- ALL_ADC_START: all ADCs start -->
        <register derivedFrom="ADC1_START">
          <name>ALL_ADC_START</name>
          <description>all ADCs start</description>
          <addressOffset>0x68</addressOffset>
        </register>

        <!-- ALL_ADC_STOP: all ADCs stop -->
        <register derivedFrom="ADC1_START">
          <name>ALL_ADC_STOP</name>
          <description>all ADCs stop</description>
          <addressOffset>0x6C</addressOffset>
        </register>

        <!-- ALL_ADC_FIFO_READ: all ADCs FIFO read data -->
        <register>
          <name>ALL_ADC_FIFO_READ</name>
          <description>all ADCs FIFO read data</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0xXXXXXXXX</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>

          <fields>
            <!-- ADC1_DATA: ADC1 data -->
            <field>
              <name>ADC1_DATA</name>
              <description>ADC1 data</description>
              <bitRange>[11:0]</bitRange>
            </field>

          	<!-- ADC1_CHANNEL: ADC1 channel number -->
            <field>
              <name>ADC1_CHANNEL</name>
              <description>ADC1 channel number</description>
              <bitRange>[15:12]</bitRange>
            </field>

            <!-- ADC2_DATA: ADC2 data -->
            <field>
              <name>ADC2_DATA</name>
              <description>ADC2 data</description>
              <bitRange>[27:16]</bitRange>
            </field>

          	<!-- ADC2_CHANNEL: ADC2 channel number -->
            <field>
              <name>ADC2_CHANNEL</name>
              <description>ADC2 channel number</description>
              <bitRange>[31:28]</bitRange>
            </field>
          </fields>
        </register>

        <!-- STATUS: status register -->
        <register>
          <name>STATUS</name>
          <description>status register</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <access>read-only</access>
          <resetValue>0x0000000F</resetValue>
          <resetMask>0x000000FF</resetMask>

          <fields>
            <!-- ADC1_READ_EMPTY: ADC1 read empty -->
            <field>
              <name>ADC1_READ_EMPTY</name>
              <description>ADC1 read empty</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- ADC2_READ_EMPTY: ADC2 read empty -->
            <field>
              <name>ADC2_READ_EMPTY</name>
              <description>ADC2 read empty</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- ADC1_READ_ALMOST_EMPTY: ADC1 read almost empty -->
            <field>
              <name>ADC1_READ_ALMOST_EMPTY</name>
              <description>ADC1 read almost empty</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- ADC2_READ_ALMOST_EMPTY: ADC2 read almost empty -->
            <field>
              <name>ADC2_READ_ALMOST_EMPTY</name>
              <description>ADC2 read almost empty</description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- ADC1_WRITE_FULL: ADC1 write full -->
            <field>
              <name>ADC1_WRITE_FULL</name>
              <description>ADC1 write full</description>
              <bitRange>[4:4]</bitRange>
            </field>

            <!-- ADC2_WRITE_FULL: ADC2 write full -->
            <field>
              <name>ADC2_WRITE_FULL</name>
              <description>ADC2 write full</description>
              <bitRange>[5:5]</bitRange>
            </field>

            <!-- ADC1_WRITE_ALMOST_FULL: ADC1 write almost full -->
            <field>
              <name>ADC1_WRITE_ALMOST_FULL</name>
              <description>ADC1 write almost full</description>
              <bitRange>[6:6]</bitRange>
            </field>

          	<!-- ADC2_WRITE_ALMOST_FULL: ADC2 write almost full -->
            <field>
              <name>ADC2_WRITE_ALMOST_FULL</name>
              <description>ADC2 write almost full</description>
              <bitRange>[7:7]</bitRange>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>

    <!-- EFUSE -->
    <peripheral>
      <name>EFUSE</name>
      <version>1.0</version>
      <description>EFUSE</description>
      <groupName>EFUSE</groupName>
			<baseAddress>0x41008000</baseAddress>
      <access>read-write</access>
      <size>32</size>

      <addressBlock>
        <offset>0</offset>
        <size>0x44</size>
        <usage>registers</usage>
      </addressBlock>

      <registers>
        <!-- USER_CTRL_LOW: low user region control -->
        <register>
          <name>USER_CTRL_LOW</name>
          <description>low user region control</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <resetValue>0x00000080</resetValue>
          <resetMask>0x000001FF</resetMask>

          <fields>
          	<!-- WR_EN: write enable -->
            <field>
              <name>WR_EN</name>
              <description>write enable. 1 : write data into EFUSE. clear 0 after read</description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <readAction>clear</readAction>
            </field>

            <!-- RD_EN: read enable -->
            <field>
              <name>RD_EN</name>
              <description>read enable. 1 : write data into EFUSE. clear 0 after read</description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <readAction>clear</readAction>
            </field>

          	<!-- BUSY: reading or writting -->
            <field>
              <name>BUSY</name>
              <description>reading or writting</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>

          	<!-- 	COMPARE_FAIL: data read isn't consist with EFUSE -->
            <field>
              <name>COMPARE_FAIL</name>
              <description>data read isn't consist with EFUSE</description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- RD_CRC_ERR: CRC error in reading -->
            <field>
              <name>RD_CRC_ERR</name>
              <description>CRC error in reading</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>

            <!-- WR_CRC_ERR: CRC error in writting -->
            <field>
              <name>WR_CRC_ERR</name>
              <description>CRC error in writting</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>

            <!-- LOCK: user region in EFUSE is locked, EFUSE can't be burn -->
            <field>
              <name>LOCK</name>
              <description>user region in EFUSE is locked, EFUSE can't be burn</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>

            <!-- TMRF: Reference resistor select -->
            <field>
              <name>TMRF</name>
              <description>Reference resistor select, 1200ohm is recommended</description>
              <bitRange>[8:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>REF_R_3000</name>
                  <description>Reference resistor is 3000ohm</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>REF_R_1200</name>
                  <description>Reference resistor is 1200ohm</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>REF_R_750</name>
                  <description>Reference resistor is 750ohm</description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>

        <!-- TIMING_0: timing 0 -->
        <register>
          <name>TIMING_0</name>
          <description>timing 0</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xF81FFFFF</resetValue>
          <resetMask>0xF81FFFFF</resetMask>

          <fields>
          	<!-- TPRS: TPRS -->
            <field>
              <name>TPRS</name>
              <description>TPRS</description>
              <bitRange>[6:0]</bitRange>
            </field>

            <!-- TESR: TESR -->
            <field>
              <name>TESR</name>
              <description>TESR</description>
              <bitRange>[8:7]</bitRange>
            </field>

          	<!-- TRC: TRC -->
            <field>
              <name>TRC</name>
              <description>TRC</description>
              <bitRange>[12:9]</bitRange>
            </field>

          	<!-- 	TRPW: TRPW -->
            <field>
              <name>TRPW</name>
              <description>TRPW</description>
              <bitRange>[15:13]</bitRange>
            </field>

            <!-- TRAH: TRAH -->
            <field>
              <name>TRAH</name>
              <description>TRAH</description>
              <bitRange>[17:16]</bitRange>
            </field>

            <!-- TRAC: TRAC -->
            <field>
              <name>TRAC</name>
              <description>TRAC</description>
              <bitRange>[20:18]</bitRange>
            </field>

            <!-- TPWPH: TPWPH[6:2] -->
            <field>
              <name>TPWPH</name>
              <description>TPWPH[6:2]</description>
              <bitRange>[31:27]</bitRange>
            </field>
          </fields>
        </register>

        <!-- TIMING_1: timing 1 -->
        <register>
          <name>TIMING_1</name>
          <description>timing 1</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0xFFE70FFF</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>

          <fields>
          	<!-- TPWPS: TPWPS -->
            <field>
              <name>TPWPS</name>
              <description>TPWPS</description>
              <bitRange>[6:0]</bitRange>
            </field>

            <!-- TEPS: TEPS -->
            <field>
              <name>TEPS</name>
              <description>TEPS</description>
              <bitRange>[10:7]</bitRange>
            </field>

          	<!-- TPP: TPP -->
            <field>
              <name>TPP</name>
              <description>TPP</description>
              <bitRange>[21:11]</bitRange>
            </field>

          	<!-- 	TPIT: TPIT -->
            <field>
              <name>TPIT</name>
              <description>TPIT</description>
              <bitRange>[29:22]</bitRange>
            </field>

            <!-- TPWPH: TPWPS[1:0] -->
            <field>
              <name>TPWPH</name>
              <description>TPWPS[1:0]</description>
              <bitRange>[31:30]</bitRange>
            </field>
          </fields>
        </register>

        <!-- USER_DATA0_LOW: user data [31:0] -->
        <register>
          <name>USER_DATA0_LOW</name>
          <description>user data [31:0]</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
        </register>

        <!-- USER_DATA1_LOW: user data [63:32] -->
        <register>
          <name>USER_DATA1_LOW</name>
          <description>user data [63:32]</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
        </register>

        <!-- USER_DATA2_LOW: user data [95:64] -->
        <register>
          <name>USER_DATA2_LOW</name>
          <description>user data [95:64]</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
        </register>

        <!-- USER_DATA3_LOW: user data [127:96] -->
        <register>
          <name>USER_DATA3_LOW</name>
          <description>user data [127:96]</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
        </register>

        <!-- USER_DATA4_LOW: crc and lock bit -->
        <register>
          <name>USER_DATA4_LOW</name>
          <description>crc and lock bit</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFF000001</resetMask>

          <fields>
          	<!-- LOCK: write protection if true  -->
            <field>
              <name>LOCK</name>
              <description>write protection if true</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- CRC: CRC -->
            <field>
              <name>CRC</name>
              <description>CRC</description>
              <bitRange>[31:24]</bitRange>
            </field>
          </fields>
        </register>

        <!-- USER_CTRL_HI: high user region control -->
        <register derivedFrom="USER_CTRL_LOW">
          <name>USER_CTRL_HI</name>
          <description>high user region control</description>
          <addressOffset>0x2C</addressOffset>
        </register>

        <!-- USER_DATA0_HI: user data [159:128] -->
        <register>
          <name>USER_DATA0_HI</name>
          <description>user data [159:128]</description>
          <addressOffset>0x30</addressOffset>
        </register>

        <!-- USER_DATA1_HI: user data [191:160] -->
        <register>
          <name>USER_DATA1_HI</name>
          <description>user data [191:160]</description>
          <addressOffset>0x34</addressOffset>
        </register>

        <!-- USER_DATA2_HI: user data [223:192] -->
        <register>
          <name>USER_DATA2_HI</name>
          <description>user data [223:192]</description>
          <addressOffset>0x38</addressOffset>
        </register>

        <!-- USER_DATA3_HI: user data [255:224] -->
        <register>
          <name>USER_DATA3_HI</name>
          <description>user data [255:224]</description>
          <addressOffset>0x3C</addressOffset>
        </register>

        <!-- USER_DATA4_HI: crc and lock bit -->
        <register derivedFrom="USER_DATA4_LOW">
          <name>USER_DATA4_HI</name>
          <description>crc and lock bit</description>
          <addressOffset>0x40</addressOffset>
        </register>
      </registers>
    </peripheral>

    <!-- CAN 0 -->
    <peripheral>
      <name>CAN0</name>
      <version>1.0</version>
      <description>CAN 0</description>
      <groupName>CAN</groupName>
      <baseAddress>0x41009000</baseAddress>
      <size>32</size>
      <access>read-write</access>

      <addressBlock>
        <offset>0</offset>
        <size>0x1B4</size>
        <usage>registers</usage>
      </addressBlock>

      <interrupt>
        <name>CAN0_INT</name>
        <value>3</value>
      </interrupt>

      <registers>
        <!-- MODE: mode Register -->
        <register>
          <name>MODE</name>
          <description>mode Register</description>
          <addressOffset>0x00</addressOffset>
          <size>8</size>
          <access>read-write</access>

          <fields>
            <!-- RM: reset mode if 1 or operation mode -->
            <field>
              <name>RM</name>
              <description>reset mode if 1 or operation mode</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- LOM: Listen only mode -->
            <field>
              <name>LOM</name>
              <description>Listen only mode</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- STM: self test mode -->
            <field>
              <name>STM</name>
              <description>self test mode</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- AFM: acceptance filter mode. Single filter if 1, dual filter if 0  -->
            <field>
              <name>AFM</name>
              <description>acceptance filter mode. Single filter if 1, dual filter if 0</description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- SM: sleep mode -->
            <field>
              <name>SM</name>
              <description>sleep mode</description>
              <bitRange>[4:4]</bitRange>
            </field>
          </fields>
        </register>

        <!-- CMD: command Register -->
        <register>
          <name>CMD</name>
          <description>command Register</description>
          <addressOffset>0x04</addressOffset>
          <size>8</size>
          <access>write-only</access>

          <fields>
            <!-- TR: transmission request -->
            <field>
              <name>TR</name>
              <description>Set to 1 when a message is to be transmitted</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- AT: Abort transmission -->
            <field>
              <name>AT</name>
              <description>Set to 1 to cancel the next transmission request</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- RRB: Release Receive Buffer -->
            <field>
              <name>RRB</name>
              <description>Set to 1 to release the Receive Buffer</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- CDO: Clear Data Overrun  -->
            <field>
              <name>CDO</name>
              <description>Set to 1 to clear the data overrun condition signaled by the Data Overrun Status bit (SR.1). </description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- SSR: Self Reception Request -->
            <field>
              <name>SSR</name>
              <description>Set to 1 when a message is to be transmitted and received simultaneously</description>
              <bitRange>[4:4]</bitRange>
            </field>
          </fields>
        </register>

        <!-- STATUS: status Register -->
        <register>
          <name>STATUS</name>
          <description>status Register</description>
          <addressOffset>0x08</addressOffset>
          <size>8</size>
          <access>read-only</access>

          <fields>
            <!-- RBNE: Receive Buffer not empty -->
            <field>
              <name>RBNE</name>
              <description>Receive Buffer not empty</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- DO: Data Overrun Status -->
            <field>
              <name>DO</name>
              <description>Data Overrun Status</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- TB_UNLOCK: Transmit Buffer is unlocked -->
            <field>
              <name>TB_UNLOCK</name>
              <description>Transmit Buffer is unlocked and not in transmitting </description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- TC: Transmission complete  -->
            <field>
              <name>TC</name>
              <description>Transmission complete</description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- RXING: receiving the data -->
            <field>
              <name>RXING</name>
              <description>receiving the data</description>
              <bitRange>[4:4]</bitRange>
            </field>

            <!-- TXING: transmitting the data -->
            <field>
              <name>TXING</name>
              <description>transmitting the data</description>
              <bitRange>[5:5]</bitRange>
            </field>

            <!-- ERR: At least one of the error counters is more than Error Warning Limit Register -->
            <field>
              <name>ERR</name>
              <description>At least one of the error counters is more than Error Warning Limit Register</description>
              <bitRange>[6:6]</bitRange>
            </field>

            <!-- BUS_OFF: in 'Bus Off' state -->
            <field>
              <name>BUS_OFF</name>
              <description>in 'Bus Off' state</description>
              <bitRange>[7:7]</bitRange>
            </field>
          </fields>
        </register>

        <!-- INT: interrupt Register -->
        <register>
          <name>INT</name>
          <description>interrupt Register</description>
          <addressOffset>0x0C</addressOffset>
          <size>8</size>
          <access>read-only</access>

          <fields>
            <!-- RBNE: Receive Buffer not empty -->
            <field>
              <name>RBNF</name>
              <description>Receive Buffer not empty</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- TB_UNLOCK: Transmit Buffer is unlocked -->
            <field>
              <name>TB_UNLOCK</name>
              <description>Transmit Buffer is unlocked and not in transmitting </description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- ERR: error -->
            <field>
              <name>ERR</name>
              <description>Set on every change (set or clear) of either the Bus Status or Error Status bits (SR.7,SR.6)</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- DO: Data Overrun Status -->
            <field>
              <name>DO</name>
              <description>Data Overrun Status</description>
              <bitRange>[3:3]</bitRange>
            </field>


            <!-- WAKEUP: wake-up  -->
            <field>
              <name>WAKEUP</name>
              <description>wake-up</description>
              <bitRange>[4:4]</bitRange>
            </field>

            <!-- EP: error passive -->
            <field>
              <name>EP</name>
              <description>Set when the MCAN2 re-enters error active state after being in error passive state or when at least one error counter exceeds the protocol-defined level of 127</description>
              <bitRange>[5:5]</bitRange>
            </field>

            <!-- AL: Arbitration Lost -->
            <field>
              <name>AL</name>
              <description>Set when the MCAN2 loses arbitration and becomes a receiver</description>
              <bitRange>[6:6]</bitRange>
            </field>

            <!-- BUS_ERR: BUS error -->
            <field>
              <name>BUS_ERR</name>
              <description>Set when the MCAN2 detects an error on the CAN-bus</description>
              <bitRange>[7:7]</bitRange>
            </field>
          </fields>
        </register>

        <!-- INT_EN: interrupt enabled Register -->
        <register derivedFrom="INT">
          <name>INT_EN</name>
          <description>interrupt enabled Register</description>
          <addressOffset>0x10</addressOffset>
          <size>8</size>
          <access>read-write</access>
        </register>

        <!-- BTR0: Bus Timing 0 -->
        <register>
          <name>BTR0</name>
          <description>Bus Timing 0</description>
          <addressOffset>0x18</addressOffset>
          <size>8</size>
          <access>read-write</access>

          <fields>
            <!-- BRP: Baud Rate Prescaler -->
            <field>
              <name>BRP</name>
              <description>TQ =2 x Txtal1 x (32 x BRP.5 + 16 x BRP.4 + 8 x BRP.3 + 4 x BRP.2 + 2 x BRP.1 + BRP.0 + 1)</description>
              <bitRange>[5:0]</bitRange>
            </field>

            <!-- SJW: Synchronization Jump Width -->
            <field>
              <name>SJW</name>
              <description>the maximum number of time quanta of sync segment</description>
              <bitRange>[7:6]</bitRange>
            </field>
          </fields>
        </register>

        <!-- BTR1: Bus Timing 1 -->
        <register>
          <name>BTR1</name>
          <description>Bus Timing 1</description>
          <addressOffset>0x1C</addressOffset>
          <size>8</size>
          <access>read-write</access>

          <fields>
            <!-- TSEG1: the maximum number of time quanta of propagation and 1st phase segment -->
            <field>
              <name>TSEG1</name>
              <description>the maximum number of time quanta of propagation and 1st phase segment </description>
              <bitRange>[3:0]</bitRange>
            </field>

            <!-- TSEG2: the maximum number of time quanta of 2nd phase segment -->
            <field>
              <name>TSEG2</name>
              <description>the maximum number of time quanta of 2nd phase segment</description>
              <bitRange>[6:4]</bitRange>
            </field>

            <!-- SAM: sample times. Sample 3 times if 1, once if 0 -->
            <field>
              <name>SAM</name>
              <description>sample times. Sample 3 times if 1, once if 0</description>
              <bitRange>[7:7]</bitRange>
            </field>
          </fields>
        </register>

        <!-- OCR: Output Control Register -->
        <register>
          <name>OCR</name>
          <description>Output Control Register</description>
          <addressOffset>0x20</addressOffset>
          <size>8</size>
          <access>read-write</access>

          <fields>

            <!-- MODE: output control mode -->
            <field>
              <name>MODE</name>
              <description>output control mode</description>
              <bitRange>[1:0]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OCR_MODE_NORMAL</name>
                  <description>TXD is sent to TX0 with the inverse sent to TX1</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>OCR_MODE_CLOCK</name>
                  <description>TXD is sent to TX0 and TXCLK is sent to TX1</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>

        <!-- ALC: Arbitration Lost Capture -->
        <register>
          <name>ALC</name>
          <description>Arbitration Lost Capture</description>
          <addressOffset>0x2C</addressOffset>
          <size>8</size>
          <access>read-only</access>

          <fields>

            <!-- BIT: the current position of the Bit Processor when bus arbitration lost -->
            <field>
              <name>BIT</name>
              <description>the current position of the Bit Processor when bus arbitration lost, 1st bit (ID.28) if 0</description>
              <bitRange>[4:0]</bitRange>
            </field>
          </fields>
        </register>

        <!-- ECC: Error Code Capture -->
        <register>
          <name>ECC</name>
          <description>Error Code Capture</description>
          <addressOffset>0x30</addressOffset>
          <size>8</size>
          <access>read-only</access>

          <fields>

            <!-- SEGMENT: segment code -->
            <field>
              <name>SEGMENT</name>
              <description>segment code</description>
              <bitRange>[4:0]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ECC_SEGMENT_ID28_ID21</name>
                  <description>ID.28 to ID.21</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ECC_SEGMENT_START_FRAME</name>
                  <description>start of frame</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ECC_SEGMENT_SRTR</name>
                  <description>SRTR bit</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ECC_SEGMENT_IDE</name>
                  <description>IDE bit</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ECC_SEGMENT_ID20_ID18</name>
                  <description>ID.20 to ID.18</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ECC_SEGMENT_ID17_ID13</name>
                  <description>ID.17 to ID.13</description>
                  <value>7</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ECC_SEGMENT_CRC_SEQUENCE</name>
                  <description>CRC sequence</description>
                  <value>8</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ECC_SEGMENT_RESERVED_0</name>
                  <description>Reserved bit 0</description>
                  <value>9</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ECC_SEGMENT_DATA_FIELD</name>
                  <description>Data Field</description>
                  <value>10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ECC_SEGMENT_DATA_LENGTH</name>
                  <description>Data length</description>
                  <value>11</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ECC_SEGMENT_RTR</name>
                  <description>RTR</description>
                  <value>12</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ECC_SEGMENT_RESERVED_1</name>
                  <description>Reserved bit 1</description>
                  <value>13</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ECC_SEGMENT_ID4_ID0</name>
                  <description>ID.4 to ID.0</description>
                  <value>14</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ECC_SEGMENT_ID12_ID5</name>
                  <description>ID.12 to ID.5</description>
                  <value>15</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ECC_SEGMENT_ACTIVE_ERR_FLAG</name>
                  <description>Active error flag</description>
                  <value>17</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ECC_SEGMENT_INTERMISSION</name>
                  <description>Intermission</description>
                  <value>18</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ECC_SEGMENT_TOLERATE_DOMINANT_BITS</name>
                  <description>Tolerate dominant bits</description>
                  <value>19</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ECC_SEGMENT_PASSIVE_ERR_FLAG</name>
                  <description>Passive error flag</description>
                  <value>22</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ECC_SEGMENT_ERR_DELIMITER</name>
                  <description>Error delimiter</description>
                  <value>23</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ECC_SEGMENT_CRC_DELIMITER</name>
                  <description>CRC delimiter</description>
                  <value>24</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ECC_SEGMENT_ACK</name>
                  <description>Acknowledge</description>
                  <value>25</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ECC_SEGMENT_END_FRAME</name>
                  <description>End of frame</description>
                  <value>26</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ECC_SEGMENT_ACK_DELIMITER</name>
                  <description>Acknowledge delimiter</description>
                  <value>27</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ECC_SEGMENT_OVERLOAD_FLAG</name>
                  <description>Overload flag</description>
                  <value>28</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- DIRECTION: If 1, the error occurred during reception. If 0, the error occurred during transmission. -->
            <field>
              <name>DIRECTION</name>
              <description>If 1, the error occurred during reception. If 0, the error occurred during transmission</description>
              <bitRange>[5:5]</bitRange>
            </field>

            <!-- ERR: error code -->
            <field>
              <name>ERR</name>
              <description>error code</description>
              <bitRange>[7:6]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ECC_ERR_BIT</name>
                  <description>bit error</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ECC_ERR_FORM</name>
                  <description>Form error</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ECC_ERR_STUFF</name>
                  <description>stuff error</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ECC_ERR_OTHER</name>
                  <description>Some other type of error</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>

        <!-- EWLR: Error Warning Limit -->
        <register>
          <name>EWLR</name>
          <description>Error Warning Limit</description>
          <addressOffset>0x34</addressOffset>
          <size>8</size>
          <access>read-write</access>
        </register>

        <!-- RXERR: Receive Error Counter -->
        <register>
          <name>RXERR</name>
          <description>Receive Error Counter</description>
          <addressOffset>0x38</addressOffset>
          <size>8</size>
          <access>read-write</access>
        </register>

        <!-- TXERR: Transmit Error Counter -->
        <register>
          <name>TXERR</name>
          <description>Transmit Error Counter</description>
          <addressOffset>0x3C</addressOffset>
          <size>8</size>
          <access>read-write</access>
        </register>

        <!-- FI_OR_ACR0: Transmit Frame Information if writting or Receive Frame Information if reading, ACR[0] if reset mode -->
        <register>
          <name>FI_OR_ACR0</name>
          <description>Transmit Frame Information if writting or Receive Frame Information if reading, ACR[0] if reset mode</description>
          <addressOffset>0x40</addressOffset>
          <size>8</size>
          <access>read-write</access>

          <fields>

            <!-- DLC: byte number in the data -->
            <field>
              <name>DLC</name>
              <description>byte number in the data</description>
              <bitRange>[3:0]</bitRange>
            </field>

            <!-- RTR: remote frame or data frame -->
            <field>
              <name>RTR</name>
              <description>1 indicates a remote frame; 0 indicates a data frame</description>
              <bitRange>[6:6]</bitRange>
            </field>

            <!-- FF: frame format -->
            <field>
              <name>FF</name>
              <description>1 selects Extended Frame Format (EFF); 0 selects Standard Frame Format (SFF)</description>
              <bitRange>[7:7]</bitRange>
            </field>
          </fields>
        </register>

        <!-- DI0_OR_ACR1: Transmit data Information if writting or Receive data Information if reading, ACR[1] if reset mode -->
        <register>
        	<name>DI0_OR_ACR1</name>
          <description>Transmit data Information if writting or Receive data Information if reading, ACR[1] if reset mode</description>
          <addressOffset>0x44</addressOffset>
          <size>8</size>
          <access>read-write</access>
        </register>

        <!-- DI1_OR_ACR2: Transmit data Information if writting or Receive data Information if reading, ACR[2] if reset mode -->
        <register>
        	<name>DI1_OR_ACR2</name>
          <description>Transmit data Information if writting or Receive data Information if reading, ACR[2] if reset mode</description>
          <addressOffset>0x48</addressOffset>
          <size>8</size>
          <access>read-write</access>
        </register>

        <!-- DI2_OR_ACR3: Transmit data Information if writting or Receive data Information if reading, ACR[3] if reset mode -->
        <register>
        	<name>DI2_OR_ACR3</name>
          <description>Transmit data Information if writting or Receive data Information if reading, ACR[3] if reset mode</description>
          <addressOffset>0x4C</addressOffset>
          <size>8</size>
          <access>read-write</access>
        </register>

        <!-- DI3_OR_AMR0: Transmit data Information if writting or Receive data Information if reading, AMR[0] if reset mode -->
        <register>
        	<name>DI3_OR_AMR0</name>
          <description>Transmit data Information if writting or Receive data Information if reading, AMR[0] if reset mode</description>
          <addressOffset>0x50</addressOffset>
          <size>8</size>
          <access>read-write</access>
        </register>

        <!-- DI4_OR_AMR1: Transmit data Information if writting or Receive data Information if reading, AMR[1] if reset mode -->
        <register>
        	<name>DI4_OR_AMR1</name>
          <description>Transmit data Information if writting or Receive data Information if reading, AMR[1] if reset mode</description>
          <addressOffset>0x54</addressOffset>
          <size>8</size>
          <access>read-write</access>
        </register>

        <!-- DI5_OR_AMR2: Transmit data Information if writting or Receive data Information if reading, AMR[2] if reset mode -->
        <register>
        	<name>DI5_OR_AMR2</name>
          <description>Transmit data Information if writting or Receive data Information if reading, AMR[2] if reset mode</description>
          <addressOffset>0x58</addressOffset>
          <size>8</size>
          <access>read-write</access>
        </register>

        <!-- DI6_OR_AMR3: Transmit data Information if writting or Receive data Information if reading, AMR[3] if reset mode -->
        <register>
        	<name>DI6_OR_AMR3</name>
          <description>Transmit data Information if writting or Receive data Information if reading, AMR[3] if reset mode</description>
          <addressOffset>0x5C</addressOffset>
          <size>8</size>
          <access>read-write</access>
        </register>

        <!-- DI: Transmit data Information if writting or Receive data Information if reading -->
        <register>
        	<dim>5</dim>
          <dimIncrement>4</dimIncrement>
          <dimIndex>7-11</dimIndex>
        	<name>DI%s</name>
          <description>Transmit data Information if writting or Receive data Information if reading</description>
          <addressOffset>0x60</addressOffset>
          <size>8</size>
          <access>read-write</access>
        </register>

        <!-- RMC: Receive Message Counter -->
        <register>
          <name>RMC</name>
          <description>Receive Message Counter</description>
          <addressOffset>0x74</addressOffset>
          <size>8</size>
          <access>read-write</access>
        </register>

        <!-- CDR: Clock Divider Register -->
        <register>
          <name>CDR</name>
          <description>Clock Divider Register</description>
          <addressOffset>0x7C</addressOffset>
          <size>8</size>
          <access>read-write</access>

          <fields>

            <!-- DIVIDER: divider of XTAL1 -->
            <field>
              <name>DIVIDER</name>
              <description>divider of XTAL1</description>
              <bitRange>[2:0]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>CDR_DIV_1_2</name>
                  <description>1/2 XTAL1</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CDR_DIV_1_4</name>
                  <description>1/4 XTAL1</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CDR_DIV_1_6</name>
                  <description>1/6 XTAL1</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CDR_DIV_1_8</name>
                  <description>1/8 XTAL1</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CDR_DIV_1_10</name>
                  <description>1/10 XTAL1</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CDR_DIV_1_12</name>
                  <description>1/12 XTAL1</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CDR_DIV_1_14</name>
                  <description>1/14 XTAL1</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CDR_DIV_1_1</name>
                  <description>XTAL1</description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- OFF: disable XTAL1 -->
            <field>
              <name>OFF</name>
              <description>disable XTAL1</description>
              <bitRange>[3:3]</bitRange>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>

    <!-- CAN 1 -->
    <peripheral derivedFrom="CAN0">
      <name>CAN1</name>
      <version>1.0</version>
      <description>CAN 1</description>
      <groupName>CAN</groupName>
      <baseAddress>0x4100D000</baseAddress>
      <size>32</size>
      <access>read-write</access>

      <addressBlock>
        <offset>0</offset>
        <size>0x1B4</size>
        <usage>registers</usage>
      </addressBlock>

      <interrupt>
        <name>CAN1_INT</name>
        <value>4</value>
      </interrupt>
    </peripheral>

    <!-- DMA -->
    <peripheral>
      <name>DMA</name>
      <version>1.0</version>
      <description>DMA</description>
      <groupName>DMA</groupName>
      <baseAddress>0x41500000</baseAddress>
      <size>32</size>
      <access>read-write</access>

      <addressBlock>
        <offset>0</offset>
        <size>0x400</size>
        <usage>registers</usage>
      </addressBlock>

      <interrupt>
        <name>DMA_INT</name>
        <value>2</value>
      </interrupt>

      <registers>
        <!-- SAR: Current Source Address of DMA transfer -->
        <register>
        	<dim>8</dim>
          <dimIncrement>0x58</dimIncrement>
          <dimIndex>0-7</dimIndex>
        	<name>SAR%s</name>
          <description>Current Source Address of DMA transfer</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>

        <!-- DAR: Current Destination Address of DMA transfer -->
        <register>
        	<dim>8</dim>
          <dimIncrement>0x58</dimIncrement>
          <dimIndex>0-7</dimIndex>
        	<name>DAR%s</name>
          <description>Current Destination Address of DMA transfer</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>

        <!-- LLP: Linked List Pointer Register for Channel -->
        <register>
        	<dim>8</dim>
          <dimIncrement>0x58</dimIncrement>
          <dimIndex>0-7</dimIndex>
        	<name>LLP%s</name>
          <description>Linked List Pointer Register for Channel</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- LMS: List Master Select -->
            <field>
              <name>LMS</name>
              <description>Identifies the AHB layer/interface where the memory device that stores the next linked list item resides.</description>
              <bitRange>[1:0]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>AHB_MASTER_1</name>
                  <description>AHB master 1</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>AHB_MASTER_2</name>
                  <description>AHB master 2</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>AHB_MASTER_3</name>
                  <description>AHB master 3</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>AHB_MASTER_4</name>
                  <description>AHB master 4</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- LOC: Starting Address In Memory -->
            <field>
              <name>LOC</name>
              <description>Starting Address In Memory of next LLI if block chaining is enabled</description>
              <bitRange>[31:2]</bitRange>
            </field>
          </fields>
        </register>

        <!-- CTL_LOW: Lower 32-bits Control Register for Channel -->
        <register>
        	<dim>8</dim>
          <dimIncrement>0x58</dimIncrement>
          <dimIndex>0-7</dimIndex>
        	<name>CTL_LOW%s</name>
          <description>Lower 32-bits Control Register for Channel</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- INT_EN: Interrupt Enable Bit -->
            <field>
              <name>INT_EN</name>
              <description>Interrupt Enable Bit</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- DST_TR_WIDTH: Destination Transfer Width -->
            <field>
              <name>DST_TR_WIDTH</name>
              <description>Destination Transfer Width</description>
              <bitRange>[3:1]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>TR_WIDTH_8_BIT</name>
                  <description>8 bit</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TR_WIDTH_16_BIT</name>
                  <description>16 bit</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TR_WIDTH_32_BIT</name>
                  <description>32 bit</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TR_WIDTH_64_BIT</name>
                  <description>64 bit</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TR_WIDTH_128_BIT</name>
                  <description>128 bit</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TR_WIDTH_256_BIT</name>
                  <description>256 bit</description>
                  <value>5</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- SRC_TR_WIDTH: Source Transfer Width -->
            <field derivedFrom = "DST_TR_WIDTH">
              <name>SRC_TR_WIDTH</name>
              <description>Source Transfer Width</description>
              <bitRange>[6:4]</bitRange>
            </field>

            <!-- DINC: Destination Address Increment -->
            <field>
              <name>DINC</name>
              <description>Destination Address Increment</description>
              <bitRange>[8:7]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>INC_INCREMENT</name>
                  <description>Increment</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>INC_DECREMENT</name>
                  <description>Decrement</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>INC_NO_CHANGE</name>
                  <description>No change</description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- SINC: Source Address Increment -->
            <field derivedFrom = "DINC">
              <name>SINC</name>
              <description>Source Address Increment</description>
              <bitRange>[10:9]</bitRange>
            </field>

            <!-- DEST_MSIZE: Destination Burst Transaction Length -->
            <field>
              <name>DEST_MSIZE</name>
              <description>Destination Burst Transaction Length</description>
              <bitRange>[13:11]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MSIZE_1</name>
                  <description>1 TR_WIDTH</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MSIZE_4</name>
                  <description>4 TR_WIDTH</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MSIZE_8</name>
                  <description>8 TR_WIDTH</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MSIZE_16</name>
                  <description>16 TR_WIDTH</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MSIZE_32</name>
                  <description>32 TR_WIDTH</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MSIZE_64</name>
                  <description>64 TR_WIDTH</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MSIZE_128</name>
                  <description>128 TR_WIDTH</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MSIZE_256</name>
                  <description>256 TR_WIDTH</description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- SRC_MSIZE: Source Burst Transaction Length -->
            <field derivedFrom = "DEST_MSIZE">
              <name>SRC_MSIZE</name>
              <description>Source Burst Transaction Length</description>
              <bitRange>[16:14]</bitRange>
            </field>

            <!-- SRC_GATHER_EN: Source gather enable bit -->
            <field>
              <name>SRC_GATHER_EN</name>
              <description>Source gather enable bit</description>
              <bitRange>[17:17]</bitRange>
            </field>

            <!-- DST_SCATTER_EN: Destination scatter enable bit -->
            <field>
              <name>DST_SCATTER_EN</name>
              <description>Destination scatter enable bit</description>
              <bitRange>[18:18]</bitRange>
            </field>

            <!-- TT_FC: Transfer Type and Flow Control -->
            <field>
              <name>TT_FC</name>
              <description>Transfer Type and Flow Control</description>
              <bitRange>[22:20]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>TT_FC_MM_DW_AHB_DMAC</name>
                  <description>Transfer Type is memory to memory and Flow Control is DW_ahb_dmac</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TT_FC_MP_DW_AHB_DMAC</name>
                  <description>Transfer Type is memory to peripheral and Flow Control is DW_ahb_dmac</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TT_FC_PM_DW_AHB_DMAC</name>
                  <description>Transfer Type is peripheral to memory and Flow Control is DW_ahb_dmac</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TT_FC_PP_DW_AHB_DMAC</name>
                  <description>Transfer Type is peripheral to peripheral and Flow Control is DW_ahb_dmac</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TT_FC_PM_P</name>
                  <description>Transfer Type is peripheral to memory and Flow Control is peripheral</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TT_FC_PP_SP</name>
                  <description>Transfer Type is peripheral to peripheral and Flow Control is source peripheral</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TT_FC_MP_P</name>
                  <description>Transfer Type is memory to peripheral and Flow Control is peripheral</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TT_FC_PP_DP</name>
                  <description>Transfer Type is peripheral to peripheral and Flow Control is Destination peripheral</description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- DMS: Destination Master Select -->
            <field>
              <name>DMS</name>
              <description>Destination Master Select</description>
              <bitRange>[24:23]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>AHB_MASTER_1</name>
                  <description>AHB master 1</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>AHB_MASTER_2</name>
                  <description>AHB master 2</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>AHB_MASTER_3</name>
                  <description>AHB master 3</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>AHB_MASTER_4</name>
                  <description>AHB master 4</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- SMS: Source Master Select -->
            <field  derivedFrom = "DMS">
              <name>SMS</name>
              <description>Source Master Select</description>
              <bitRange>[26:25]</bitRange>
            </field>

            <!-- LLP_DST_EN: Block chaining is enabled on the destination side -->
            <field>
              <name>LLP_DST_EN</name>
              <description>Block chaining is enabled on the destination side</description>
              <bitRange>[27:27]</bitRange>
            </field>

            <!-- LLP_SRC_EN: Block chaining is enabled on the source side -->
            <field>
              <name>LLP_SRC_EN</name>
              <description>Block chaining is enabled on the source side</description>
              <bitRange>[28:28]</bitRange>
            </field>
          </fields>
        </register>

        <!-- CTL_HI: Higher 32-bits Control Register for Channel -->
        <register>
        	<dim>8</dim>
          <dimIncrement>0x58</dimIncrement>
          <dimIndex>0-7</dimIndex>
        	<name>CTL_HI%s</name>
          <description>Higher 32-bits Control Register for Channel</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- BLOCK_TS: Block Transfer Size -->
            <field>
              <name>BLOCK_TS</name>
              <description>indicates the total number of single transactions to perform for every block transfer</description>
              <bitRange>[11:0]</bitRange>
            </field>

            <!-- DONE: Done bit -->
            <field>
              <name>DONE</name>
              <description>a block transfer is complete</description>
              <bitRange>[12:12]</bitRange>
            </field>
          </fields>
        </register>

        <!-- SSTAT: Source Status Register for Channel -->
        <register>
        	<dim>8</dim>
          <dimIncrement>0x58</dimIncrement>
          <dimIndex>0-7</dimIndex>
        	<name>SSTAT%s</name>
          <description>Source Status Register for Channel</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>

        <!-- DSTAT: Destination Status Register for Channel -->
        <register>
        	<dim>8</dim>
          <dimIncrement>0x58</dimIncrement>
          <dimIndex>0-7</dimIndex>
        	<name>DSTAT%s</name>
          <description>Destination Status Register for Channel</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>

        <!-- SSTATAR: Source Status Address Register for Channel -->
        <register>
        	<dim>8</dim>
          <dimIncrement>0x58</dimIncrement>
          <dimIndex>0-7</dimIndex>
        	<name>SSTATAR%s</name>
          <description>Source Status Address Register for Channel</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>

        <!-- DSTATAR: Destination Status Address Register for Channel -->
        <register>
        	<dim>8</dim>
          <dimIncrement>0x58</dimIncrement>
          <dimIndex>0-7</dimIndex>
        	<name>DSTATAR%s</name>
          <description>Destination Status Address Register for Channel</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>

        <!-- CFG_LOW: Lower 32-bit Configuration Register for Channel -->
        <register>
        	<dim>8</dim>
          <dimIncrement>0x58</dimIncrement>
          <dimIndex>0-7</dimIndex>
        	<name>CFG_LOW%s</name>
          <description>Lower 32-bit Configuration Register for Channel</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- CH_PRIOR: Channel priority -->
            <field>
              <name>CH_PRIOR</name>
              <description>Channel priority. A priority of 7 is the highest priority</description>
              <bitRange>[7:5]</bitRange>
            </field>

            <!-- CH_SUSP: Channel Suspend -->
            <field>
              <name>CH_SUSP</name>
              <description>Suspends all DMA data transfers from the source until this bit is cleared.</description>
              <bitRange>[8:8]</bitRange>
            </field>

            <!-- FIFO_EMPTY: Indicates if there is data left in the channel FIFO -->
            <field>
              <name>FIFO_EMPTY</name>
              <description>Indicates if there is data left in the channel FIFO</description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
            </field>

            <!-- HS_SEL_DST: If Destination Software handshaking interface -->
            <field>
              <name>HS_SEL_DST</name>
              <description>If Destination Software handshaking interface</description>
              <bitRange>[10:10]</bitRange>
            </field>

            <!-- HS_SEL_SRC: If Source Software handshaking interface -->
            <field>
              <name>HS_SEL_SRC</name>
              <description>If Source Software handshaking interface</description>
              <bitRange>[11:11]</bitRange>
            </field>

            <!-- LOCK_CH_L: Channel Lock Level -->
            <field>
              <name>LOCK_CH_L</name>
              <description>Indicates the duration over which CFGx.LOCK_CH bit applies.</description>
              <bitRange>[13:12]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>LOCK_L_DMA_TRANSFER</name>
                  <description>Over complete DMA transfer</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LOCK_L_DMA_BLOCK_TRANSFER</name>
                  <description>Over complete DMA block transfer</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LOCK_L_DMA_BLOCK_TRANSACTION</name>
                  <description>Over complete DMA transaction</description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- LOCK_B_L: Bus Lock Level -->
            <field derivedFrom = "LOCK_CH_L">
              <name>LOCK_B_L</name>
              <description>Indicates the duration over which CFGx.LOCK_B bit applies.</description>
              <bitRange>[15:14]</bitRange>
            </field>

            <!-- LOCK_CH: Channel Lock Bit -->
            <field>
              <name>LOCK_CH</name>
              <description>Channel Lock Bit</description>
              <bitRange>[16:16]</bitRange>
            </field>

            <!-- LOCK_B: Bus Lock Bit -->
            <field>
              <name>LOCK_B</name>
              <description>Bus Lock Bit</description>
              <bitRange>[17:17]</bitRange>
            </field>

            <!-- DST_HS_POL: Destination Handshaking Interface Polarity -->
            <field>
              <name>DST_HS_POL</name>
              <description>Destination Handshaking Interface Polarity. 0: active high</description>
              <bitRange>[18:18]</bitRange>
            </field>

            <!-- SRC_HS_POL: Source Handshaking Interface Polarity -->
            <field>
              <name>SRC_HS_POL</name>
              <description>Source Handshaking Interface Polarity. 0: active high</description>
              <bitRange>[19:19]</bitRange>
            </field>

            <!-- MAX_ABRST: Maximum AMBA Burst Length -->
            <field>
              <name>MAX_ABRST</name>
              <description>Maximum AMBA Burst Length</description>
              <bitRange>[29:20]</bitRange>
            </field>

            <!-- RELOAD_SRC: Automatic Source Reload -->
            <field>
              <name>RELOAD_SRC</name>
              <description>Automatic Source Reload</description>
              <bitRange>[30:30]</bitRange>
            </field>

            <!-- RELOAD_DST: Automatic Destination Reload -->
            <field>
              <name>RELOAD_DST</name>
              <description>Automatic Destination Reload</description>
              <bitRange>[31:31]</bitRange>
            </field>
          </fields>
        </register>

        <!-- CFG_HI: Higher 32-bit Configuration Register for Channel -->
        <register>
        	<dim>8</dim>
          <dimIncrement>0x58</dimIncrement>
          <dimIndex>0-7</dimIndex>
        	<name>CFG_HI%s</name>
          <description>Higher 32-bit Configuration Register for Channel</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- FCMODE: Flow Control Mode -->
            <field>
              <name>FCMODE</name>
              <description>if source transaction requests aren't serviced when the Destination Peripheral is the flow controller.</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- FIFO_MODE: FIFO Mode Select -->
            <field>
              <name>FIFO_MODE</name>
              <description>Determines space or data needs to be available in the FIFO before a burst transaction request is serviced.</description>
              <bitRange>[1:1]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>FIFO_MODE_0</name>
                  <description>Space/data available for single AHB transfer of the specified transfer width</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_MODE_1</name>
                  <description>Data available is greater than half the FIFO depth for destination transfers and space available is greater than half the fifo depth for source transfers.</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- PROTCTL: Protection Control -->
            <field>
              <name>PROTCTL</name>
              <description>There is a one-to-one mapping of these register bits to the HPROT[3:1] master interface signals</description>
              <bitRange>[4:2]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PROTCTL_HPROT_1</name>
                  <description>HPROT[1]</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PROTCTL_HPROT_2</name>
                  <description>HPROT[2]</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PROTCTL_HPROT_3</name>
                  <description>HPROT[3]</description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- DS_UPD_EN: Destination Status Update Enable -->
            <field>
              <name>DS_UPD_EN</name>
              <description>STATx is only updated from STATARx</description>
              <bitRange>[5:5]</bitRange>
            </field>

            <!-- SS_UPD_EN: Source Status Update Enable -->
            <field>
              <name>SS_UPD_EN</name>
              <description>STATx is only updated from STATARx</description>
              <bitRange>[6:6]</bitRange>
            </field>
          </fields>
        </register>

        <!-- SGR: Source Gather Register for Channel -->
        <register>
        	<dim>8</dim>
          <dimIncrement>0x58</dimIncrement>
          <dimIndex>0-7</dimIndex>
        	<name>SGR%s</name>
          <description>Source Gather Register for Channel</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- SGI: Source gather interval -->
            <field>
              <name>SGI</name>
              <description>Source gather interval</description>
              <bitRange>[19:0]</bitRange>
            </field>

            <!-- SGC: Source gather count -->
            <field>
              <name>SGC</name>
              <description>Specifies the number of contiguous source transfers of CTLx.SRC_TR_WIDTH</description>
              <bitRange>[31:20]</bitRange>
            </field>
          </fields>
        </register>

        <!-- DSR: Destination Scatter Register for Channel -->
        <register>
        	<dim>8</dim>
          <dimIncrement>0x58</dimIncrement>
          <dimIndex>0-7</dimIndex>
        	<name>DSR%s</name>
          <description>Destination Scatter Register for Channel</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- DSI: Destination scatter interval -->
            <field>
              <name>DSI</name>
              <description>Destination scatter interval</description>
              <bitRange>[19:0]</bitRange>
            </field>

            <!-- DSC: Source gather count -->
            <field>
              <name>DSC</name>
              <description>Specifies the number of contiguous destination transfers of CTLx.DST_TR_WIDTH</description>
              <bitRange>[31:20]</bitRange>
            </field>
          </fields>
        </register>

        <!-- INT_TFR: DMA Transfer Complete -->
        <register>
        	<name>INT_TFR</name>
          <description>DMA Transfer Complete</description>
          <addressOffset>0x2E8</addressOffset>
          <size>8</size>
          <access>read-only</access>
        </register>

        <!-- INT_BLOCK: Block Transfer Complete -->
        <register>
        	<name>INT_BLOCK</name>
          <description>Block Transfer Complete</description>
          <addressOffset>0x2F0</addressOffset>
          <size>8</size>
          <access>read-only</access>
        </register>

        <!-- INT_SRC_TRAN: Source Transaction Complete -->
        <register>
        	<name>INT_SRC_TRAN</name>
          <description>Source Transaction Complete</description>
          <addressOffset>0x2F8</addressOffset>
          <size>8</size>
          <access>read-only</access>
        </register>

        <!-- INT_DST_TRAN: Destination Transaction Complete -->
        <register>
        	<name>INT_DST_TRAN</name>
          <description>Destination Transaction Complete</description>
          <addressOffset>0x300</addressOffset>
          <size>8</size>
          <access>read-only</access>
        </register>

        <!-- INT_ERR: Error -->
        <register>
        	<name>INT_ERR</name>
          <description>Error</description>
          <addressOffset>0x308</addressOffset>
          <size>8</size>
          <access>read-only</access>
        </register>

        <!-- INT_EN_TFR: DMA Transfer Complete -->
        <register>
        	<name>INT_EN_TFR</name>
          <description>DMA Transfer Complete</description>
          <addressOffset>0x310</addressOffset>
          <size>16</size>
          <access>read-write</access>

          <fields>
            <!-- EN: interrupt enable -->
            <field>
              <name>EN</name>
              <description>interrupt enable</description>
              <bitRange>[7:0]</bitRange>
            </field>

            <!-- WE: interrupt enable write enable -->
            <field>
              <name>WE</name>
              <description>interrupt enable write enable</description>
              <bitRange>[15:8]</bitRange>
            </field>
          </fields>
        </register>

        <!-- INT_EN_BLOCK: Block Transfer Complete -->
        <register derivedFrom = "INT_EN_TFR">
        	<name>INT_EN_BLOCK</name>
          <description>Block Transfer Complete</description>
          <addressOffset>0x318</addressOffset>
          <size>16</size>
          <access>read-write</access>
        </register>

        <!-- INT_EN_SRC_TRAN: Source Transaction Complete -->
        <register derivedFrom = "INT_EN_TFR">
        	<name>INT_EN_SRC_TRAN</name>
          <description>Source Transaction Complete</description>
          <addressOffset>0x320</addressOffset>
          <size>16</size>
          <access>read-write</access>
        </register>

        <!-- INT_EN_DST_TRAN: Destination Transaction Complete -->
        <register derivedFrom = "INT_EN_TFR">
        	<name>INT_EN_DST_TRAN</name>
          <description>Destination Transaction Complete</description>
          <addressOffset>0x328</addressOffset>
          <size>16</size>
          <access>read-write</access>
        </register>

        <!-- INT_EN_ERR: Error -->
        <register derivedFrom = "INT_EN_TFR">
        	<name>INT_EN_ERR</name>
          <description>Error</description>
          <addressOffset>0x330</addressOffset>
          <size>16</size>
          <access>read-write</access>
        </register>

        <!-- INT_CLEAR_TFR: DMA Transfer Complete -->
        <register>
        	<name>INT_CLEAR_TFR</name>
          <description>DMA Transfer Complete</description>
          <addressOffset>0x338</addressOffset>
          <size>8</size>
          <access>write-only</access>
        </register>

        <!-- INT_CLEAR_BLOCK: Block Transfer Complete -->
        <register>
        	<name>INT_CLEAR_BLOCK</name>
          <description>Block Transfer Complete</description>
          <addressOffset>0x340</addressOffset>
          <size>8</size>
          <access>write-only</access>
        </register>

        <!-- INT_CLEAR_SRC_TRAN: Source Transaction Complete -->
        <register>
        	<name>INT_CLEAR_SRC_TRAN</name>
          <description>Source Transaction Complete</description>
          <addressOffset>0x348</addressOffset>
          <size>8</size>
          <access>write-only</access>
        </register>

        <!-- INT_CLEAR_DST_TRAN: Destination Transaction Complete -->
        <register>
        	<name>INT_CLEAR_DST_TRAN</name>
          <description>Destination Transaction Complete</description>
          <addressOffset>0x350</addressOffset>
          <size>8</size>
          <access>write-only</access>
        </register>

        <!-- INT_CLEAR_ERR: Error -->
        <register>
        	<name>INT_CLEAR_ERR</name>
          <description>Error</description>
          <addressOffset>0x358</addressOffset>
          <size>8</size>
          <access>write-only</access>
        </register>

        <!-- DMA_EN: DW_ahb_dmac Configuration Register -->
        <register>
        	<name>DMA_EN</name>
          <description>DW_ahb_dmac Configuration Register</description>
          <addressOffset>0x398</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- EN: enable -->
            <field>
              <name>EN</name>
              <description>enable</description>
              <bitRange>[0:0]</bitRange>
            </field>
          </fields>
        </register>

        <!-- CH_EN: DW_ahb_dmac Channel Enable Register -->
        <register>
        	<name>CH_EN</name>
          <description>DW_ahb_dmac Channel Enable Register</description>
          <addressOffset>0x3a0</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
          	<!-- EN: enable -->
            <field>
              <name>EN</name>
              <description>enable</description>
              <bitRange>[7:0]</bitRange>
            </field>

            <!-- WE: enable write enable -->
            <field>
              <name>WE</name>
              <description>enable write enable</description>
              <bitRange>[15:8]</bitRange>
            </field>
          </fields>
        </register>

        <!-- DMA_COMP_PARAMS_6_HI: Component Parameters for channel 7 -->
        <register>
        	<name>DMA_COMP_PARAMS_6_HI</name>
          <description>Component Parameters for channel 7</description>
          <addressOffset>0x3CC</addressOffset>
          <size>32</size>
          <access>read-only</access>

          <fields>
            <!-- DTW: If this is not hardcoded, then software can program the destination transfer width. -->
            <field>
              <name>DTW</name>
              <description>If this is not hardcoded, then software can program the destination transfer width.</description>
              <bitRange>[2:0]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DTW_HARDCODE_NO</name>
                  <description>NO_HARDCODE</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DTW_HARDCODE_8</name>
                  <description>8 bits</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DTW_HARDCODE_16</name>
                  <description>16 bits</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DTW_HARDCODE_32</name>
                  <description>32 bits</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DTW_HARDCODE_64</name>
                  <description>64 bits</description>
                  <value>4</value>
                </enumeratedValue><enumeratedValue>
                  <name>DTW_HARDCODE_128</name>
                  <description>128 bits</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DTW_HARDCODE_256</name>
                  <description>256 bits</description>
                  <value>6</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- STW: If this is not hardcoded, then software can program the source transfer width. -->
            <field derivedFrom = "DTW">
              <name>STW</name>
              <description>If this is not hardcoded, then software can program the source transfer width.</description>
              <bitRange>[5:3]</bitRange>
            </field>

            <!-- STAT_DST: If destination status load feature is on -->
            <field>
              <name>STAT_DST</name>
              <description>If destination status load feature is on</description>
              <bitRange>[6:6]</bitRange>
            </field>

            <!-- STAT_SRC: If source status load feature is on -->
            <field>
              <name>STAT_SRC</name>
              <description>If source status load feature is on</description>
              <bitRange>[7:7]</bitRange>
            </field>

            <!-- DST_SCA_EN: If destination scatter feature is on -->
            <field>
              <name>DST_SCA_EN</name>
              <description>If destination scatter feature is on</description>
              <bitRange>[8:8]</bitRange>
            </field>

            <!-- SRC_GAT_EN: If source gather feature is on -->
            <field>
              <name>SRC_GAT_EN</name>
              <description>If source gather feature is on</description>
              <bitRange>[9:9]</bitRange>
            </field>

            <!-- LOCK_EN: If channel lock feature is on -->
            <field>
              <name>LOCK_EN</name>
              <description>If channel lock feature is on</description>
              <bitRange>[10:10]</bitRange>
            </field>

            <!-- MULTI_BLK_EN: If multi blocks transfer feature is on -->
            <field>
              <name>MULTI_BLK_EN</name>
              <description>If multi blocks transfer feature is on</description>
              <bitRange>[11:11]</bitRange>
            </field>

            <!-- CTL_WB_EN: If write back initial values to relative registers feature is on -->
            <field>
              <name>CTL_WB_EN</name>
              <description>If write back initial values to relative registers feature is on</description>
              <bitRange>[12:12]</bitRange>
            </field>

            <!-- HC_LLP: If disable LLP feature is on -->
            <field>
              <name>HC_LLP</name>
              <description>If disable LLP feature is on</description>
              <bitRange>[13:13]</bitRange>
            </field>

            <!-- MAX_MULT_SIZE: Maximum value of burst transaction size (SRC_MSIZE and DEST_MSIZE). -->
            <field>
              <name>MAX_MULT_SIZE</name>
              <description>Maximum value of burst transaction size (SRC_MSIZE and DEST_MSIZE).</description>
              <bitRange>[18:16]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MAX_MULT_SIZE_4</name>
                  <description>4</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MAX_MULT_SIZE_8</name>
                  <description>8</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MAX_MULT_SIZE_16</name>
                  <description>16</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MAX_MULT_SIZE_32</name>
                  <description>32</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MAX_MULT_SIZE_64</name>
                  <description>64</description>
                  <value>4</value>
                </enumeratedValue><enumeratedValue>
                  <name>MAX_MULT_SIZE_128</name>
                  <description>128</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MAX_MULT_SIZE_256</name>
                  <description>256</description>
                  <value>6</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- DMS: Destination AHB dma interface -->
            <field>
              <name>DMS</name>
              <description>Destination AHB dma interface</description>
              <bitRange>[21:19]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>AHB_MASTER_1</name>
                  <description>AHB master 1</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>AHB_MASTER_2</name>
                  <description>AHB master 2</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>AHB_MASTER_3</name>
                  <description>AHB master 3</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>AHB_MASTER_4</name>
                  <description>AHB master 4</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>AHB_MASTER_NO_HARDCODE</name>
                  <description>NO_HARDCODE</description>
                  <value>4</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- LMS: Linked list AHB dma interface -->
            <field derivedFrom = "DMS">
              <name>LMS</name>
              <description>Linked list AHB dma interface</description>
              <bitRange>[24:22]</bitRange>
            </field>

            <!-- SMS: source AHB dma interface -->
            <field derivedFrom = "DMS">
              <name>SMS</name>
              <description>source AHB dma interface</description>
              <bitRange>[27:25]</bitRange>
            </field>

            <!-- FIFO_DEPTH: FIFO depth in bytes -->
            <field>
              <name>FIFO_DEPTH</name>
              <description>FIFO depth in bytes</description>
              <bitRange>[30:28]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>FIFO_DEPTH_8</name>
                  <description>8 bytes</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_DEPTH_16</name>
                  <description>16 bytes</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_DEPTH_32</name>
                  <description>32 bytes</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_DEPTH_64</name>
                  <description>64 bytes</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FIFO_DEPTH_128</name>
                  <description>128 bytes</description>
                  <value>4</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>

        <!-- DMA_COMP_PARAMS_5_LOW: Component Parameters for channel 6 -->
        <register derivedFrom = "DMA_COMP_PARAMS_6_HI">
        	<name>DMA_COMP_PARAMS_5_LOW</name>
          <description>Component Parameters for channel 6</description>
          <addressOffset>0x3D0</addressOffset>
          <size>32</size>
          <access>read-only</access>
        </register>

        <!-- DMA_COMP_PARAMS_5_HI: Component Parameters for channel 5 -->
        <register derivedFrom = "DMA_COMP_PARAMS_6_HI">
        	<name>DMA_COMP_PARAMS_5_HI</name>
          <description>Component Parameters for channel 5</description>
          <addressOffset>0x3D4</addressOffset>
          <size>32</size>
          <access>read-only</access>
        </register>

        <!-- DMA_COMP_PARAMS_4_LOW: Component Parameters for channel 4 -->
        <register derivedFrom = "DMA_COMP_PARAMS_6_HI">
        	<name>DMA_COMP_PARAMS_4_LOW</name>
          <description>Component Parameters for channel 4</description>
          <addressOffset>0x3D8</addressOffset>
          <size>32</size>
          <access>read-only</access>
        </register>

        <!-- DMA_COMP_PARAMS_4_HI: Component Parameters for channel 3 -->
        <register derivedFrom = "DMA_COMP_PARAMS_6_HI">
        	<name>DMA_COMP_PARAMS_4_HI</name>
          <description>Component Parameters for channel 3</description>
          <addressOffset>0x3DC</addressOffset>
          <size>32</size>
          <access>read-only</access>
        </register>

        <!-- DMA_COMP_PARAMS_3_LOW: Component Parameters for channel 2 -->
        <register derivedFrom = "DMA_COMP_PARAMS_6_HI">
        	<name>DMA_COMP_PARAMS_3_LOW</name>
          <description>Component Parameters for channel 2</description>
          <addressOffset>0x3E0</addressOffset>
          <size>32</size>
          <access>read-only</access>
        </register>

        <!-- DMA_COMP_PARAMS_3_HI: Component Parameters for channel 1 -->
        <register derivedFrom = "DMA_COMP_PARAMS_6_HI">
        	<name>DMA_COMP_PARAMS_3_HI</name>
          <description>Component Parameters for channel 1</description>
          <addressOffset>0x3E4</addressOffset>
          <size>32</size>
          <access>read-only</access>
        </register>

        <!-- DMA_COMP_PARAMS_2_LOW: Component Parameters for channel 0 -->
        <register derivedFrom = "DMA_COMP_PARAMS_6_HI">
        	<name>DMA_COMP_PARAMS_2_LOW</name>
          <description>Component Parameters for channel 0</description>
          <addressOffset>0x3E8</addressOffset>
          <size>32</size>
          <access>read-only</access>
        </register>

        <!-- DMA_COMP_PARAMS_1_LOW: Maximum block size for channel -->
        <register>
        	<name>DMA_COMP_PARAMS_1_LOW</name>
          <description>Maximum block size for channel</description>
          <addressOffset>0x3F0</addressOffset>
          <size>32</size>
          <access>read-only</access>

          <fields>
            <!-- CH0_MAX_BLK_SIZE: Maximum block size for channel 0. -->
            <field>
              <name>CH0_MAX_BLK_SIZE</name>
              <description>Maximum block size for channel 0.</description>
              <bitRange>[3:0]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MAX_BLK_SIZE_3</name>
                  <description>3</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MAX_BLK_SIZE_7</name>
                  <description>7</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MAX_BLK_SIZE_15</name>
                  <description>15</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MAX_BLK_SIZE_31</name>
                  <description>31</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MAX_BLK_SIZE_63</name>
                  <description>63</description>
                  <value>4</value>
                </enumeratedValue><enumeratedValue>
                  <name>MAX_BLK_SIZE_127</name>
                  <description>127</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MAX_BLK_SIZE_255</name>
                  <description>255</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MAX_BLK_SIZE_511</name>
                  <description>511</description>
                  <value>7</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MAX_BLK_SIZE_1023</name>
                  <description>1023</description>
                  <value>8</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MAX_BLK_SIZE_2047</name>
                  <description>2047</description>
                  <value>9</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MAX_BLK_SIZE_4095</name>
                  <description>4095</description>
                  <value>10</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- CH1_MAX_BLK_SIZE: Maximum block size for channel 1. -->
            <field derivedFrom = "CH0_MAX_BLK_SIZE">
              <name>CH1_MAX_BLK_SIZE</name>
              <description>Maximum block size for channel 1</description>
              <bitRange>[7:4]</bitRange>
            </field>

            <!-- CH2_MAX_BLK_SIZE: Maximum block size for channel 2. -->
            <field derivedFrom = "CH0_MAX_BLK_SIZE">
              <name>CH2_MAX_BLK_SIZE</name>
              <description>Maximum block size for channel 2</description>
              <bitRange>[11:8]</bitRange>
            </field>

            <!-- CH3_MAX_BLK_SIZE: Maximum block size for channel 3. -->
            <field derivedFrom = "CH0_MAX_BLK_SIZE">
              <name>CH3_MAX_BLK_SIZE</name>
              <description>Maximum block size for channel 3</description>
              <bitRange>[15:12]</bitRange>
            </field>

            <!-- CH4_MAX_BLK_SIZE: Maximum block size for channel 4. -->
            <field derivedFrom = "CH0_MAX_BLK_SIZE">
              <name>CH4_MAX_BLK_SIZE</name>
              <description>Maximum block size for channel 4</description>
              <bitRange>[19:16]</bitRange>
            </field>

            <!-- CH5_MAX_BLK_SIZE: Maximum block size for channel 5. -->
            <field derivedFrom = "CH0_MAX_BLK_SIZE">
              <name>CH5_MAX_BLK_SIZE</name>
              <description>Maximum block size for channel 5</description>
              <bitRange>[23:20]</bitRange>
            </field>

            <!-- CH6_MAX_BLK_SIZE: Maximum block size for channel 6. -->
            <field derivedFrom = "CH0_MAX_BLK_SIZE">
              <name>CH6_MAX_BLK_SIZE</name>
              <description>Maximum block size for channel 6</description>
              <bitRange>[27:24]</bitRange>
            </field>

            <!-- CH7_MAX_BLK_SIZE: Maximum block size for channel 7. -->
            <field derivedFrom = "CH0_MAX_BLK_SIZE">
              <name>CH7_MAX_BLK_SIZE</name>
              <description>Maximum block size for channel 7</description>
              <bitRange>[31:28]</bitRange>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>

    <!-- ETH -->
    <peripheral>
      <name>ETH</name>
      <version>1.0</version>
      <description>ETH</description>
      <groupName>ETH</groupName>
      <baseAddress>0x41200000</baseAddress>
      <size>32</size>
      <access>read-write</access>

      <addressBlock>
        <offset>0</offset>
        <size>0x1278</size>
        <usage>registers</usage>
      </addressBlock>

      <interrupt>
        <name>ETH_INT</name>
        <value>0</value>
      </interrupt>

      <interrupt>
        <name>ETH_PMT_INT</name>
        <value>34</value>
      </interrupt>

      <registers>
        <!-- CONFIG: MAC Configuration Register -->
        <register>
        	<name>CONFIG</name>
          <description>MAC Configuration Register</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- PRELEN: Preamble Length for Transmit frames -->
            <field>
              <name>PRELEN</name>
              <description>Preamble Length for Transmit frames</description>
              <bitRange>[1:0]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PRE_LEN_7_BYTE</name>
                  <description>7 bytes of preamble</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PRE_LEN_5_BYTE</name>
                  <description>5 bytes of preamble</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PRE_LEN_3_BYTE</name>
                  <description>3 bytes of preamble</description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- RX_EN: Receiver Enable -->
            <field>
              <name>RX_EN</name>
              <description>Receiver Enable</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- TX_EN: Transmitter Enable -->
            <field>
              <name>TX_EN</name>
              <description>Transmitter Enable</description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- DC_EN: Deferral Check Enable -->
            <field>
              <name>DC_EN</name>
              <description>Deferral Check Enable</description>
              <bitRange>[4:4]</bitRange>
            </field>

            <!-- ACS: Automatic Pad or CRC Stripping -->
            <field>
              <name>ACS</name>
              <description>Automatic Pad or CRC Stripping</description>
              <bitRange>[7:7]</bitRange>
            </field>

            <!-- LUD: Link Up or Down -->
            <field>
              <name>LUD</name>
              <description>Link Up or Down</description>
              <bitRange>[8:8]</bitRange>
            </field>

            <!-- IPC: Checksum Offload -->
            <field>
              <name>IPC</name>
              <description>Checksum Offload</description>
              <bitRange>[10:10]</bitRange>
            </field>

            <!-- DM: Duplex Mode -->
            <field>
              <name>DM</name>
              <description>Duplex Mode</description>
              <bitRange>[11:11]</bitRange>
            </field>

            <!-- LM: Loopback Mode -->
            <field>
              <name>LM</name>
              <description>Loopback Mode</description>
              <bitRange>[12:12]</bitRange>
            </field>

            <!-- FES: Speed -->
            <field>
              <name>FES</name>
              <description>Speed in XMII interface</description>
              <bitRange>[14:14]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SPEED_10M_BPS</name>
                  <description>10 Mbps</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPEED_100M_BPS</name>
                  <description>100 Mbps</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- PS: Port Select -->
            <field>
              <name>PS</name>
              <description>the Ethernet line speed</description>
              <bitRange>[15:15]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>LINE_SPEED_1000M_BPS</name>
                  <description>For 1000 Mbps operations</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LINE_SPEED_100M_BPS</name>
                  <description>For 10 or 100 Mbps operations</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- JE: Jumbo enable -->
            <field>
              <name>JE</name>
              <description>Jumbo enable</description>
              <bitRange>[20:20]</bitRange>
            </field>

            <!-- JD: Jabber Disable -->
            <field>
              <name>JD</name>
              <description>if 0, the MAC cuts off the transmitter if more than 2,048 bytes of data (10,240 if JE is set high)</description>
              <bitRange>[22:22]</bitRange>
            </field>

            <!-- WD: Watchdog Disable -->
            <field>
              <name>WD</name>
              <description>Watchdog Disable</description>
              <bitRange>[23:23]</bitRange>
            </field>

            <!-- TC: Transmit Configuration for PHY -->
            <field>
              <name>TC</name>
              <description>If 1, this bit enables the transmission of duplex mode, link speed, and link up or down information to the PHY</description>
              <bitRange>[24:24]</bitRange>
            </field>

            <!-- CST: CRC Stripping for Type Frames -->
            <field>
              <name>CST</name>
              <description>CRC Stripping for Type Frames</description>
              <bitRange>[25:25]</bitRange>
            </field>

            <!-- TWOKPE: IEEE 802.3as Support for 2K Packets -->
            <field>
              <name>TWOKPE</name>
              <description>If 0, 1518 bytes is considered as a giant frame, 1 is 2000 bytes.</description>
              <bitRange>[27:27]</bitRange>
            </field>

            <!-- SARC: Source Address Insertion or Replacement Control -->
            <field>
              <name>SARC</name>
              <description>Source Address Insertion or Replacement Control</description>
              <bitRange>[30:28]</bitRange>
            </field>
          </fields>
        </register>

        <!-- FF: MAC Frame Filter -->
        <register>
        	<name>FF</name>
          <description>MAC Frame Filter</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
          	<!-- PR: Promiscuous Mode -->
            <field>
              <name>PR</name>
              <description>Receive all frames in spite of source and destination address</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- HUC: Hash unicast -->
            <field>
              <name>HUC</name>
              <description>if 1, don't compare DA field in destination address filtering of unicast frames with DA register</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- HMC: Hash multicast -->
            <field>
              <name>HMC</name>
              <description>if 1, don't compare DA field in destination address filtering of multicast frames with DA register</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- DAIF: DA Inverse Filtering -->
            <field>
              <name>DAIF</name>
              <description>if set, the Address Check block operates in inverse filtering mode for the DA address comparison</description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- PM: Pass All Multicast -->
            <field>
              <name>PM</name>
              <description>Pass All Multicast</description>
              <bitRange>[4:4]</bitRange>
            </field>

            <!-- DBF: Disable Broadcast Frames -->
            <field>
              <name>DBF</name>
              <description>Disable Broadcast Frames</description>
              <bitRange>[5:5]</bitRange>
            </field>

            <!-- PCF: Pass Control Frames -->
            <field>
              <name>PCF</name>
              <description>Pass Control Frames</description>
              <bitRange>[7:6]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PC_FILTER_ALL_CONTROL_FRAME</name>
                  <description>MAC filters all control frames</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PC_FORWARD_CONTROL_WITHOUT_PAUSE_FRAME</name>
                  <description>MAC forwards all control frames except Pause frames whatever Address filter</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PC_FORWARD_CONTROL_AND_PAUSE_FRAME</name>
                  <description>MAC forwards all control frames whatever Address filter</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PC_FORWARD_PASSED_CONTROL_FRAME</name>
                  <description>MAC forwards all control frames that passed Address filter</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- SAIF: SA Inverse Filtering -->
            <field>
              <name>SAIF</name>
              <description>If set, the frames whose SA matches the SA registers are marked as failing the SA Address filter</description>
              <bitRange>[8:8]</bitRange>
            </field>

            <!-- SAF: Source Address Filter Enable -->
            <field>
              <name>SAF</name>
              <description>Source Address Filter Enable</description>
              <bitRange>[9:9]</bitRange>
            </field>

            <!-- HPF: Hash or Perfect Filter -->
            <field>
              <name>HPF</name>
              <description>Hash or Perfect Filter</description>
              <bitRange>[10:10]</bitRange>
            </field>

            <!-- VTFE: VLAN Tag Filter Enable -->
            <field>
              <name>VTFE</name>
              <description>VLAN Tag Filter Enable</description>
              <bitRange>[16:16]</bitRange>
            </field>

            <!-- IPFE: Layer 3 and Layer 4 Filter Enable -->
            <field>
              <name>IPFE</name>
              <description>Layer 3 and Layer 4 Filter Enable</description>
              <bitRange>[20:20]</bitRange>
            </field>

            <!-- DNTU: Drop non-TCP/UDP over IP Frames -->
            <field>
              <name>DNTU</name>
              <description>Drop non-TCP/UDP over IP Frames</description>
              <bitRange>[21:21]</bitRange>
            </field>

            <!-- RA: Receive all -->
            <field>
              <name>RA</name>
              <description>Receive all</description>
              <bitRange>[31:31]</bitRange>
            </field>
          </fields>
        </register>

        <!-- HTH: Hash Table High Register -->
        <register>
        	<name>HTH</name>
          <description>Hash Table High Register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>

        <!-- HTL: Hash Table Low Register -->
        <register>
        	<name>HTL</name>
          <description>Hash Table Low Register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>

        <!-- GMII_ADDR: GMII Address Register -->
        <register>
        	<name>GMII_ADDR</name>
          <description>GMII Address Register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- BUSY: GMII Busy -->
            <field>
              <name>BUSY</name>
              <description>GMII Busy</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- GW: GMII write or read -->
            <field>
              <name>GW</name>
              <description>GMII write or read</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- CR: CSR Clock Range -->
            <field>
              <name>CR</name>
              <description>CSR Clock Range</description>
              <bitRange>[5:2]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>CSR_CLOCK_60_TO_100M_MDC_DIVIDER_42</name>
                  <description>The CSR clock frequency is 60-100 MHz and the MDC clock frequency is CSR clock/42.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSR_CLOCK_100_TO_150M_MDC_DIVIDER_62</name>
                  <description>The CSR clock frequency is 100-150 MHz and the MDC clock frequency is CSR clock/62.</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSR_CLOCK_20_TO_35M_MDC_DIVIDER_16</name>
                  <description>The CSR clock frequency is 20-35 MHz and the MDC clock frequency is CSR clock/16.</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSR_CLOCK_35_TO_60M_MDC_DIVIDER_26</name>
                  <description>The CSR clock frequency is 35-60 MHz and the MDC clock frequency is CSR clock/26.</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSR_CLOCK_150_TO_250M_MDC_DIVIDER_102</name>
                  <description>The CSR clock frequency is 150-250 MHz and the MDC clock frequency is CSR clock/102.</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSR_CLOCK_250_TO_300M_MDC_DIVIDER_124</name>
                  <description>The CSR clock frequency is 250-300 MHz and the MDC clock frequency is CSR clock/124.</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSR_CLOCK_EXTERNAL_MDC_DIVIDER_4</name>
                  <description>The CSR clock frequency is external and the MDC clock frequency is CSR clock/4.</description>
                  <value>8</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSR_CLOCK_EXTERNAL_MDC_DIVIDER_6</name>
                  <description>The CSR clock frequency is external and the MDC clock frequency is CSR clock/6.</description>
                  <value>9</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSR_CLOCK_EXTERNAL_MDC_DIVIDER_8</name>
                  <description>The CSR clock frequency is external and the MDC clock frequency is CSR clock/8.</description>
                  <value>10</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSR_CLOCK_EXTERNAL_MDC_DIVIDER_10</name>
                  <description>The CSR clock frequency is external and the MDC clock frequency is CSR clock/10.</description>
                  <value>11</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSR_CLOCK_EXTERNAL_MDC_DIVIDER_12</name>
                  <description>The CSR clock frequency is external and the MDC clock frequency is CSR clock/12.</description>
                  <value>12</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSR_CLOCK_EXTERNAL_MDC_DIVIDER_14</name>
                  <description>The CSR clock frequency is external and the MDC clock frequency is CSR clock/14.</description>
                  <value>13</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSR_CLOCK_EXTERNAL_MDC_DIVIDER_16</name>
                  <description>The CSR clock frequency is external and the MDC clock frequency is CSR clock/16.</description>
                  <value>14</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSR_CLOCK_EXTERNAL_MDC_DIVIDER_18</name>
                  <description>The CSR clock frequency is external and the MDC clock frequency is CSR clock/18.</description>
                  <value>15</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- GR: GMII Register -->
            <field>
              <name>GR</name>
              <description>These bits select the desired GMII register in the selected PHY device</description>
              <bitRange>[10:6]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>INC_INCREMENT</name>
                  <description>Increment</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>INC_DECREMENT</name>
                  <description>Decrement</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>INC_NO_CHANGE</name>
                  <description>No change</description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- PA: Physical Layer Address -->
            <field>
              <name>PA</name>
              <description>This field indicates which of the 32 possible PHY devices are being accessed</description>
              <bitRange>[15:11]</bitRange>
            </field>
          </fields>
        </register>

        <!-- GMII_DATA: GMII Data Register -->
        <register>
        	<name>GMII_DATA</name>
          <description>GMII Data Register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>

        <!-- FC: Flow Control Register -->
        <register>
        	<name>FC</name>
          <description>Flow Control Register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- FCB: Flow Control Busy -->
            <field>
              <name>FCB</name>
              <description>This bit initiates a Pause frame in the full-duplex mode</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- TFE: Transmit Flow Control Enable -->
            <field>
              <name>TFE</name>
              <description>MAC enables the flow control operation to transmit Pause frames</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- RFE: Receive Flow Control Enable -->
            <field>
              <name>RFE</name>
              <description>MAC enables the flow control operation to receive Pause frames</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- UP: Unicast Pause Frame Detect -->
            <field>
              <name>UP</name>
              <description>MAC can detect Pause frames with unicast address of the station</description>
              <bitRange>[3:3]</bitRange>
            </field>
          </fields>
        </register>

        <!-- VLAN_TAG: VLAN Tag Register -->
        <register>
        	<name>VLAN_TAG</name>
          <description>VLAN Tag Register</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- VL: VLAN Tag Identifier for Receive Frames -->
            <field>
              <name>VL</name>
              <description>VLAN Tag Identifier for Receive Frames</description>
              <bitRange>[15:0]</bitRange>
            </field>

            <!-- ETV: Enable 12-Bit VLAN Tag Comparison -->
            <field>
              <name>ETV</name>
              <description>Enable 12-Bit VLAN Tag Comparison</description>
              <bitRange>[16:16]</bitRange>
            </field>

            <!-- VTIM: VLAN Tag Inverse Match Enable -->
            <field>
              <name>VTIM</name>
              <description>If set, The frames that do not have matching VLAN Tag are marked as matched</description>
              <bitRange>[17:17]</bitRange>
            </field>

            <!-- ESVL: Enable S-VLAN -->
            <field>
              <name>ESVL</name>
              <description>If set, consider the S-VLAN (Type = 0x88A8) frames as valid VLAN tagged frames</description>
              <bitRange>[18:18]</bitRange>
            </field>

            <!-- VTHM: VLAN Tag Hash Table Match Enable -->
            <field>
              <name>VTHM</name>
              <description>When set, the most significant four bits of the VLAN tag's CRC are used to index the content</description>
              <bitRange>[19:19]</bitRange>
            </field>
          </fields>
        </register>
				 <!-- RWUFFR: Remote Wake-Up Frame Filter Register -->
        <register>
        	<name>RWUFFR</name>
          <description>Remote Wake-Up Frame Filter Register</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>
        <!-- PMTCSR: PMT Control and Status Register -->
        <register>
        	<name>PMTCSR</name>
          <description>PMT Control and Status Register</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          
          <fields>
            <!-- PWRDWN: Power Down -->
            <field>
              <name>PWRDWN</name>
              <description>Power Down</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- MGKPKTEN: Magic Packet Enable -->
            <field>
              <name>MGKPKTEN</name>
              <description>Magic Packet Enable</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- RWKPKTEN: Remote Wake-Up Frame Enable -->
            <field>
              <name>RWKPKTEN</name>
              <description>Remote Wake-Up Frame Enable</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- MGKPRCVD: Magic Packet Received -->
            <field>
              <name>MGKPRCVD</name>
              <description>the power management event is generated because of the reception of a magic packet</description>
              <bitRange>[5:5]</bitRange>
            </field>

            <!-- RWKPRCVD: Remote Wake-Up Frame Received -->
            <field>
              <name>RWKPRCVD</name>
              <description>When set, this bit indicates the power management event is generated because of the reception of a remote wake-up frame</description>
              <bitRange>[6:6]</bitRange>
            </field>
            <!-- GLBLUCAST: Global Unicast -->
            <field>
              <name>GLBLUCAST</name>
              <description>When set, enables any unicast packet filtered by the MAC (DAF)address recognition to be a remote wake-up frame.</description>
              <bitRange>[9:9]</bitRange>
            </field>
            <!-- RWKPTR: Remote Wake-up FIFO Pointer -->
            <field>
              <name>RWKPTR</name>
              <description>Remote Wake-up FIFO Pointer</description>
              <bitRange>[26:24]</bitRange>
            </field>
            <!-- RWKFILTRST: Remote Wake-Up Frame Filter Register Pointer Reset -->
            <field>
              <name>RWKFILTRST</name>
              <description>Remote Wake-Up Frame Filter Register Pointer Reset.</description>
              <bitRange>[31:31]</bitRange>
            </field>
          </fields>
        </register>
         <!-- MAC_ISR: Interrupt Status Register -->
        <register>
        	<name>MACISR</name>
          <description>Interrupt Status Register</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>
        <!-- MAC_IMR: Interrupt Mask Register -->
        <register>
        	<name>MACIMR</name>
          <description>Interrupt Mask Register</description>
          <addressOffset>0x3C</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>
        <!-- ADDR0_HIGH: MAC Address0 High Register -->
        <register>
        	<name>ADDR0_HIGH</name>
          <description>MAC Address0 High Register</description>
          <addressOffset>0x40</addressOffset>
          <size>16</size>
          <access>read-write</access>
        </register>

        <!-- ADDR0_LOW: MAC Address0 LOW Register -->
        <register>
        	<name>ADDR0_LOW</name>
          <description>MAC Address0 LOW Register</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>

        <!-- ADDR1_HIGH: MAC Address1 High Register -->
        <register>
        	<name>ADDR1_HIGH</name>
          <description>MAC Address0 High Register</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <access>read-write</access>
	        <fields>
            <!-- ADDR: MAC Address1 [47:32] -->
            <field>
              <name>ADDR</name>
              <description>MAC Address1 [47:32]</description>
              <bitRange>[15:0]</bitRange>
            </field>

            <!-- SA: Source Address -->
            <field>
              <name>SA</name>
              <description>MAC address1 is source or destination address compared with received frame</description>
              <bitRange>[30:30]</bitRange>
            </field>

            <!-- AE: Address Enable -->
            <field>
              <name>AE</name>
              <description>the address filter module uses the MAC address1 for filtering</description>
              <bitRange>[31:31]</bitRange>
            </field>
          </fields>
        </register>

        <!-- ADDR1_LOW: MAC Address1 LOW Register -->
        <register>
        	<name>ADDR1_LOW</name>
          <description>MAC Address1 LOW Register</description>
          <addressOffset>0x4C</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>
        <!-- MMCCR: MMC Control Register -->
        <register>
        	<name>MMCCR</name>
          <description>MMC Control Register</description>
          <addressOffset>0x100</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- CNTRST: Counters Reset -->
            <field>
              <name>CNTRST</name>
              <description>Counters Reset</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- CNTSTOPRO: Counter Stop Rollover -->
            <field>
              <name>CNTSTOPRO</name>
              <description>Counter Stop Rollover</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- RSTONRD: Reset on Read -->
            <field>
              <name>RSTONRD</name>
              <description>Reset on Read</description>
              <bitRange>[2:2]</bitRange>
            </field>
            <!-- CNTFREEZ: MMC Counter Freeze -->
            <field>
              <name>CNTFREEZ</name>
              <description>MMC Counter Freeze</description>
              <bitRange>[3:3]</bitRange>
            </field>
            <!-- CNTPRST: Counters Preset -->
            <field>
              <name>CNTPRST</name>
              <description>Counters Preset</description>
              <bitRange>[4:4]</bitRange>
            </field>
            <!-- CNTPRSTLVL: Counters Preset -->
            <field>
              <name>CNTPRSTLVL</name>
              <description>Counters Preset</description>
              <bitRange>[5:5]</bitRange>
            </field>
            <!-- UCDBC: Update MMC Counters for Dropped Broadcast Frames -->
            <field>
              <name>UCDBC</name>
              <description>Update MMC Counters for Dropped Broadcast Frames</description>
              <bitRange>[8:8]</bitRange>
            </field>
          </fields>
        </register>
				<!-- MMCRIR: MMC Receive Interrupt -->
        <register>
        	<name>MMCRIR</name>
          <description>MMC Receive Interrupt Register</description>
          <addressOffset>0x104</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>
        <!-- MMCTIR: MMC Transmit Interrupt -->
        <register>
        	<name>MMCTIR</name>
          <description>MMC Transmit Interrupt Register</description>
          <addressOffset>0x108</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>
        <!-- MIMR:MMC_INTR_MASK_RX-->
        <register>
        	<name>MMCRIMR</name>
          <description>MMC Receive interrupt mask</description>
          <addressOffset>0x10C</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>
  
	      <!-- MIMT:MMC_INTR_MASK_TX-->
        <register>
        	<name>MMCTIMR</name>
          <description>MMC Transmit Interrupt Mask</description>
          <addressOffset>0x110</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>
        <!-- MIRCOIM:MMC_CHECKSUM_OFFLOAD_INTR_MASK_TX-->
        <register>
        	<name>MMCIRCOIM</name>
          <description>MMC IPC Receive Checksum Offload Interrupt Mask</description>
          <addressOffset>0x200</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>
        <!-- PTPTSCR:Timestamp Control Register-->
        <register>
        	<name>PTPTSCR</name>
          <description>Timestamp Control Register</description>
          <addressOffset>0x700</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- TSENA: Timestamp Enable -->
            <field>
              <name>TSENA</name>
              <description>Timestamp Enable</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- TSCFUPDT: Timestamp Fine or Coarse Update -->
            <field>
              <name>TSCFUPDT</name>
              <description>Timestamp Fine or Coarse Update</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- TSINIT: Timestamp Initialize -->
            <field>
              <name>TSINIT</name>
              <description>Timestamp Initialize</description>
              <bitRange>[2:2]</bitRange>
            </field>
            <!-- TSUPDT: Timestamp Update -->
            <field>
              <name>TSUPDT</name>
              <description>Timestamp Update</description>
              <bitRange>[3:3]</bitRange>
            </field>
            <!-- TSTRIG: Timestamp Interrupt Trigger Enable -->
            <field>
              <name>TSTRIG</name>
              <description>Timestamp Interrupt Trigger Enable</description>
              <bitRange>[4:4]</bitRange>
            </field>
            <!-- TSADDREG: Addend Reg Update -->
            <field>
              <name>TSADDREG</name>
              <description>Addend Reg Update</description>
              <bitRange>[5:5]</bitRange>
            </field>
            
          </fields>
        </register>
        <!-- PTPSSIR:Sub-Second Increment Register-->
        <register>
        	<name>PTPSSIR</name>
          <description>Sub-Second Increment Register</description>
          <addressOffset>0x704</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>
        <!-- PTPTSHR:System Time – Seconds Register -->
        <register>
        	<name>PTPTSHR</name>
          <description>System Time – Seconds Register</description>
          <addressOffset>0x708</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>
        <!-- PTPTSLR:System Time – Nanoseconds Register -->
        <register>
        	<name>PTPTSLR</name>
          <description>System Time – Nanoseconds Register</description>
          <addressOffset>0x70C</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>
        <!-- PTPTSHUR:System Time – Seconds Update Register -->
        <register>
        	<name>PTPTSHUR</name>
          <description>System Time – Seconds Update Register</description>
          <addressOffset>0x710</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>
        <!-- PTPTSLUR:System Time – Nanoseconds Update Register -->
        <register>
        	<name>PTPTSLUR</name>
          <description>System Time – Nanoseconds Update Register</description>
          <addressOffset>0x714</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>
        <!-- PTPTSAR:Timestamp Addend Register -->
        <register>
        	<name>PTPTSAR</name>
          <description>Timestamp Addend Register</description>
          <addressOffset>0x718</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>
        <!-- PTPTTHR:Target Time Seconds Register -->
        <register>
        	<name>PTPTTHR</name>
          <description>Target Time Seconds Register</description>
          <addressOffset>0x71C</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>
        <!-- PTPTTLR:Target Time Nanoseconds Register -->
        <register>
        	<name>PTPTTLR</name>
          <description>Target Time Nanoseconds Register </description>
          <addressOffset>0x720</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>
        <!-- BUS_MODE: Flow Control Register -->
        <register>
        	<name>BUS_MODE</name>
          <description>Flow Control Register</description>
          <addressOffset>0x1000</addressOffset>
          <size>32</size>
          <access>read-write</access>

	         <fields>
            <!-- SWR: Software Reset -->
            <field>
              <name>SWR</name>
              <description>Software Reset</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- DA: DMA Arbitration Scheme -->
            <field>
              <name>DA</name>
              <description>This bit specifies the arbitration scheme between the transmit and receive paths of Channel</description>
              <bitRange>[1:1]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DMA_ARBITRATION_ROUND_ROBIN</name>
                  <description>Weighted round-robin with Rx:Tx or Tx:Rx</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DMA_ARBITRATION_FIXED_PRIORITY</name>
                  <description>Fixed priority</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- DSL: Descriptor Skip Length -->
            <field>
              <name>DSL</name>
              <description>the byte number of bus width to skip between two unchained descriptors</description>
              <bitRange>[6:2]</bitRange>
            </field>

            <!-- ATDS: Alternate Descriptor Size -->
            <field>
              <name>ATDS</name>
              <description>When set, the size of the alternate descriptor increases to 32 bytes</description>
              <bitRange>[7:7]</bitRange>
            </field>

            <!-- PBL: Programmable Burst Length -->
            <field>
              <name>PBL</name>
              <description>These bits indicate the maximum number of beats to be transferred in one DMA transaction</description>
              <bitRange>[13:8]</bitRange>
            </field>

            <!-- PR: Priority Ratio -->
            <field>
              <name>PR</name>
              <description>The Priority Ratio is (PR + 1) : 1</description>
              <bitRange>[15:14]</bitRange>
            </field>

            <!-- FB: Fixed Burst -->
            <field>
              <name>FB</name>
              <description>performs fixed burst transfers or not</description>
              <bitRange>[16:16]</bitRange>
            </field>

            <!-- RPBL: Rx DMA PBL -->
            <field>
              <name>RPBL</name>
              <description>This field indicates the maximum number of beats to be transferred in one Rx DMA transaction</description>
              <bitRange>[22:17]</bitRange>
            </field>

            <!-- USP: Use Separate PBL -->
            <field>
              <name>USP</name>
              <description>If set, RPBL is same as RPBL definition</description>
              <bitRange>[23:23]</bitRange>
            </field>

            <!-- PBLx8: PBLx8 Mode -->
            <field>
              <name>PBLx8</name>
              <description>If set, all PBLs multiplies 8</description>
              <bitRange>[24:24]</bitRange>
            </field>

            <!-- AAL: Address-Aligned Beats -->
            <field>
              <name>AAL</name>
              <description>If set, all bursts aligned to the start address LS bits</description>
              <bitRange>[25:25]</bitRange>
            </field>

            <!-- MB: Mixed Burst -->
            <field>
              <name>MB</name>
              <description>When this bit is set high and the FB bit is low, the AHB master interface starts all bursts of length more than 16 with INCR</description>
              <bitRange>[26:26]</bitRange>
            </field>

            <!-- TXPR: Transmit Priority -->
            <field>
              <name>TXPR</name>
              <description>When set, the transmit DMA has higher priority than the receive DMA</description>
              <bitRange>[27:27]</bitRange>
            </field>

            <!-- PRWG: Channel Priority Weights -->
            <field>
              <name>PRWG</name>
              <description>The Priority weight is (PRWG + 1) : 1</description>
              <bitRange>[29:28]</bitRange>
            </field>

            <!-- RIB: Rebuild INCRx Burst -->
            <field>
              <name>RIB</name>
              <description>If set, rebuilds the pending beats of any burst transfer initiated with INCRx</description>
              <bitRange>[31:31]</bitRange>
            </field>
          </fields>
        </register>
	
        
        <!-- TPD: Transmit Poll Demand Register -->
        <register>
        	<name>TPD</name>
          <description>Transmit Poll Demand</description>
          <addressOffset>0x1004</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>

        <!-- RPD: Receive Poll Demand Register -->
        <register>
        	<name>RPD</name>
          <description>Receive Poll Demand</description>
          <addressOffset>0x1008</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>

        <!-- RDESLA: Receive Descriptor List Address Register -->
        <register>
        	<name>RDESLA</name>
          <description>Receive Descriptor List Address</description>
          <addressOffset>0x100C</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>

        <!-- TDESLA: Transmit Descriptor List Address Register -->
        <register>
        	<name>TDESLA</name>
          <description>Transmit Descriptor List Address</description>
          <addressOffset>0x1010</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>

        <!-- STATUS: Status Register -->
        <register>
        	<name>STATUS</name>
          <description>Status Register</description>
          <addressOffset>0x1014</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- TI: Transmit Interrupt -->
            <field>
              <name>TI</name>
              <description>This bit indicates that the frame transmission is complete</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- TPS: Transmit Process Stopped -->
            <field>
              <name>TPS</name>
              <description>Transmit Process Stopped</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- TU: Transmit Buffer Unavailable -->
            <field>
              <name>TU</name>
              <description>the host owns the Next Descriptor in the Transmit List and the DMA cannot acquire it.</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- TJT: Transmit Jabber Timeout -->
            <field>
              <name>TJT</name>
              <description>Transmit Jabber Timeout</description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- OVF: Receive Overflow -->
            <field>
              <name>OVF</name>
              <description>Receive Overflow</description>
              <bitRange>[4:4]</bitRange>
            </field>

            <!-- UNF: Transmit Underflow -->
            <field>
              <name>UNF</name>
              <description>Transmit Underflow</description>
              <bitRange>[5:5]</bitRange>
            </field>

            <!-- RI: Receive Interrupt -->
            <field>
              <name>RI</name>
              <description>the frame reception is complete</description>
              <bitRange>[6:6]</bitRange>
            </field>

            <!-- RU: Receive Buffer Unavailable -->
            <field>
              <name>RU</name>
              <description>Receive Buffer Unavailable</description>
              <bitRange>[7:7]</bitRange>
            </field>

            <!-- RPS: Receive Process Stopped -->
            <field>
              <name>RPS</name>
              <description>Receive Process Stopped</description>
              <bitRange>[8:8]</bitRange>
            </field>

            <!-- RWT: Receive Watchdog Timeout -->
            <field>
              <name>RWT</name>
              <description>Receive Watchdog Timeout</description>
              <bitRange>[9:9]</bitRange>
            </field>

            <!-- ETI: Early Transmit Interrupt -->
            <field>
              <name>ETI</name>
              <description>the frame to be transmitted is fully transferred to the MTL Transmit FIFO</description>
              <bitRange>[10:10]</bitRange>
            </field>

            <!-- FBI: Fatal Bus Error Interrupt -->
            <field>
              <name>FBI</name>
              <description>a bus error occurred, as described in EB.</description>
              <bitRange>[13:13]</bitRange>
            </field>

            <!-- ERI: Early Receive Interrupt -->
            <field>
              <name>ERI</name>
              <description>the DMA filled the first data buffer of the packet</description>
              <bitRange>[14:14]</bitRange>
            </field>

            <!-- AIS: Abnormal Interrupt Summary -->
            <field>
              <name>AIS</name>
              <description>Abnormal Interrupt Summary, must be cleared by writting</description>
              <bitRange>[15:15]</bitRange>
            </field>

            <!-- NIS: Normal Interrupt Summary -->
            <field>
              <name>NIS</name>
              <description>Normal Interrupt Summary, must be cleared by writting</description>
              <bitRange>[16:16]</bitRange>
            </field>

            <!-- RS: Receive Process State -->
            <field>
              <name>RS</name>
              <description>Receive DMA FSM state</description>
              <bitRange>[19:17]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DMA_RECEIVE_SM_STOP</name>
                  <description>Stopped: Reset or Stop Receive Command issued</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DMA_RECEIVE_SM_RUN_FETCH</name>
                  <description>Running: Fetching Receive Transfer Descriptor</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DMA_RECEIVE_SM_RUN_WAIT</name>
                  <description>Running: Waiting for receive packet</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DMA_RECEIVE_SM_SUSPEND</name>
                  <description>Suspended: Receive Descriptor Unavailable</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DMA_RECEIVE_SM_RUN_CLOSE</name>
                  <description>Running: Closing Receive Descriptor</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DMA_RECEIVE_SM_TS_WRITE</name>
                  <description>TIME_STAMP write state</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DMA_RECEIVE_SM_RUN_TRANSFER</name>
                  <description>Running: Transferring the receive packet data from receive buffer to host memory</description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- TS: Transmit Process State -->
            <field>
              <name>TS</name>
              <description>Transmit DMA FSM state</description>
              <bitRange>[22:20]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DMA_TRANSMIT_SM_STOP</name>
                  <description>Stopped; Reset or Stop Transmit Command issued</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DMA_TRANSMIT_SM_RUN_FETCH</name>
                  <description>Running: Fetching Transmit Transfer Descriptor</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DMA_TRANSMIT_SM_RUN_WAIT</name>
                  <description>Running: Waiting for status</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DMA_TRANSMIT_SM_RUN_READ</name>
                  <description>Running: Reading Data from host memory buffer and queuing it to transmit buffer (Tx FIFO)</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DMA_TRANSMIT_SM_TS_WRITE</name>
                  <description>TIME_STAMP write state</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DMA_TRANSMIT_SM_SUSPEND</name>
                  <description>Suspended; Transmit Descriptor Unavailable or Transmit Buffer Underflow</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DMA_TRANSMIT_SM_RUN_CLOSE</name>
                  <description>Running; Closing Transmit Descriptor</description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- EB: Error bit -->
            <field>
              <name>EB</name>
              <description>Error bit</description>
              <bitRange>[25:23]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DMA_ERR_RX_WRITE_DATA_TRANSFER</name>
                  <description>Error during Rx DMA Write Data Transfer</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DMA_ERR_TX_READ_DATA_TRANSFER</name>
                  <description>Error during Tx DMA Read Data Transfer</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DMA_ERR_RX_WRITE_DESCRIPTOR</name>
                  <description>Error during Rx DMA Descriptor Write Access</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DMA_ERR_TX_WRITE_DESCRIPTOR</name>
                  <description>Error during Tx DMA Descriptor Write Access</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DMA_ERR_RX_READ_DESCRIPTOR</name>
                  <description>Error during Rx DMA Descriptor Read Access</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DMA_ERR_TX_READ_DESCRIPTOR</name>
                  <description>Error during Tx DMA Descriptor Read Access</description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- GLI: GMAC Line Interface Interrupt -->
            <field>
              <name>GLI</name>
              <description>GMAC Line Interface Interrupt</description>
              <bitRange>[26:26]</bitRange>
              <access>read-only</access>
            </field>

            <!-- GMI: GMAC MMC Interrupt -->
            <field>
              <name>GMI</name>
              <description>GMAC MMC Interrupt</description>
              <bitRange>[27:27]</bitRange>
              <access>read-only</access>
            </field>

            <!-- GPI: GMAC PMT Interrupt -->
            <field>
              <name>GPI</name>
              <description>GMAC PMT Interrupt</description>
              <bitRange>[28:28]</bitRange>
              <access>read-only</access>
            </field>

            <!-- TTI: Timestamp Trigger Interrupt -->
            <field>
              <name>TTI</name>
              <description>Timestamp Trigger Interrupt</description>
              <bitRange>[29:29]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>

        <!-- OPERATION: Operation Mode Register -->
        <register>
        	<name>OPERATION</name>
          <description>Operation Mode Register</description>
          <addressOffset>0x1018</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- SR: Start or Stop Receive -->
            <field>
              <name>SR</name>
              <description>Start or Stop Receive</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- OSF: Operate on Second Frame -->
            <field>
              <name>OSF</name>
              <description>Operate on Second Frame</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- RT: Receive Threshold Control -->
            <field>
              <name>RT</name>
              <description>Receive Threshold Control</description>
              <bitRange>[4:3]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DMA_RECEIVE_TH_64_BYTE</name>
                  <description>64 bytes</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DMA_RECEIVE_TH_32_BYTE</name>
                  <description>32 bytes</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DMA_RECEIVE_TH_96_BYTE</name>
                  <description>96 bytes</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DMA_RECEIVE_TH_128_BYTE</name>
                  <description>128 bytes</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- DGF: Drop Giant Frames -->
            <field>
              <name>DGF</name>
              <description>Drop Giant Frames</description>
              <bitRange>[5:5]</bitRange>
            </field>

            <!-- FUF: Forward Undersized Good Frames -->
            <field>
              <name>FUF</name>
              <description>Forward Undersized Good Frames</description>
              <bitRange>[6:6]</bitRange>
            </field>

            <!-- FEF: Forward Error Frames -->
            <field>
              <name>FEF</name>
              <description>Forward Error Frames</description>
              <bitRange>[7:7]</bitRange>
            </field>

            <!-- ST: Start or Stop Transmission Command -->
            <field>
              <name>ST</name>
              <description>Start or Stop Transmission Command</description>
              <bitRange>[13:13]</bitRange>
            </field>

            <!-- TT: Transmit Threshold Control -->
            <field>
              <name>TT</name>
              <description>Transmit Threshold Control</description>
              <bitRange>[16:14]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DMA_TRANSMIT_TH_64_BYTE</name>
                  <description>64 bytes</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DMA_TRANSMIT_TH_128_BYTE</name>
                  <description>128 bytes</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DMA_TRANSMIT_TH_192_BYTE</name>
                  <description>192 bytes</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DMA_TRANSMIT_TH_256_BYTE</name>
                  <description>256 bytes</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DMA_TRANSMIT_TH_40_BYTE</name>
                  <description>40 bytes</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DMA_TRANSMIT_TH_32_BYTE</name>
                  <description>32 bytes</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DMA_TRANSMIT_TH_24_BYTE</name>
                  <description>24 bytes</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DMA_TRANSMIT_TH_16_BYTE</name>
                  <description>16 bytes</description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- FTF: Flush Transmit FIFO -->
            <field>
              <name>FTF</name>
              <description>Flush Transmit FIFO</description>
              <bitRange>[20:20]</bitRange>
            </field>

            <!-- TSF: Transmit Store and Forward -->
            <field>
              <name>TSF</name>
              <description>If set, transmission starts when a full frame resides in Transmit FIFO</description>
              <bitRange>[21:21]</bitRange>
            </field>

						<!-- DFF: Disable Flushing of Received Frames -->
            <field>
              <name>DFF</name>
              <description>Disable Flushing of Received Frames</description>
              <bitRange>[24:24]</bitRange>
            </field>

            <!-- RSF: Receive Store and Forward -->
            <field>
              <name>RSF</name>
              <description>If set, the MTL reads a frame from the Rx FIFO while the complete frame has been written to it,</description>
              <bitRange>[25:25]</bitRange>
            </field>
          </fields>
        </register>

        <!-- INT_EN: Interrupt Enable Register -->
        <register>
        	<name>INT_EN</name>
          <description>Interrupt Enable Register</description>
          <addressOffset>0x101C</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
          	<!-- TIE: Transmit Interrupt Enable -->
            <field>
              <name>TIE</name>
              <description>Transmit Interrupt Enable</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- TSE: Transmit Stopped Enable -->
            <field>
              <name>TSE</name>
              <description>Transmit Stopped Enable</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- TUE: Transmit Buffer Unavailable Enable -->
            <field>
              <name>TUE</name>
              <description>Transmit Buffer Unavailable Enable</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- TJE: Transmit Jabber Timeout Enable -->
            <field>
              <name>TJE</name>
              <description>Transmit Jabber Timeout Enable</description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- OVE: Overflow Interrupt Enable -->
            <field>
              <name>OVE</name>
              <description>Overflow Interrupt Enable</description>
              <bitRange>[4:4]</bitRange>
            </field>

            <!-- UNE: Underflow Interrupt Enable -->
            <field>
              <name>UNE</name>
              <description>Underflow Interrupt Enable</description>
              <bitRange>[5:5]</bitRange>
            </field>

            <!-- RIE: Receive Interrupt Enable -->
            <field>
              <name>RIE</name>
              <description>Receive Interrupt Enable</description>
              <bitRange>[6:6]</bitRange>
            </field>

            <!-- RUE: Receive Buffer Unavailable Enable -->
            <field>
              <name>RUE</name>
              <description>Receive Buffer Unavailable Enable</description>
              <bitRange>[7:7]</bitRange>
            </field>

            <!-- RSE: Receive Stopped Enable -->
            <field>
              <name>RSE</name>
              <description>Receive Stopped Enable</description>
              <bitRange>[8:8]</bitRange>
            </field>

            <!-- RWE: Receive Watchdog Timeout Enable -->
            <field>
              <name>RWE</name>
              <description>Receive Watchdog Timeout Enable</description>
              <bitRange>[9:9]</bitRange>
            </field>

            <!-- ETE: Early Transmit Interrupt Enable -->
            <field>
              <name>ETE</name>
              <description>Early Transmit Interrupt Enable</description>
              <bitRange>[10:10]</bitRange>
            </field>

            <!-- FBE: Fatal Bus Error Enable -->
            <field>
              <name>FBE</name>
              <description>Fatal Bus Error Enable</description>
              <bitRange>[13:13]</bitRange>
            </field>

            <!-- ERE: Early Receive Interrupt Enable -->
            <field>
              <name>ERE</name>
              <description>Early Receive Interrupt Enable</description>
              <bitRange>[14:14]</bitRange>
            </field>

            <!-- AIE: Abnormal Interrupt Summary Enable -->
            <field>
              <name>AIE</name>
              <description>Abnormal Interrupt Summary Enable</description>
              <bitRange>[15:15]</bitRange>
            </field>

            <!-- NIE: Normal Interrupt Summary Enable -->
            <field>
              <name>NIE</name>
              <description>Normal Interrupt Summary Enable</description>
              <bitRange>[16:16]</bitRange>
            </field>
          </fields>
        </register>

        <!-- AHB_STATUS: AHB Status Register -->
        <register>
        	<name>AHB_STATUS</name>
          <description>AHB Status Register</description>
          <addressOffset>0x102C</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
          	<!-- BUSY: AHB Master Status -->
            <field>
              <name>BUSY</name>
              <description>If set, it indicates that the AHB master interface FSMs are in the non-idle state</description>
              <bitRange>[0:0]</bitRange>
            </field>
          </fields>
        </register>

        <!-- CURTDESAPTR: Current Host Transmit Descriptor Register -->
        <register>
        	<name>CURTDESAPTR</name>
          <description>Current Host Transmit Descriptor Register</description>
          <addressOffset>0x1048</addressOffset>
          <size>32</size>
          <access>read-only</access>
        </register>

        <!-- CURRDESAPTR: Current Host Receive Descriptor Register -->
        <register>
        	<name>CURRDESAPTR</name>
          <description>Current Host Receive Descriptor Register</description>
          <addressOffset>0x104C</addressOffset>
          <size>32</size>
          <access>read-only</access>
        </register>

        <!-- CURTBUFAPTR: Current Host Transmit Buffer Address Register -->
        <register>
        	<name>CURTBUFAPTR</name>
          <description>Current Host Transmit Buffer Address Register</description>
          <addressOffset>0x1050</addressOffset>
          <size>32</size>
          <access>read-only</access>
        </register>

        <!-- CURRBUFAPTR: Current Host Receive Buffer Address Register -->
        <register>
        	<name>CURRBUFAPTR</name>
          <description>Current Host Receive Buffer Address Register</description>
          <addressOffset>0x1054</addressOffset>
          <size>32</size>
          <access>read-only</access>
        </register>
      </registers>
    </peripheral>

    <!-- USB -->
    <peripheral>
      <name>USB</name>
      <version>1.0</version>
      <description>USB</description>
      <groupName>USB</groupName>
      <baseAddress>0x41300000</baseAddress>
      <size>32</size>
      <access>read-write</access>

      <addressBlock>
        <offset>0</offset>
        <size>0x11000</size>
        <usage>registers</usage>
      </addressBlock>

      <interrupt>
        <name>USB_INT</name>
        <value>1</value>
      </interrupt>

      <registers>
        <!-- GOTGCTL: Control and Status register -->
        <register>
        	<name>GOTGCTL</name>
          <description>Control and Status register</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
          	<!-- SES_REQ_SCS: Session Request Success -->
            <field>
              <name>SES_REQ_SCS</name>
              <description>set when a session request initiation is successful as a device</description>
              <bitRange>[0:0]</bitRange>
							<access>read-only</access>
            </field>

            <!-- SES_SEQ: Session Request -->
            <field>
              <name>SES_SEQ</name>
              <description>set to initiate a session request on the USB as a device</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- VB_VALID_OV_EN: VBUS Valid Override Enable -->
            <field>
              <name>VB_VALID_OV_EN</name>
              <description>enable/disable the software to override the Bvalid signal using the GOTGCTL.VbvalidOvVal as a host</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- VB_VALID_OV_VAL: VBUS Valid Override Value -->
            <field>
              <name>VB_VALID_OV_VAL</name>
              <description>set Override value for vbusvalid signal when GOTGCTL.VbvalidOvEn is set as a host</description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- A_VALID_OV_EN: A-Peripheral Session Valid Override Enable -->
            <field>
              <name>A_VALID_OV_EN</name>
              <description>enable/disable the software to override the Avalid signal using the GOTGCTL.AvalidOvVal as a host</description>
              <bitRange>[4:4]</bitRange>
            </field>

            <!-- A_VALID_OV_VAL: A-Peripheral Session Valid Override Value -->
            <field>
              <name>A_VALID_OV_VAL</name>
              <description>set Override value for Avalid signal when GOTGCTL.AvalidOvEn is set as a host</description>
              <bitRange>[5:5]</bitRange>
            </field>

            <!-- B_VALID_OV_EN: B-Peripheral Session Valid Override Enable -->
            <field>
              <name>B_VALID_OV_EN</name>
              <description>enable/disable the software to override the Bvalid signal using the GOTGCTL.BvalidOvVal as a device.</description>
              <bitRange>[6:6]</bitRange>
            </field>

            <!-- B_VALID_OV_VAL: B-Peripheral Session Valid Override Value -->
            <field>
              <name>B_VALID_OV_VAL</name>
              <description>set Override value for Bvalid signal when GOTGCTL.BvalidOvEn is set as a device.</description>
              <bitRange>[7:7]</bitRange>
            </field>

            <!-- HST_NEG_SCS: Host Negotiation Success -->
            <field>
              <name>HST_NEG_SCS</name>
              <description>sets when host negotiation is successful as a device.</description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
            </field>

            <!-- HNP_REQ: HNP Request -->
            <field>
              <name>HNP_REQ</name>
              <description>sets this bit to initiate an HNP request to the connected USB host as a device</description>
              <bitRange>[9:9]</bitRange>
            </field>

            <!-- HST_SET_HNP_EN: Host Set HNP Enable -->
            <field>
              <name>HST_SET_HNP_EN</name>
              <description>Host Set HNP Enable as a host</description>
              <bitRange>[10:10]</bitRange>
            </field>

            <!-- DEV_HNP_EN: Device HNP Enabled -->
            <field>
              <name>DEV_HNP_EN</name>
              <description>Device HNP Enabled  as a device</description>
              <bitRange>[11:11]</bitRange>
            </field>

            <!-- CON_ID_STS: Connector ID Status -->
            <field>
              <name>CON_ID_STS</name>
              <description>Connector ID Status</description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>CON_ID_STS_A_DEVICE</name>
                  <description>in A-Device mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CON_ID_STS_B_DEVICE</name>
                  <description>in B-Device mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- DBNC_TIME: Long/Short Debounce Time -->
            <field>
              <name>DBNC_TIME</name>
              <description>the debounce time of a detected connection as a host</description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DBNC_TIME_LONG</name>
                  <description>Long debounce time, used for physical connections (100ms + 2.5us)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DBNC_TIME_SHORT</name>
                  <description>Short debounce time, used for soft connections (2.5us)</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- A_SES_VLD: A-Session Valid -->
            <field>
              <name>A_SES_VLD</name>
              <description>A-Session Valid as a host</description>
              <bitRange>[18:18]</bitRange>
              <access>read-only</access>
            </field>

            <!-- B_SES_VLD: B-Session Valid -->
            <field>
              <name>B_SES_VLD</name>
              <description>B-Session Valid as a host</description>
              <bitRange>[19:19]</bitRange>
              <access>read-only</access>
            </field>

            <!-- OTG_VER: OTG Version -->
            <field>
              <name>OTG_VER</name>
              <description>If 0, OTG Version 1.3. If 1, OTG Version 2.0.</description>
              <bitRange>[20:20]</bitRange>
            </field>
          </fields>
        </register>

        <!-- GOTGINT: OTG interrupt Register-->
        <register>
        	<name>GOTGINT</name>
          <description>OTG interrupt Register</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
          	<!-- SES_END_DET: Session End Detected -->
            <field>
              <name>SES_END_DET</name>
              <description>Set when the utmiotg_bvalid signal is deasserted</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- SES_REQ_SUC_STS_CHNG: Session Request Success Status Change -->
            <field>
              <name>SES_REQ_SUC_STS_CHNG</name>
              <description>Session Request Success Status Change</description>
              <bitRange>[8:8]</bitRange>
            </field>

            <!-- HST_NEG_SUC_STS_CHNG: Host Negotiation Success Status Change -->
            <field>
              <name>HST_NEG_SUC_STS_CHNG</name>
              <description>Host Negotiation Success Status Change</description>
              <bitRange>[9:9]</bitRange>
            </field>

            <!-- HST_NEG_DET: Host Negotiation Detected -->
            <field>
              <name>HST_NEG_DET</name>
              <description>if set, detects a host negotiation request on the USB</description>
              <bitRange>[17:17]</bitRange>
            </field>

            <!-- A_DEV_TOUT_CHG: A-Device Timeout Change -->
            <field>
              <name>A_DEV_TOUT_CHG</name>
              <description>A-device has timed out while waiting for the B-device to connect</description>
              <bitRange>[18:18]</bitRange>
            </field>

            <!-- DBNCE_DONE: Debounce Done -->
            <field>
              <name>DBNCE_DONE</name>
              <description>debounce is completed after the device connect as a host</description>
              <bitRange>[19:19]</bitRange>
            </field>
          </fields>
        </register>

        <!-- GAHBCFG: AHB Configuration Register -->
        <register>
        	<name>GAHBCFG</name>
          <description>AHB Configuration Register</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
          	<!-- GLBL_INTR_EN: Global Interrupt Enable -->
            <field>
              <name>GLBL_INTR_EN</name>
              <description>Global Interrupt Enable</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- BST_LEN: Burst Length/Type -->
            <field>
              <name>BST_LEN</name>
              <description>Burst Length/Type</description>
              <bitRange>[4:1]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>BST_LEN_SINGLE</name>
                  <description>Single</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>BST_LEN_INCR</name>
                  <description>INCR</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>BST_LEN_INCR4</name>
                  <description>INCR4</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>BST_LEN_INCR8</name>
                  <description>INCR8</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>BST_LEN_INCR16</name>
                  <description>INCR16</description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- DMA_EN: DMA enable -->
            <field>
              <name>DMA_EN</name>
              <description>DMA enable</description>
              <bitRange>[5:5]</bitRange>
            </field>

            <!-- REMOTE_MEM_SUPP: Remote Memory Support -->
            <field>
              <name>REMOTE_MEM_SUPP</name>
              <description>enable the functionality to wait for the system DMA Done Signal for the DMA Write Transfers</description>
              <bitRange>[21:21]</bitRange>
            </field>

            <!-- NOTIFY_ALL_DMA_WRITE: Notify all DMA Write Transactions -->
            <field>
              <name>NOTIFY_ALL_DMA_WRITE</name>
              <description>enable the System DMA Done functionality for all the DMA write Transactions corresponding to the Channel/Endpoint</description>
              <bitRange>[22:22]</bitRange>
            </field>

            <!-- AHB_SINGLE: AHB Single Support -->
            <field>
              <name>AHB_SINGLE</name>
              <description>supports Single transfers for the remaining data in a transfer</description>
              <bitRange>[23:23]</bitRange>
            </field>
          </fields>
        </register>

        <!-- GUSBCFG: USB Configuration Register -->
        <register>
        	<name>GUSBCFG</name>
          <description>USB Configuration Register</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
          	<!-- PHY_IF: PHY Interface  -->
            <field>
              <name>PHY_IF</name>
              <description>PHY Interface</description>
              <bitRange>[3:3]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PHY_IF_8_BIT</name>
                  <description>8 bits</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PHY_IF_16_BIT</name>
                  <description>16 bits</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- ULPI_UTMI_SEL: ULPI or UTMI+ Select -->
            <field>
              <name>ULPI_UTMI_SEL</name>
              <description>1, ULPI. 0, UTMI+</description>
              <bitRange>[4:4]</bitRange>
            </field>

            <!-- FS_IF: Full-Speed Serial Interface Select -->
            <field>
              <name>FS_IF</name>
              <description>1, 3-pin bidirectional. 0, 6-pin unidirectional</description>
              <bitRange>[5:5]</bitRange>
            </field>

            <!-- PHY_SEL: USB 2.0 High-Speed PHY or USB 1.1 Full-Speed Serial Transceiver Select -->
            <field>
              <name>PHY_SEL</name>
              <description>0, USB 2.0 High-Speed PHY. 1, USB 1.1 full-speed serial transceiver</description>
              <bitRange>[6:6]</bitRange>
            </field>

            <!-- DDR_SEL: ULPI DDR Select -->
            <field>
              <name>DDR_SEL</name>
              <description>0, Single Data Rate ULPI Interface, with 8-bit-wide data bus. 1, Double Data Rate ULPI Interface, with 4-bit-wide data bus</description>
              <bitRange>[7:7]</bitRange>
            </field>

            <!-- SRP_CAP: SRP-Capable -->
            <field>
              <name>SRP_CAP</name>
              <description>SRP-Capable</description>
              <bitRange>[8:8]</bitRange>
            </field>

            <!-- HNP_CAP: HNP-Capable -->
            <field>
              <name>HNP_CAP</name>
              <description>HNP-Capable</description>
              <bitRange>[9:9]</bitRange>
            </field>

            <!-- USB_TRD_TIM: USB Turnaround Time -->
            <field>
              <name>USB_TRD_TIM</name>
              <description>Specifies the response time for a MAC request to the Packet FIFO Controller (PFC) to fetch data from the DFIFO (SPRAM) as a device.</description>
              <bitRange>[13:10]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>USB_TRD_TIM_5</name>
                  <description>When the MAC interface is 16-bit UTMI+.</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>USB_TRD_TIM_9</name>
                  <description>When the MAC interface is 8-bit UTMI+.</description>
                  <value>9</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- PHY_LPWR_CLK_SEL: PHY Low-Power Clock Select -->
            <field>
              <name>PHY_LPWR_CLK_SEL</name>
              <description>0, 480-MHz Internal PLL clock. 1, 48-MHz External Clock</description>
              <bitRange>[15:15]</bitRange>
            </field>

            <!-- TX_END_DELAY: Tx End Delay -->
            <field>
              <name>TX_END_DELAY</name>
              <description>Tx End Delay as a device</description>
              <bitRange>[28:28]</bitRange>
            </field>

            <!-- FORCE_HOST_MODE: Force Host Mode -->
            <field>
              <name>FORCE_HOST_MODE</name>
              <description>Force Host Mode</description>
              <bitRange>[29:29]</bitRange>
            </field>

            <!-- FORCE_DEVICE_MODE: Force Device Mode -->
            <field>
              <name>FORCE_DEVICE_MODE</name>
              <description>Force Device Mode</description>
              <bitRange>[30:30]</bitRange>
            </field>
          </fields>
        </register>

        <!-- GRSTCTL: Reset Register -->
        <register>
        	<name>GRSTCTL</name>
          <description>Reset Register</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- CORE_SOFT_RST: Core Soft Reset -->
            <field>
              <name>CORE_SOFT_RST</name>
              <description>Core Soft Reset</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- FRM_CNT_RST: Host Frame Counter Reset -->
            <field>
              <name>FRM_CNT_RST</name>
              <description>Host Frame Counter Reset</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- RX_FIFO_FLUSH: RxFIFO Flush -->
            <field>
              <name>RX_FIFO_FLUSH</name>
              <description>RxFIFO Flush</description>
              <bitRange>[4:4]</bitRange>
            </field>

            <!-- TX_FIFO_FLUSH: TxFIFO Flush -->
            <field>
              <name>TX_FIFO_FLUSH</name>
              <description>TxFIFO Flush</description>
              <bitRange>[5:5]</bitRange>
            </field>

            <!-- TX_FIFO_FLUSH_NUM: TxFIFO flush Number -->
            <field>
              <name>TX_FIFO_FLUSH_NUM</name>
              <description>This field indicates which of the 32 possible PHY devices are being accessed</description>
              <bitRange>[9:6]</bitRange>
            </field>

            <!-- TX_FIFO_ALL: TxFIFO flush all FIFOs -->
            <field>
              <name>TX_FIFO_ALL</name>
              <description>TxFIFO flush all FIFOs</description>
              <bitRange>[10:10]</bitRange>
            </field>

            <!-- DMA_REQ: DMA Request Signal -->
            <field>
              <name>DMA_REQ</name>
              <description>Indicates that the DMA request is in progress</description>
              <bitRange>[30:30]</bitRange>
              <access>read-only</access>
            </field>

            <!-- AHB_IDLE: AHB Master Idle -->
            <field>
              <name>AHB_IDLE</name>
              <description>Indicates that the AHB Master State Machine is in the IDLE condition</description>
              <bitRange>[31:31]</bitRange>
              <access>read-only</access>
            </field>
          </fields>
        </register>

        <!-- GINTSTS: Interrupt Register -->
        <register>
        	<name>GINTSTS</name>
          <description>Interrupt Register</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- CUR_MOD: Current Mode of Operation -->
            <field>
              <name>CUR_MOD</name>
              <description>Current Mode of Operation</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>CUR_MOD_DEVICE</name>
                  <description>device mode</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CUR_MOD_HOST</name>
                  <description>host mode</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- MODE_MIS: Mode Mismatch Interrupt -->
            <field>
              <name>MODE_MIS</name>
              <description>Mode Mismatch Interrupt</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- OTG_INT: OTG Interrupt -->
            <field>
              <name>OTG_INT</name>
              <description>OTG Interrupt</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>

            <!-- SOF: Start of (micro)Frame -->
            <field>
              <name>SOF</name>
              <description>Start of (micro)Frame</description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- RFNE: RxFIFO Non-Empty -->
            <field>
              <name>RFNE</name>
              <description>RxFIFO Non-Empty</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>

            <!-- NPTFE: Non-periodic TxFIFO Empty -->
            <field>
              <name>NPTFE</name>
              <description>Non-periodic TxFIFO Empty</description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
            </field>

            <!-- GIN_NAK_EFF: Global IN Non-periodic NAK Effective -->
            <field>
              <name>GIN_NAK_EFF</name>
              <description>Global IN Non-periodic NAK Effective as a device</description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
            </field>

            <!-- GOUT_NAK_EFF: Global OUT NAK Effective -->
            <field>
              <name>GOUT_NAK_EFF</name>
              <description>Global OUT NAK Effective as a device</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>

            <!-- EARLY_SUS: Early Suspend -->
            <field>
              <name>EARLY_SUS</name>
              <description>an Idle state has been detected on the USB For 3 ms as a device</description>
              <bitRange>[10:10]</bitRange>
            </field>

            <!-- USB_SUS: USB Suspend -->
            <field>
              <name>USB_SUS</name>
              <description>A suspend was detected on the USB as a device</description>
              <bitRange>[11:11]</bitRange>
            </field>

            <!-- USB_RST: USB reset -->
            <field>
              <name>USB_RST</name>
              <description>A reset is detected on the USB as a device</description>
              <bitRange>[12:12]</bitRange>
            </field>

            <!-- ENUM_DONE: Enumeration done -->
            <field>
              <name>ENUM_DONE</name>
              <description>speed enumeration is complete as a device</description>
              <bitRange>[13:13]</bitRange>
            </field>

            <!-- ISO_OUT_DROP: Isochronous OUT Packet Dropped Interrupt -->
            <field>
              <name>ISO_OUT_DROP</name>
              <description>Drop an isochronous OUT packet while no space in RXFIFO as a device</description>
              <bitRange>[14:14]</bitRange>
            </field>

            <!-- EOPF: End of Periodic Frame Interrupt -->
            <field>
              <name>EOPF</name>
              <description>End of Periodic Frame Interrupt as a device</description>
              <bitRange>[15:15]</bitRange>
            </field>

            <!-- EP_MIS: Endpoint Mismatch Interrupt -->
            <field>
              <name>EP_MIS</name>
              <description>Endpoint Mismatch Interrupt as a device</description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
            </field>

            <!-- IEP_INT: IN Endpoints Interrupt -->
            <field>
              <name>IEP_INT</name>
              <description>IN Endpoints Interrupt as a device</description>
              <bitRange>[18:18]</bitRange>
              <access>read-only</access>
            </field>

            <!-- OEP_INT: OUT Endpoints Interrupt -->
            <field>
              <name>OEP_INT</name>
              <description>OUT Endpoints Interrupt as a device</description>
              <bitRange>[19:19]</bitRange>
              <access>read-only</access>
            </field>

            <!-- INCOMP_ISO_IN: Incomplete Isochronous IN Transfer -->
            <field>
              <name>INCOMP_ISO_IN</name>
              <description>Incomplete Isochronous IN Transfer as a device</description>
              <bitRange>[20:20]</bitRange>
            </field>

            <!-- IPT_IIOT: Incomplete Periodic Transfer or Incomplete Isochronous OUT Transfer -->
            <field>
              <name>IPT_IIOT</name>
              <description>OUT Incomplete Periodic Transfer as a host or Incomplete Isochronous OUT Transfer as a device</description>
              <bitRange>[21:21]</bitRange>
            </field>

            <!-- DFS: Data Fetch Suspended -->
            <field>
              <name>DFS</name>
              <description>Data Fetch Suspended as a device</description>
              <bitRange>[22:22]</bitRange>
            </field>

            <!-- RST_DET: reset detect -->
            <field>
              <name>RST_DET</name>
              <description>reset detect as a device</description>
              <bitRange>[23:23]</bitRange>
            </field>

            <!-- HP: host port -->
            <field>
              <name>HP</name>
              <description>a change in port status of one of the DWC_otg core ports as a host</description>
              <bitRange>[24:24]</bitRange>
              <access>read-only</access>
            </field>

            <!-- HC: Host Channels Interrupt -->
            <field>
              <name>HC</name>
              <description>an interrupt is pending on one of the channels of the core as a host</description>
              <bitRange>[25:25]</bitRange>
              <access>read-only</access>
            </field>

            <!-- PTFE: Periodic TxFIFO Empty -->
            <field>
              <name>PTFE</name>
              <description>Periodic TxFIFO Empty as a host</description>
              <bitRange>[26:26]</bitRange>
              <access>read-only</access>
            </field>

            <!-- LPM: LPM Transaction Received Interrupt -->
            <field>
              <name>LPM</name>
              <description>LPM Transaction Received Interrupt</description>
              <bitRange>[27:27]</bitRange>
            </field>

            <!-- CIDSC: Connector ID Status Change -->
            <field>
              <name>CIDSC</name>
              <description>A change in connector ID status</description>
              <bitRange>[28:28]</bitRange>
            </field>

            <!-- DD: Disconnect Detected Interrupt -->
            <field>
              <name>DD</name>
              <description>A change in connector ID status</description>
              <bitRange>[29:29]</bitRange>
            </field>

            <!-- SR: Session Request/New Session Detected Interrupt -->
            <field>
              <name>SR</name>
              <description>Session Request/New Session Detected Interrupt</description>
              <bitRange>[30:30]</bitRange>
            </field>

            <!-- WAKEUP: Resume/Remote Wakeup Detected Interrupt -->
            <field>
              <name>WAKEUP</name>
              <description>Resume/Remote Wakeup Detected Interrupt</description>
              <bitRange>[31:31]</bitRange>
            </field>
          </fields>
        </register>

        <!-- GINTEN: Interrupt enable Register -->
        <register>
        	<name>GINTEN</name>
          <description>Interrupt enable Register</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- MODE_MIS: Mode Mismatch -->
            <field>
              <name>MODE_MIS</name>
              <description>Mode Mismatch</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- OTG_INT: OTG -->
            <field>
              <name>OTG_INT</name>
              <description>OTG</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- SOF: Start of (micro)Frame -->
            <field>
              <name>SOF</name>
              <description>Start of (micro)Frame</description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- RFNE: RxFIFO Non-Empty -->
            <field>
              <name>RFNE</name>
              <description>RxFIFO Non-Empty</description>
              <bitRange>[4:4]</bitRange>
            </field>

            <!-- NPTFE: Non-periodic TxFIFO Empty -->
            <field>
              <name>NPTFE</name>
              <description>Non-periodic TxFIFO Empty</description>
              <bitRange>[5:5]</bitRange>
            </field>

            <!-- GIN_NAK_EFF: Global IN Non-periodic NAK Effective -->
            <field>
              <name>GIN_NAK_EFF</name>
              <description>Global IN Non-periodic NAK Effective as a device</description>
              <bitRange>[6:6]</bitRange>
            </field>

            <!-- GOUT_NAK_EFF: Global OUT NAK Effective -->
            <field>
              <name>GOUT_NAK_EFF</name>
              <description>Global OUT NAK Effective as a device</description>
              <bitRange>[7:7]</bitRange>
            </field>

            <!-- EARLY_SUS: Early Suspend -->
            <field>
              <name>EARLY_SUS</name>
              <description>an Idle state has been detected on the USB For 3 ms as a device</description>
              <bitRange>[10:10]</bitRange>
            </field>

            <!-- USB_SUS: USB Suspend -->
            <field>
              <name>USB_SUS</name>
              <description>A suspend was detected on the USB as a device</description>
              <bitRange>[11:11]</bitRange>
            </field>

            <!-- USB_RST: USB reset -->
            <field>
              <name>USB_RST</name>
              <description>A reset is detected on the USB as a device</description>
              <bitRange>[12:12]</bitRange>
            </field>

            <!-- ENUM_DONE: Enumeration done -->
            <field>
              <name>ENUM_DONE</name>
              <description>speed enumeration is complete as a device</description>
              <bitRange>[13:13]</bitRange>
            </field>

            <!-- ISO_OUT_DROP: Isochronous OUT Packet Dropped Interrupt -->
            <field>
              <name>ISO_OUT_DROP</name>
              <description>Drop an isochronous OUT packet while no space in RXFIFO as a device</description>
              <bitRange>[14:14]</bitRange>
            </field>

            <!-- EOPF: End of Periodic Frame Interrupt -->
            <field>
              <name>EOPF</name>
              <description>End of Periodic Frame Interrupt as a device</description>
              <bitRange>[15:15]</bitRange>
            </field>

            <!-- EP_MIS: Endpoint Mismatch Interrupt -->
            <field>
              <name>EP_MIS</name>
              <description>Endpoint Mismatch Interrupt as a device</description>
              <bitRange>[17:17]</bitRange>
            </field>

            <!-- IEP_INT: IN Endpoints Interrupt -->
            <field>
              <name>IEP_INT</name>
              <description>IN Endpoints Interrupt as a device</description>
              <bitRange>[18:18]</bitRange>
            </field>

            <!-- OEP_INT: OUT Endpoints Interrupt -->
            <field>
              <name>OEP_INT</name>
              <description>OUT Endpoints Interrupt as a device</description>
              <bitRange>[19:19]</bitRange>
            </field>

            <!-- INCOMP_ISO_IN: Incomplete Isochronous IN Transfer -->
            <field>
              <name>INCOMP_ISO_IN</name>
              <description>Incomplete Isochronous IN Transfer as a device</description>
              <bitRange>[20:20]</bitRange>
            </field>

            <!-- IPT_IIOT: Incomplete Periodic Transfer or Incomplete Isochronous OUT Transfer -->
            <field>
              <name>IPT_IIOT</name>
              <description>OUT Incomplete Periodic Transfer as a host or Incomplete Isochronous OUT Transfer as a device</description>
              <bitRange>[21:21]</bitRange>
            </field>

            <!-- DFS: Data Fetch Suspended -->
            <field>
              <name>DFS</name>
              <description>Data Fetch Suspended as a device</description>
              <bitRange>[22:22]</bitRange>
            </field>

            <!-- RST_DET: reset detect -->
            <field>
              <name>RST_DET</name>
              <description>reset detect as a device</description>
              <bitRange>[23:23]</bitRange>
            </field>

            <!-- HP: host port -->
            <field>
              <name>HP</name>
              <description>a change in port status of one of the DWC_otg core ports as a host</description>
              <bitRange>[24:24]</bitRange>
            </field>

            <!-- HC: Host Channels Interrupt -->
            <field>
              <name>HC</name>
              <description>an interrupt is pending on one of the channels of the core as a host</description>
              <bitRange>[25:25]</bitRange>
            </field>

            <!-- PTFE: Periodic TxFIFO Empty -->
            <field>
              <name>PTFE</name>
              <description>Periodic TxFIFO Empty as a host</description>
              <bitRange>[26:26]</bitRange>
            </field>

            <!-- LPM: LPM Transaction Received Interrupt -->
            <field>
              <name>LPM</name>
              <description>LPM Transaction Received Interrupt</description>
              <bitRange>[27:27]</bitRange>
            </field>

            <!-- CIDSC: Connector ID Status Change -->
            <field>
              <name>CIDSC</name>
              <description>A change in connector ID status</description>
              <bitRange>[28:28]</bitRange>
            </field>

            <!-- DD: Disconnect Detected Interrupt -->
            <field>
              <name>DD</name>
              <description>A change in connector ID status</description>
              <bitRange>[29:29]</bitRange>
            </field>

            <!-- SR: Session Request/New Session Detected Interrupt -->
            <field>
              <name>SR</name>
              <description>Session Request/New Session Detected Interrupt</description>
              <bitRange>[30:30]</bitRange>
            </field>

            <!-- WAKEUP: Resume/Remote Wakeup Detected Interrupt -->
            <field>
              <name>WAKEUP</name>
              <description>Resume/Remote Wakeup Detected Interrupt</description>
              <bitRange>[31:31]</bitRange>
            </field>
          </fields>
        </register>

        <!-- GRXSTSR: Receive Status Debug Read register -->
        <register>
        	<name>GRXSTSR</name>
          <description>Returns the contents of the top of the Receive FIFO</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-only</access>

          <fields>
            <!-- CH_EP_NUM: channel number or EP number -->
            <field>
              <name>CH_EP_NUM</name>
              <description>channel number as a host or EP number as a device</description>
              <bitRange>[3:0]</bitRange>
            </field>

            <!-- BCNT: Byte Count -->
            <field>
              <name>BCNT</name>
              <description>byte count of the received packet</description>
              <bitRange>[14:4]</bitRange>
            </field>

            <!-- DPID: Data PID -->
            <field>
              <name>DPID</name>
              <description>Data PID of the received packet</description>
              <bitRange>[16:15]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DPID_DATA0</name>
                  <description>DATA0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DPID_DATA1</name>
                  <description>DATA1</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DPID_DATA2</name>
                  <description>DATA2</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DPID_MDATA</name>
                  <description>MDATA</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- PS: Packet Status -->
            <field>
              <name>PS</name>
              <description>the status of the received packet</description>
              <bitRange>[20:17]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PS_G_OUT_NAK</name>
                  <description>Global OUT NAK as a device</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PS_RX_DONE</name>
                  <description>data packet received</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PS_TX_DONE</name>
                  <description>transfer completed</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PS_SETUP_TX_DONE</name>
                  <description>SETUP transaction completed as a device</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PS_DATA_TOGGLE_ERR</name>
                  <description>Data toggle error as a host</description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PS_SETUP_RX_DONE</name>
                  <description>SETUP data packet received as a device</description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PS_CH_HALT</name>
                  <description>Channel halted as a host</description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- FN: Frame Number -->
            <field>
              <name>FN</name>
              <description>the least significant 4 bits of the (micro)frame number in which the packet is received on the USB</description>
              <bitRange>[24:21]</bitRange>
            </field>
          </fields>
        </register>

        <!-- GRXSTSP: Status Read and Pop Register -->
        <register derivedFrom = "GRXSTSR">
        	<name>GRXSTSP</name>
          <description>Pop the contents of the top of the Receive FIFO</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-only</access>
        </register>

        <!-- GRXFSIZ: Receive FIFO Size Register -->
        <register>
        	<name>GRXFSIZ</name>
          <description>This value is in terms of 32-bit words, 16 is minimize and 32768 is max</description>
          <addressOffset>0x24</addressOffset>
          <size>16</size>
          <access>read-write</access>
        </register>

        <!-- GNPTXFSIZ: Non-Periodic Transmit FIFO Size -->
        <register>
        	<name>GNPTXFSIZ</name>
          <description>Non-Periodic Transmit FIFO Size Register</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- NTRSA_INEF0TRSA: Non-periodic Transmit RAM Start Address or IN Endpoint FIFO0 Transmit RAM Start Address -->
            <field>
              <name>NTRSA_INEF0TRSA</name>
              <description>start address for Non-periodic Transmit FIFO RAM as a host or IN Endpoint FIFO0 Transmit RAM as a device </description>
              <bitRange>[15:0]</bitRange>
            </field>

            <!-- NTD_INEF0TD: Non-periodic TxFIFO Depth or IN Endpoint TxFIFO 0 Depth -->
            <field>
              <name>NTD_INEF0TD</name>
              <description>This value is in terms of 32-bit words, 16 is minimize and 32768 is max. Non-periodic TxFIFO Depth as a host or IN Endpoint TxFIFO 0 Depth as a device</description>
              <bitRange>[31:16]</bitRange>
            </field>
          </fields>
        </register>

        <!-- GNPTXSTS: Non-Periodic Transmit FIFO/Queue Status Register -->
        <register>
        	<name>GNPTXSTS</name>
          <description>Non-Periodic Transmit FIFO/Queue Status Register</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <access>read-only</access>

          <fields>
            <!-- NTSA: Non-periodic TxFIFO Space Avail -->
            <field>
              <name>NTSA</name>
              <description>the amount of free space available in the Non-periodic TxFIFO, max is 32768.</description>
              <bitRange>[15:0]</bitRange>
            </field>

            <!-- NTRQSA: Non-periodic Transmit Request Queue Space Available -->
            <field>
              <name>NTRQSA</name>
              <description>the amount of free space available in the Non-periodic Transmit Request Queue, max is 8.</description>
              <bitRange>[23:16]</bitRange>
            </field>

            <!-- TNTRQ_LAST: last entry of top of the Non-periodic Transmit Request Queue -->
            <field>
              <name>TNTRQ_LAST</name>
              <description>last Entry in the Non-periodic Tx Request Queue that is currently being processed by the MAC</description>
              <bitRange>[24:24]</bitRange>
            </field>

            <!-- TNTRQ_TYPE: type of top of the Non-periodic Transmit Request Queue -->
            <field>
              <name>TNTRQ_TYPE</name>
              <description>type in the Non-periodic Tx Request Queue that is currently being processed by the MAC</description>
              <bitRange>[26:25]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>TNTRQ_TYPE_OUT_TOKEN</name>
                  <description>OUT token</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TNTRQ_TYPE_OUT_ZERO_LENGTH_PACKET</name>
                  <description>OUT Zero-length transmit packet</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TNTRQ_TYPE_CSPLIT_TOKEN</name>
                  <description>CSPLIT token</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TNTRQ_TYPE_CH_HALT_CMD</name>
                  <description>Channel halt command</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- TNTRQ_CH: Channel of top of the Non-periodic Transmit Request Queue -->
            <field>
              <name>TNTRQ_CH</name>
              <description>Channel of top of the Non-periodic Transmit Request Queue</description>
              <bitRange>[30:27]</bitRange>
            </field>
          </fields>
        </register>

        <!-- GHWCFG1: User HW Config1 Register -->
        <register>
        	<name>GHWCFG1</name>
          <description>User HW Config1 Register</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <access>read-only</access>

          <fields>
            <!-- EP0_DIR: Endpoint 0 direction -->
            <field>
              <name>EP0_DIR</name>
              <description>Endpoint 0 direction, always Bidirection</description>
              <bitRange>[1:0]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EP_DIR_BI</name>
                  <description>IN and OUT endpoint</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>EP_DIR_IN</name>
                  <description>IN endpointt</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>EP_DIR_OUT</name>
                  <description>OUT endpoint</description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- EP1_DIR: Endpoint 1 direction -->
            <field derivedFrom = "EP0_DIR">
              <name>EP1_DIR</name>
              <description>Endpoint 1 direction</description>
              <bitRange>[3:2]</bitRange>
            </field>

            <!-- EP2_DIR: Endpoint 2 direction -->
            <field derivedFrom = "EP0_DIR">
              <name>EP2_DIR</name>
              <description>Endpoint 2 direction</description>
              <bitRange>[5:4]</bitRange>
            </field>

            <!-- EP3_DIR: Endpoint 3 direction -->
            <field derivedFrom = "EP0_DIR">
              <name>EP3_DIR</name>
              <description>Endpoint 3 direction</description>
              <bitRange>[7:6]</bitRange>
            </field>

            <!-- EP4_DIR: Endpoint 4 direction -->
            <field derivedFrom = "EP0_DIR">
              <name>EP4_DIR</name>
              <description>Endpoint 4 direction</description>
              <bitRange>[9:8]</bitRange>
            </field>

            <!-- EP5_DIR: Endpoint 5 direction -->
            <field derivedFrom = "EP0_DIR">
              <name>EP5_DIR</name>
              <description>Endpoint 5 direction</description>
              <bitRange>[11:10]</bitRange>
            </field>

            <!-- EP6_DIR: Endpoint 6 direction -->
            <field derivedFrom = "EP0_DIR">
              <name>EP6_DIR</name>
              <description>Endpoint 6 direction</description>
              <bitRange>[13:12]</bitRange>
            </field>

            <!-- EP7_DIR: Endpoint 7 direction -->
            <field derivedFrom = "EP0_DIR">
              <name>EP7_DIR</name>
              <description>Endpoint 7 direction</description>
              <bitRange>[15:14]</bitRange>
            </field>

            <!-- EP8_DIR: Endpoint 8 direction -->
            <field derivedFrom = "EP0_DIR">
              <name>EP8_DIR</name>
              <description>Endpoint 8 direction</description>
              <bitRange>[17:16]</bitRange>
            </field>

            <!-- EP9_DIR: Endpoint 9 direction -->
            <field derivedFrom = "EP0_DIR">
              <name>EP9_DIR</name>
              <description>Endpoint 9 direction</description>
              <bitRange>[19:18]</bitRange>
            </field>

            <!-- EP10_DIR: Endpoint 10 direction -->
            <field derivedFrom = "EP0_DIR">
              <name>EP10_DIR</name>
              <description>Endpoint 10 direction</description>
              <bitRange>[21:20]</bitRange>
            </field>

            <!-- EP11_DIR: Endpoint 11 direction -->
            <field derivedFrom = "EP0_DIR">
              <name>EP11_DIR</name>
              <description>Endpoint 11 direction</description>
              <bitRange>[23:22]</bitRange>
            </field>

            <!-- EP12_DIR: Endpoint 12 direction -->
            <field derivedFrom = "EP0_DIR">
              <name>EP12_DIR</name>
              <description>Endpoint 12 direction</description>
              <bitRange>[25:24]</bitRange>
            </field>

            <!-- EP13_DIR: Endpoint 13 direction -->
            <field derivedFrom = "EP0_DIR">
              <name>EP13_DIR</name>
              <description>Endpoint 13 direction</description>
              <bitRange>[27:26]</bitRange>

            </field>

            <!-- EP14_DIR: Endpoint 14 direction -->
            <field derivedFrom = "EP0_DIR">
              <name>EP14_DIR</name>
              <description>Endpoint 14 direction</description>
              <bitRange>[29:28]</bitRange>
            </field>

            <!-- EP15_DIR: Endpoint 15 direction -->
            <field derivedFrom = "EP0_DIR">
              <name>EP15_DIR</name>
              <description>Endpoint 15 direction</description>
              <bitRange>[31:30]</bitRange>
            </field>
          </fields>
        </register>

        <!-- GLPMCFG: Core LPM Configuration Register -->
        <register>
        	<name>GLPMCFG</name>
          <description>Core LPM Configuration Register</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- LPM_CAP: LPM-Capable -->
            <field>
              <name>EP0_DIR</name>
              <description>LPM capability is enabled</description>
              <bitRange>[0:0]</bitRange>
            </field>
          </fields>
        </register>

        <!-- GPWRDN: Global Power Down Register -->
        <register>
        	<name>GPWRDN</name>
          <description>Global Power Down Register</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- PMU_ACTIVE: PMU Active -->
            <field>
              <name>PMU_ACTIVE</name>
              <description>PMU Active is enabled</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- PDC: Power Down Clamp -->
            <field>
              <name>PDC</name>
              <description>Power Down Clamp is enabled</description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- PDR: Power Down ResetN -->
            <field>
              <name>PDR</name>
              <description>If clear, Reset DWC_otg</description>
              <bitRange>[4:4]</bitRange>
            </field>

            <!-- PDS: Power Down Switch -->
            <field>
              <name>PDS</name>
              <description>If 0, DWC_otg is in ON state, or OFF state</description>
              <bitRange>[5:5]</bitRange>
            </field>

            <!-- DIS_VBUS: Disable VBUS -->
            <field>
              <name>DIS_VBUS</name>
              <description>Disable VBUS</description>
              <bitRange>[6:6]</bitRange>
            </field>

            <!-- SRP_DETECT_INT: SRP Detect -->
            <field>
              <name>SRP_DETECT_INT</name>
              <description>SRP has been detected by the PMU as a host</description>
              <bitRange>[15:15]</bitRange>
            </field>

            <!-- SRP_DETECT_INT_EN: Enable For SRPDetect Interrupt -->
            <field>
              <name>SRP_DETECT_INT_EN</name>
              <description>Enable For SRPDetect Interrupt as a host</description>
              <bitRange>[16:16]</bitRange>
            </field>

            <!-- STATE_CHN_INT: Status Change Interrupt -->
            <field>
              <name>STATE_CHN_INT</name>
              <description>a status change in either the IDDIG or BSessVld signal</description>
              <bitRange>[17:17]</bitRange>
            </field>

            <!-- STATE_CHN_INT_EN: Enable For Status Change Interrupt -->
            <field>
              <name>STATE_CHN_INT_EN</name>
              <description>Enable For Status Change Interrupt</description>
              <bitRange>[18:18]</bitRange>
            </field>

            <!-- LINE_STATE: LineState -->
            <field>
              <name>LINE_STATE</name>
              <description>the current linestate on USB as seen by the PMU module</description>
              <bitRange>[20:19]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>LINE_STATE_DM0_DP0</name>
                  <description>DM = 0, DP = 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LINE_STATE_DM0_DP1</name>
                  <description>DM = 0, DP = 1</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LINE_STATE_DM1_DP0</name>
                  <description>DM = 1, DP = 0</description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- IDDIG: IDDIG -->
            <field>
              <name>IDDIG</name>
              <description>the status of the IDDIG signal. If 0, host mode. if 1, device mode</description>
              <bitRange>[21:21]</bitRange>
              <access>read-only</access>
            </field>

            <!-- B_SESS_VLD: B Session Valid -->
            <field>
              <name>B_SESS_VLD</name>
              <description>B session valid status signal from the PHY</description>
              <bitRange>[22:22]</bitRange>
              <access>read-only</access>
            </field>

            <!-- ADP_INT: ADP Interrupt -->
            <field>
              <name>ADP_INT</name>
              <description>set whenever there is a ADP event</description>
              <bitRange>[23:23]</bitRange>
            </field>
          </fields>
        </register>

        <!-- GDFIFOCFG: Global DFIFO Software Config Register -->
        <register>
        	<name>GDFIFOCFG</name>
          <description>Global DFIFO Software Config Register</description>
          <addressOffset>0x5C</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- GDFIFOCFG: GDFIFOCfg -->
            <field>
              <name>GDFIFOCFG</name>
              <description>This field is for dynamic programming of the DFIFO Size.</description>
              <bitRange>[15:0]</bitRange>
            </field>

            <!-- EPIBA: EPInfoBaseAddr -->
            <field>
              <name>EPIBA</name>
              <description>This field provides the start address of the EP info controller</description>
              <bitRange>[31:16]</bitRange>
            </field>
          </fields>
        </register>

        <!-- HPTXFSIZ: Host Periodic Transmit FIFO Size Register -->
        <register>
        	<name>HPTXFSIZ</name>
          <description>Host Periodic Transmit FIFO Size Register</description>
          <addressOffset>0x100</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- HPTSA: Host Periodic TxFIFO Start Address -->
            <field>
              <name>HPTSA</name>
              <description>start address of the Periodic TxFIFO</description>
              <bitRange>[15:0]</bitRange>
            </field>

            <!-- EPIBA: EPInfoBaseAddr -->
            <field>
              <name>EPIBA</name>
              <description>the size of the Periodic TxFIFO</description>
              <bitRange>[31:16]</bitRange>
            </field>
          </fields>
        </register>

        <!-- DIEPTXF: Device In Endpoint Transmit FIFO Size Register -->
        <register>
        	<dim>15</dim>
          <dimIncrement>4</dimIncrement>
          <dimIndex>1-15</dimIndex>
        	<name>DIEPTXF%s</name>
          <description>Device In Endpoint Transmit FIFO Size Register</description>
          <addressOffset>0x104</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- INEFTRSA: IN Endpoint FIFOn Transmit RAM Start Address -->
            <field>
              <name>INEFTRSA</name>
              <description>IN Endpoint FIFOn Transmit RAM Start Address</description>
              <bitRange>[15:0]</bitRange>
            </field>

            <!-- INETFD: IN Endpoint TxFIFO Depth -->
            <field>
              <name>INETFD</name>
              <description>IN Endpoint TxFIFO Depth</description>
              <bitRange>[31:16]</bitRange>
            </field>
          </fields>
        </register>

        <!-- HCFG: Host Configuration Register -->
        <register>
        	<name>HCFG</name>
          <description>Host Configuration Register</description>
          <addressOffset>0x400</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- FS_LS_PCS: FS/LS PHY Clock Select -->
            <field>
              <name>FS_LS_PCS</name>
              <description>FS/LS PHY Clock Select as a host</description>
              <bitRange>[1:0]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>FS_LS_PCS_30_60M</name>
                  <description>PHY clock is running at 30/60 MHz</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FS_LS_PCS_48M</name>
                  <description>PHY clock is running at 48 MHz</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FS_LS_PCS_6M</name>
                  <description>PHY clock is running at 6 MHz</description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- FS_LS_SUPPORT: FS- and LS-Only Support -->
            <field>
              <name>FS_LS_SUPPORT</name>
              <description>If set, FS/LS-only, even If the connected device can support HS</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- EN_32K_SUS: Enable 32 KHz Suspend mode -->
            <field>
              <name>EN_32K_SUS</name>
              <description>Enable 32 KHz Suspend mode</description>
              <bitRange>[7:7]</bitRange>
            </field>

            <!-- RVP: Resume Validation Period -->
            <field>
              <name>RVP</name>
              <description>ResValid number of clock cycles to detect a valid resume</description>
              <bitRange>[15:8]</bitRange>
            </field>

            <!-- EN_SG_DMA: Enable Scatter/gather DMA in Host mode -->
            <field>
              <name>EN_SG_DMA</name>
              <description>Enable Scatter/gather DMA in Host mode</description>
              <bitRange>[23:23]</bitRange>
            </field>

            <!-- FLE: Frame List Entries -->
            <field>
              <name>FLE</name>
              <description>the number of entries in the Frame list. 8 times of FLE</description>
              <bitRange>[25:24]</bitRange>
            </field>

            <!-- EPS: Enable Periodic Scheduling -->
            <field>
              <name>EPS</name>
              <description>Enables periodic scheduling</description>
              <bitRange>[26:26]</bitRange>
            </field>

            <!-- MCRTE: Mode Change Ready Timer Enable -->
            <field>
              <name>MCRTE</name>
              <description>enable/disable the Host core to wait 200 PHY clock cycles at the end of Resume to change the opmode signal to the PHY to 00 after Suspend or LPM.</description>
              <bitRange>[31:31]</bitRange>
            </field>
          </fields>
        </register>

        <!-- HFIR: Host Frame Interval Register -->
        <register>
        	<name>HFIR</name>
          <description>Host Frame Interval Register</description>
          <addressOffset>0x404</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- FI: Frame Interval -->
            <field>
              <name>FI</name>
              <description>IN Endpoint FIFOn Transmit RAM Start Address</description>
              <bitRange>[15:0]</bitRange>
            </field>

            <!-- RC: Reload Control -->
            <field>
              <name>RC</name>
              <description>The HFIR can be dynamically reloaded during runtime if set</description>
              <bitRange>[16:16]</bitRange>
            </field>
          </fields>
        </register>

        <!-- HFNUM: Host Frame Number/Frame Time Remaining Register -->
        <register>
        	<name>HFNUM</name>
          <description>Host Frame Number/Frame Time Remaining Register</description>
          <addressOffset>0x408</addressOffset>
          <size>32</size>
          <access>read-only</access>

          <fields>
            <!-- FN: Frame Number -->
            <field>
              <name>FN</name>
              <description>This field increments when a new SOF is transmitted on the USB</description>
              <bitRange>[15:0]</bitRange>
            </field>

            <!-- FTR: Frame Time Remaining -->
            <field>
              <name>FTR</name>
              <description>amount of time remaining in the current microframe (HS) or Frame (FS/LS), in terms of PHY clocks</description>
              <bitRange>[31:16]</bitRange>
            </field>
          </fields>
        </register>

        <!-- HPTXSTS: Host Periodic Transmit FIFO/Queue Status Register -->
        <register>
        	<name>HPTXSTS</name>
          <description>Host Periodic Transmit FIFO/Queue Status Register</description>
          <addressOffset>0x410</addressOffset>
          <size>32</size>
          <access>read-only</access>

          <fields>
            <!-- PTDFSA: Periodic Transmit Data FIFO Space Available -->
            <field>
              <name>PTDFSA</name>
              <description>Indicates the number of free locations available to be written to in the Periodic TxFIFO, max is 32768</description>
              <bitRange>[15:0]</bitRange>
            </field>

            <!-- PTRQSA: Periodic Transmit Request Queue Space Available -->
            <field>
              <name>PTRQSA</name>
              <description>Indicates the number of free locations available to be written in the Periodic Transmit Request Queue, max is 16</description>
              <bitRange>[23:16]</bitRange>
            </field>


            <!-- TPTRQ_LAST: last entry of top of the periodic Transmit Request Queue -->
            <field>
              <name>TPTRQ_LAST</name>
              <description>last Entry in the periodic Tx Request Queue that is currently being processed by the MAC</description>
              <bitRange>[24:24]</bitRange>
            </field>

            <!-- TPTRQ_TYPE: type of top of the periodic Transmit Request Queue -->
            <field>
              <name>TPTRQ_TYPE</name>
              <description>type in the periodic Tx Request Queue that is currently being processed by the MAC</description>
              <bitRange>[26:25]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>TPTRQ_TYPE_OUT_TOKEN</name>
                  <description>OUT token</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TPTRQ_TYPE_ZERO_LENGTH_PACKET</name>
                  <description>Zero-length packet</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TPTRQ_TYPE_CSPLIT</name>
                  <description>CSPLIT</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TPTRQ_TYPE_CH_DIS_CMD</name>
                  <description>Channel Disable command</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- TPTRQ_CH: Channel of top of the periodic Transmit Request Queue -->
            <field>
              <name>TPTRQ_CH</name>
              <description>Channel of top of the periodic Transmit Request Queue</description>
              <bitRange>[30:27]</bitRange>
            </field>

            <!-- TPTRQ_ODD_FRAME: Odd/Even (micro)Frame -->
            <field>
              <name>TPTRQ_ODD_FRAME</name>
              <description>If set, send in odd (micro)Frame</description>
              <bitRange>[31:31]</bitRange>
            </field>
          </fields>
        </register>

        <!-- HAINT: Host All Channels Interrupt Register -->
        <register>
        	<name>HAINT</name>
          <description>Host All Channels Interrupt Register</description>
          <addressOffset>0x414</addressOffset>
          <size>32</size>
          <access>read-only</access>

          <fields>
            <!-- INT: Channel Interrupts -->
            <field>
              <name>INT</name>
              <description>Channel Interrupts, from 0 to 15.</description>
              <bitRange>[15:0]</bitRange>
            </field>
          </fields>
        </register>

        <!-- HAINT_EN: Host All Channels Interrupt Enable Register -->
        <register>
        	<name>HAINT_EN</name>
          <description>Host All Channels Interrupt Enable Register</description>
          <addressOffset>0x418</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- EN: Channel Interrupts Enable -->
            <field>
              <name>EN</name>
              <description>Channel Interrupts Enable, from 0 to 15.</description>
              <bitRange>[15:0]</bitRange>
            </field>
          </fields>
        </register>

        <!-- HFLBA: Host Frame List Base Address Register -->
        <register>
        	<name>HFLBA</name>
          <description>The starting address of the Frame list</description>
          <addressOffset>0x41C</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>

        <!-- HPRT: Host Port Control and Status Register -->
        <register>
        	<name>__HPRT</name>
          <description>Host Port Control and Status Register</description>
          <addressOffset>0x440</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- PCS: Port Connect Status -->
            <field>
              <name>PCS</name>
              <description>If a device is attached to the port</description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
            </field>

            <!-- PCD: Port Connect Detected -->
            <field>
              <name>PCD</name>
              <description>A device connection is detected</description>
              <bitRange>[1:1]</bitRange>
            </field>


            <!-- PE: Port Enable -->
            <field>
              <name>PE</name>
              <description>Port Enable</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- PEDC: Port Enable/Disable Change -->
            <field>
              <name>PEDC</name>
              <description>Set if when the status of the Port Enable (bit 2) of this register changes</description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- POA: Port Overcurrent Active -->
            <field>
              <name>POA</name>
              <description>Indicates the overcurrent condition of the port</description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
            </field>

            <!-- POC: Port Overcurrent Change -->
            <field>
              <name>POC</name>
              <description>Set if when the status of the Port Overcurrent Active bit (bit 4) in this register changes</description>
              <bitRange>[5:5]</bitRange>
            </field>

            <!-- PR: Port Resume -->
            <field>
              <name>PR</name>
              <description>Application and Core all can perform resume by setting, then clear it whatever resume is success or not</description>
              <bitRange>[6:6]</bitRange>
            </field>

            <!-- PS: Port Suspend -->
            <field>
              <name>PS</name>
              <description>Sets this bit to put this port in Suspend mode</description>
              <bitRange>[7:7]</bitRange>
            </field>

            <!-- PRESET: Port Reset -->
            <field>
              <name>PRESET</name>
              <description>sets this bit, a reset sequence is started on this port</description>
              <bitRange>[8:8]</bitRange>
            </field>

            <!-- PLSDP: Port Line Status -->
            <field>
              <name>PLSDP</name>
              <description>Logic level of D+</description>
              <bitRange>[10:10]</bitRange>
            </field>

            <!-- PLSDN: Port Line Status -->
            <field>
              <name>PLSDN</name>
              <description>Logic level of D-</description>
              <bitRange>[11:11]</bitRange>
            </field>

            <!-- PP: Port Power -->
            <field>
              <name>PP</name>
              <description>this field to control power to this port. 1, power on</description>
              <bitRange>[12:12]</bitRange>
            </field>

            <!-- PTC: Port Test Control -->
            <field>
              <name>PTC</name>
              <description>The application writes a nonzero value to this field to put the port into a Test mode</description>
              <bitRange>[16:13]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PTC_TEST_DISABLE</name>
                  <description>Test mode disable</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PTC_TEST_J</name>
                  <description>Test_J mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PTC_TEST_K</name>
                  <description>Test_K mode</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PTC_TEST_SE0_NAK</name>
                  <description>Test_SE0_NAK mode</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PTC_TEST_PACKET</name>
                  <description>Test_Packet mode</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PTC_TEST_FORCE_ENABLE</name>
                  <description>Test_Force_Enable</description>
                  <value>5</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- SPEED: Port Speed -->
            <field>
              <name>SPEED</name>
              <description>Indicates the speed of the device attached to this port</description>
              <bitRange>[18:17]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SPEED_HIGH</name>
                  <description>High speed</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPEED_FULL</name>
                  <description>Full speed</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPEED_LOW</name>
                  <description>low speed</description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>

        <!-- HCC: Host Channel Characteristics Register -->
        <register>
        	<dim>16</dim>
          <dimIncrement>32</dimIncrement>
          <dimIndex>0-15</dimIndex>
        	<name>HCC%s</name>
          <description>Host Channel Characteristics Register</description>
          <addressOffset>0x500</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- MPS: Maximum Packet Size -->
            <field>
              <name>MPS</name>
              <description>Indicates the maximum packet size of the associated endpoint</description>
              <bitRange>[10:0]</bitRange>
            </field>

            <!-- EP_NUM: Endpoint Number -->
            <field>
              <name>EP_NUM</name>
              <description>Indicates the endpoint number on the device serving as the data source or sink.</description>
              <bitRange>[14:11]</bitRange>
            </field>

            <!-- EP_DIR: Endpoint Direction -->
            <field>
              <name>EP_DIR</name>
              <description>Indicates whether the transaction is IN or OUT. 0, OUT. 1, IN</description>
              <bitRange>[15:15]</bitRange>
            </field>

            <!-- LSD: Low-Speed Device -->
            <field>
              <name>LSD</name>
              <description>indicate that this channel is communicating to a low-speed device.</description>
              <bitRange>[17:17]</bitRange>
            </field>

            <!-- EP_TYPE: Endpoint Type -->
            <field>
              <name>EP_TYPE</name>
              <description>Indicates the transfer type selected.</description>
              <bitRange>[19:18]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EP_TYPE_CTRL</name>
                  <description>Control</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>EP_TYPE_ISOCHRONOUS</name>
                  <description>Isochronous</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>EP_TYPE_BULK</name>
                  <description>bulk</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>EP_TYPE_INT</name>
                  <description>Interrupt</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- EC: Multi Count (MC) / Error Count (EC) -->
            <field>
              <name>EC</name>
              <description>Multi Count (MC) / Error Count (EC).</description>
              <bitRange>[21:20]</bitRange>
            </field>

            <!-- DA: Device Address -->
            <field>
              <name>DA</name>
              <description>This field selects the specific device serving as the data source or sink.</description>
              <bitRange>[28:22]</bitRange>
            </field>

            <!-- OF: Odd Frame -->
            <field>
              <name>OF</name>
              <description>The frame is odd or even.</description>
              <bitRange>[29:29]</bitRange>
            </field>

            <!-- CD: Channel Disable -->
            <field>
              <name>CD</name>
              <description>sets this bit to stop transmitting/receiving data on a channel.</description>
              <bitRange>[30:30]</bitRange>
            </field>

            <!-- CE: Channel Enable -->
            <field>
              <name>CE</name>
              <description>If the descriptor structure and data buffer are ready or not yet.</description>
              <bitRange>[31:31]</bitRange>
            </field>
          </fields>
        </register>

        <!-- HCINT: Host Channel Interrupt Register -->
        <register>
        	<dim>16</dim>
          <dimIncrement>32</dimIncrement>
          <dimIndex>0-15</dimIndex>
        	<name>HCINT%s</name>
          <description>Host Channel Interrupt Register</description>
          <addressOffset>0x508</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- TC: Transfer Completed -->
            <field>
              <name>TC</name>
              <description>Transfer completed normally without any errors</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- CH_HALT: Channel halted -->
            <field>
              <name>CH_HALT</name>
              <description>Indicates the endpoint number on the device serving as the data source or sink.</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- AHB_ERR: AHB error -->
            <field>
              <name>AHB_ERR</name>
              <description>there is an AHB error during AHB read/write </description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- BNA: BNA (Buffer Not Available) Interrupt -->
            <field>
              <name>BNA</name>
              <description>Buffer Not Available</description>
              <bitRange>[11:11]</bitRange>
            </field>

            <!-- ETE: Excessive Transaction Error -->
            <field>
              <name>ETE</name>
              <description>3 consecutive transaction errors occurred on the USB bus</description>
              <bitRange>[12:12]</bitRange>
            </field>

            <!-- DR: Descriptor rollover interrupt -->
            <field>
              <name>DR</name>
              <description>the corresponding channel's descriptor list rolls over</description>
              <bitRange>[13:13]</bitRange>
            </field>
          </fields>
        </register>

        <!-- HCINT_EN: Host Channel Interrupt Enable Register -->
        <register>
        	<dim>16</dim>
          <dimIncrement>32</dimIncrement>
          <dimIndex>0-15</dimIndex>
        	<name>HCINT_EN%s</name>
          <description>Host Channel Interrupt Enable Register</description>
          <addressOffset>0x50C</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- TC: Transfer Completed -->
            <field>
              <name>TC</name>
              <description>Transfer completed normally without any errors</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- CH_HALT: Channel halted -->
            <field>
              <name>CH_HALT</name>
              <description>Indicates the endpoint number on the device serving as the data source or sink.</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- AHB_ERR: AHB error -->
            <field>
              <name>AHB_ERR</name>
              <description>there is an AHB error during AHB read/write </description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- BNA: BNA (Buffer Not Available) Interrupt -->
            <field>
              <name>BNA</name>
              <description>Buffer Not Available</description>
              <bitRange>[11:11]</bitRange>
            </field>

            <!-- ETE: Excessive Transaction Error -->
            <field>
              <name>ETE</name>
              <description>3 consecutive transaction errors occurred on the USB bus</description>
              <bitRange>[12:12]</bitRange>
            </field>

            <!-- DR: Descriptor rollover interrupt -->
            <field>
              <name>DR</name>
              <description>the corresponding channel's descriptor list rolls over</description>
              <bitRange>[13:13]</bitRange>
            </field>
          </fields>
        </register>

        <!-- HCTSIZ: Host Channel Transfer Size Register -->
        <register>
        	<dim>16</dim>
          <dimIncrement>32</dimIncrement>
          <dimIndex>0-15</dimIndex>
        	<name>HCTSIZ%s</name>
          <description>Host Channel Transfer Size Register</description>
          <addressOffset>0x510</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- SCHED_INFO: Schedule information -->
            <field>
              <name>SCHED_INFO</name>
              <description>Every bit in this 8 bit register indicates scheduling for that microframe.Bit N indicates scheduling for Nth microframe scheduling for 8th microframe in that frame.</description>
              <bitRange>[7:0]</bitRange>
            </field>

            <!-- NTD: Number of Transfer Descriptors -->
            <field>
              <name>NTD</name>
              <description>Number of Transfer Descriptors.</description>
              <bitRange>[15:8]</bitRange>
            </field>

            <!-- PID: AHB error -->
            <field>
              <name>PID</name>
              <description>the type of PID to use for the initial transaction</description>
              <bitRange>[30:29]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PID_DATA0</name>
                  <description>Data 0</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PID_DATA2</name>
                  <description>Data 2</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PID_DATA1</name>
                  <description>Data 1</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PID_MDATA_SETUP</name>
                  <description>MDATA or SETUP</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- PING: Do ping -->
            <field>
              <name>PING</name>
              <description>Setting this field to 1 directs the host to do PING protocol</description>
              <bitRange>[31:31]</bitRange>
            </field>
          </fields>
        </register>

        <!-- HCDMA: Host Channel-n DMA Address Register -->
        <register>
        	<dim>16</dim>
          <dimIncrement>32</dimIncrement>
          <dimIndex>0-15</dimIndex>
        	<name>HCDMA%s</name>
          <description>Host Channel-n DMA Address Register</description>
          <addressOffset>0x514</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- CTD: Number of Transfer Descriptors -->
            <field>
              <name>CTD</name>
              <description>Number of Transfer Descriptors for Non-Isochronous</description>
              <bitRange>[8:3]</bitRange>
            </field>

            <!-- ADDR: he start address of 512 bytes page. -->
            <field>
              <name>ADDR</name>
              <description>he start address of 512 bytes page for Non-Isochronous</description>
              <bitRange>[31:9]</bitRange>
            </field>
          </fields>
        </register>

        <!-- HCDMAB: Host Channel-n DMA Buffer Address Register -->
        <register>
        	<dim>16</dim>
          <dimIncrement>32</dimIncrement>
          <dimIndex>0-15</dimIndex>
        	<name>HCDMAB%s</name>
          <description>Host Channel-n DMA Buffer 	Address Register</description>
          <addressOffset>0x51C</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>

				<!-- DCFG: Device Configuration Register -->
        <register>
        	<name>DCFG</name>
          <description>Device Configuration Register</description>
          <addressOffset>0x800</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- DSPEED: Device Speed -->
            <field>
              <name>DSPEED</name>
              <description>the maximum speed the application can support</description>
              <bitRange>[1:0]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DSPEED_HIGH</name>
                  <description>High speed (USB 2.0 PHY clock is 30 MHz or 60 MHz)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DSPEED_FULL</name>
                  <description>Full speed (USB 2.0 PHY clock is 30 MHz or 60 MHz)</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DSPEED_LOW</name>
                  <description>Low speed (USB 1.1 transceiver clock is 6 MHz).</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DSPEED_FULL_48M</name>
                  <description>Full speed (USB 1.1 transceiver clock is 48 MHz).</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- NZLSOH: Non-Zero-Length Status OUT Handshake -->
            <field>
              <name>NZLSOH</name>
              <description>select the handshake the core sends on receiving a non zero-length data packet during the OUT transaction of a control transfer's Status stage</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- EN_32K_SUS: Enable 32 KHz Suspend mode -->
            <field>
              <name>EN_32K_SUS</name>
              <description>Enable 32 KHz Suspend mode</description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- DEVICE_ADDR: Device Address -->
            <field>
              <name>DEVICE_ADDR</name>
              <description>The application must program this field after every SetAddress control command</description>
              <bitRange>[10:4]</bitRange>
            </field>

            <!-- PFI: Periodic Frame Interval -->
            <field>
              <name>PFI</name>
              <description>Indicates the time within a (micro)frame at which the application must be notified using the End Of Periodic Frame Interrupt</description>
              <bitRange>[12:11]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PFI_80</name>
                  <description>80% of the (micro)frame interval</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PFI_85</name>
                  <description>85% of the (micro)frame interval</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PFI_90</name>
                  <description>90% of the (micro)frame interval</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PFI_95</name>
                  <description>95% of the (micro)frame interval</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- EDON: Enable Device OUT NAK -->
            <field>
              <name>EDON</name>
              <description>If set the core sets NAK after Bulk OUT transfer complete</description>
              <bitRange>[13:13]</bitRange>
            </field>

            <!-- EN_SG_DMA: Enable Scatter/Gather DMA in Device mode -->
            <field>
              <name>EN_SG_DMA</name>
              <description>enable the Scatter/Gather DMA operation</description>
              <bitRange>[23:23]</bitRange>
            </field>

            <!-- PSI: Periodic Scheduling Interval -->
            <field>
              <name>PSI</name>
              <description>Periodic Scheduling Interval</description>
              <bitRange>[25:24]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PSI_25</name>
                  <description>25% of the (micro)frame</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PSI_50</name>
                  <description>50% of the (micro)frame</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PSI_75</name>
                  <description>75% of the (micro)frame</description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- RVP: Resume Validation Period -->
            <field>
              <name>RVP</name>
              <description>It controls the resume period when the core resumes from suspend</description>
              <bitRange>[31:26]</bitRange>
            </field>
          </fields>
        </register>

        <!-- DCTL: Device Control Register -->
        <register>
        	<name>DCTL</name>
          <description>Device Control Register</description>
          <addressOffset>0x804</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- RWS: Remote Wakeup Signaling -->
            <field>
              <name>RWS</name>
              <description>If set, the core initiates remote signaling to wake the USB hosts</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- SD: Soft Disconnect -->
            <field>
              <name>SD</name>
              <description>If set, generates a device disconnect event to the USB host</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- GNPINS: Global Non-periodic IN NAK Status -->
            <field>
              <name>GNPINS</name>
              <description>A NAK handshake is sent out on all non-periodic IN endpoints, irrespective of the data availability in the transmit FIFO.</description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
            </field>

            <!-- GONS: Global OUT NAK Status -->
            <field>
              <name>GONS</name>
              <description>No data is written to the RxFIFO, irrespective of space availability..</description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
            </field>

            <!-- TC: Test Control -->
            <field>
              <name>TC</name>
              <description>Test Control</description>
              <bitRange>[6:4]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>TC_TEST_DISABLE</name>
                  <description>Test mode disable</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TC_TEST_J</name>
                  <description>Test_J mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TC_TEST_K</name>
                  <description>Test_K mode</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TC_TEST_SE0_NAK</name>
                  <description>Test_SE0_NAK mode</description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TC_TEST_PACKET</name>
                  <description>Test_Packet mode</description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TC_TEST_FORCE_ENABLE</name>
                  <description>Test_Force_Enable</description>
                  <value>5</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- SGNPIN: Set Global Non-periodic IN NAK -->
            <field>
              <name>SGNPIN</name>
              <description>A write to this field sets the Global Non-periodic IN NAK</description>
              <bitRange>[7:7]</bitRange>
              <access>write-only</access>
            </field>

            <!-- CGNPIN: Clear Global Non-periodic IN NAK -->
            <field>
              <name>CGNPIN</name>
              <description>A write to this field clears the Global Non-periodic IN NAK</description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
            </field>

            <!-- SGON: Set Global OUT NAK -->
            <field>
              <name>SGON</name>
              <description>A write to this field sets the Global OUT NAK</description>
              <bitRange>[9:9]</bitRange>
              <access>write-only</access>
            </field>

            <!-- CGON: Clear Global OUT NAK -->
            <field>
              <name>CGON</name>
              <description>A write to this field sets the Global OUT NAK.</description>
              <bitRange>[10:10]</bitRange>
              <access>write-only</access>
            </field>

            <!-- POPD: Power-On Programming Done -->
            <field>
              <name>POPD</name>
              <description>Power-On Programming Done</description>
              <bitRange>[11:11]</bitRange>
            </field>

            <!-- GMC: Global Multi Count -->
            <field>
              <name>GMC</name>
              <description>GMC must be programmed only once after initialization. the number of packets to be serviced for that end point before moving to the next end point</description>
              <bitRange>[13:12]</bitRange>
            </field>

            <!-- IFNIE: Ignore frame number for isochronous endpoints -->
            <field>
              <name>IFNIE</name>
              <description>Ignore frame number for isochronous endpoints</description>
              <bitRange>[15:15]</bitRange>
            </field>

            <!-- NBE: NAK on Babble Error -->
            <field>
              <name>NBE</name>
              <description>Set NAK automatically on babble</description>
              <bitRange>[16:16]</bitRange>
            </field>

            <!-- ECBNA: Enable Continue on BNA -->
            <field>
              <name>ECBNA</name>
              <description>After receiving BNA interrupt, the core disables the endpoint</description>
              <bitRange>[17:17]</bitRange>
            </field>
          </fields>
        </register>

        <!-- DSTS: Device Status Register -->
        <register>
        	<name>DSTS</name>
          <description>Device Status Register</description>
          <addressOffset>0x808</addressOffset>
          <size>32</size>
          <access>read-only</access>

          <fields>
            <!-- SUSPEND: Suspend Status -->
            <field>
              <name>SUSPEND</name>
              <description>this bit is set as long as a Suspend condition is detected on the USB</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- SPEED: Enumerated Speed -->
            <field>
              <name>SPEED</name>
              <description>Indicates the speed at which the DWC_otg core has come up after speed detection through a chirp sequence</description>
              <bitRange>[2:1]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SPEED_HIGH</name>
                  <description>High speed (USB 2.0 PHY clock is 30 MHz or 60 MHz)</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPEED_FULL</name>
                  <description>Full speed (USB 2.0 PHY clock is 30 MHz or 60 MHz)</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPEED_LOW</name>
                  <description>Low speed (USB 1.1 transceiver clock is 6 MHz).</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPEED_FULL_48M</name>
                  <description>Full speed (USB 1.1 transceiver clock is 48 MHz).</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- EE: Erratic Error -->
            <field>
              <name>EE</name>
              <description>reason of suspend state</description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- SOFFN: Frame or Microframe Number of the Received SOF -->
            <field>
              <name>SOFFN</name>
              <description>Frame or Microframe Number of the Received SOF</description>
              <bitRange>[21:8]</bitRange>
            </field>

            <!-- DLSDP: Device Line Status -->
            <field>
              <name>DLSDP</name>
              <description>Logic level of D+</description>
              <bitRange>[22:22]</bitRange>
            </field>

            <!-- DLSDN: Device Line Status -->
            <field>
              <name>DLSDN</name>
              <description>Logic level of D-</description>
              <bitRange>[23:23]</bitRange>
            </field>
          </fields>
        </register>

        <!-- DIEPEN: Device IN Endpoint Common Interrupt Enable Register -->
        <register>
        	<name>DIEPEN</name>
          <description>Device IN Endpoint Common Interrupt Enable Register</description>
          <addressOffset>0x810</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- TC: Transfer Completed Interrupt -->
            <field>
              <name>TC</name>
              <description>Transfer Completed Interrupt</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- ED: Endpoint Disabled Interrupt -->
            <field>
              <name>ED</name>
              <description>Endpoint Disabled Interrupt</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- AHB_ERR: AHB Error Interrupt -->
            <field>
              <name>AHB_ERR</name>
              <description>AHB Error Interrupt</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- TIMEOUT: Timeout Condition Mask (TimeOUTMsk) (Non-isochronous endpoints) -->
            <field>
              <name>TIMEOUT</name>
              <description>Timeout Condition(Non-isochronous endpoints)</description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- ITRWTFE: IN Token Received When TxFIFO Empty -->
            <field>
              <name>ITRWTFE</name>
              <description>IN Token Received When TxFIFO Empty </description>
              <bitRange>[4:4]</bitRange>
            </field>

            <!-- ITRWEPM: IN Token received with EP Mismatch -->
            <field>
              <name>ITRWEPM</name>
              <description>IN Token received with EP Mismatch</description>
              <bitRange>[5:5]</bitRange>
            </field>

            <!-- IENE: IN Endpoint NAK Effective -->
            <field>
              <name>IENE</name>
              <description>IN Endpoint NAK Effective</description>
              <bitRange>[6:6]</bitRange>
            </field>

            <!-- FU: Fifo Underrun -->
            <field>
              <name>FU</name>
              <description>Fifo Underrun</description>
              <bitRange>[8:8]</bitRange>
            </field>

            <!-- BNA: BNA Interrupt -->
            <field>
              <name>BNA</name>
              <description>BNA Interrupt</description>
              <bitRange>[9:9]</bitRange>
            </field>

            <!-- NAK: NAK interrupt -->
            <field>
              <name>NAK</name>
              <description>NAK interrupt</description>
              <bitRange>[13:13]</bitRange>
            </field>
          </fields>
        </register>

        <!-- DOEPEN: Device OUT Endpoint Common Interrupt Enable Register -->
        <register>
        	<name>DOEPEN</name>
          <description>Device OUT Endpoint Common Interrupt Enable Register</description>
          <addressOffset>0x814</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- TC: Transfer Completed Interrupt -->
            <field>
              <name>TC</name>
              <description>Transfer Completed Interrupt</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- ED: Endpoint Disabled Interrupt -->
            <field>
              <name>ED</name>
              <description>Endpoint Disabled Interrupt</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- AHB_ERR: AHB Error Interrupt -->
            <field>
              <name>AHB_ERR</name>
              <description>AHB Error Interrupt</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- SPD: SETUP Phase Done -->
            <field>
              <name>SPD</name>
              <description>SETUP Phase Done, Applies to control endpoints only</description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- OTRWED: OUT Token Received when Endpoint Disabled -->
            <field>
              <name>OTRWED</name>
              <description>OUT Token Received when Endpoint Disabled, Applies to control OUT endpoints only </description>
              <bitRange>[4:4]</bitRange>
            </field>

            <!-- SPR: Status Phase Received -->
            <field>
              <name>SPR</name>
              <description>Status Phase Received</description>
              <bitRange>[5:5]</bitRange>
            </field>

            <!-- BTBSPR: Back-to-Back SETUP Packets Received -->
            <field>
              <name>BTBSPR</name>
              <description>Back-to-Back SETUP Packets Received, Applies to control OUT endpoints only</description>
              <bitRange>[6:6]</bitRange>
            </field>

            <!-- OPE: OUT Packet Error -->
            <field>
              <name>OPE</name>
              <description>OUT Packet Error</description>
              <bitRange>[8:8]</bitRange>
            </field>

            <!-- BNA: BNA Interrupt -->
            <field>
              <name>BNA</name>
              <description>BNA Interrupt</description>
              <bitRange>[9:9]</bitRange>
            </field>

            <!-- BE: Babble Error interrupt -->
            <field>
              <name>BE</name>
              <description>Babble Error interrupt</description>
              <bitRange>[12:12]</bitRange>
            </field>

            <!-- NAK: NAK interrupt -->
            <field>
              <name>NAK</name>
              <description>NAK interrupt</description>
              <bitRange>[13:13]</bitRange>
            </field>

						<!-- NYET: NYET interrupt -->
            <field>
              <name>NYET</name>
              <description>NYET interrupt</description>
              <bitRange>[14:14]</bitRange>
            </field>
          </fields>
        </register>

        <!-- DAINT: Device All Channels Interrupt Register -->
        <register>
        	<name>DAINT</name>
          <description>Device All Channels Interrupt Register</description>
          <addressOffset>0x818</addressOffset>
          <size>32</size>
          <access>read-only</access>

          <fields>
            <!-- IN_INT: IN Endpoint Interrupt -->
            <field>
              <name>INT</name>
              <description>IN Endpoint Interrupt Bits, from 0 to 15.</description>
              <bitRange>[15:0]</bitRange>
            </field>

            <!-- OUT_INT: OUT Endpoint Interrupt -->
            <field>
              <name>OUT_INT</name>
              <description>OUT Endpoint Interrupt Bits, from 0 to 15.</description>
              <bitRange>[31:16]</bitRange>
            </field>
          </fields>
        </register>

        <!-- DAINT_EN: Device All Channels Interrupt Enable Register -->
        <register>
        	<name>DAINT_EN</name>
          <description>Device All Channels Interrupt Enable Register</description>
          <addressOffset>0x81C</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- IN_EN: IN EP Interrupt Enable -->
            <field>
              <name>IN_EN</name>
              <description>IN EP Interrupt Enable, from 0 to 15.</description>
              <bitRange>[15:0]</bitRange>
            </field>

            <!-- OUT_EN: OUT EP Interrupt Enable -->
            <field>
              <name>OUT_EN</name>
              <description>OUT EP Interrupt Enable, from 0 to 15.</description>
              <bitRange>[31:16]</bitRange>
            </field>
          </fields>
        </register>

        <!-- DTHRCTL: Device Threshold Control Register -->
        <register>
        	<name>DTHRCTL</name>
          <description>Device Threshold Control Register</description>
          <addressOffset>0x830</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- NISOINETE: Non-ISO IN Endpoints Threshold Enable -->
            <field>
              <name>NISOINETE</name>
              <description>Non-ISO IN Endpoints Threshold Enable</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- ISOINETE: ISO IN Endpoints Threshold Enable -->
            <field>
              <name>ISOINETE</name>
              <description>ISO IN Endpoints Threshold Enable</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- TTL: Transmit Threshold Length -->
            <field>
              <name>TTL</name>
              <description>This field specifies Transmit thresholding size in DWORDS</description>
              <bitRange>[10:2]</bitRange>
            </field>

            <!-- ATR: AHB Threshold Ratio -->
            <field>
              <name>ATR</name>
              <description>These bits define the ratio between the AHB threshold and the MAC threshold for the transmit path only.</description>
              <bitRange>[12:11]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ATR_MAC_THRES_1_1</name>
                  <description>AHB threshold = MAC threshold</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ATR_MAC_THRES_1_2</name>
                  <description>AHB threshold = MAC threshold / 2</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ATR_MAC_THRES_1_4</name>
                  <description>AHB threshold = MAC threshold / 4</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ATR_MAC_THRES_1_8</name>
                  <description>AHB threshold = MAC threshold / 8</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- RTE: Receive Threshold Enable -->
            <field>
              <name>RTE</name>
              <description>If set, the core enables thresholding in the receive direction</description>
              <bitRange>[16:16]</bitRange>
            </field>

            <!-- RTL: Receive Threshold Length -->
            <field>
              <name>RTL</name>
              <description>This field specifies Receive thresholding size in DWORDS</description>
              <bitRange>[25:17]</bitRange>
            </field>

            <!-- APE: Arbiter Parking Enable -->
            <field>
              <name>APE</name>
              <description>This bit controls internal DMA arbiter parking for IN endpoints</description>
              <bitRange>[27:27]</bitRange>
            </field>
          </fields>
        </register>

        <!-- DIEPEMPEN: Device IN Endpoint FIFO Empty Interrupt Enable Register -->
        <register>
        	<name>DIEPEMPEN</name>
          <description>Device IN Endpoint FIFO Empty Interrupt Enable Register</description>
          <addressOffset>0x834</addressOffset>
          <size>16</size>
          <access>read-write</access>
        </register>

        <!-- DIEPCTL0: Device Control IN Endpoint 0 Control Register -->
        <register>
        	<name>DIEPCTL0</name>
          <description>Device Control IN Endpoint 0 Control Register</description>
          <addressOffset>0x900</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
          	<!-- MPS: Maximum Packet Size -->
            <field>
              <name>MPS</name>
              <description>Indicates the maximum packet size of the associated endpoint, applies to IN and OUT endpoints</description>
              <bitRange>[1:0]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MPS_64</name>
                  <description>64 Bytes</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MPS_32</name>
                  <description>32 Bytes</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MPS_16</name>
                  <description>16 Bytes</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MPS_8</name>
                  <description>8 Bytes</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- USBAE: USB Active Endpoint -->
            <field>
              <name>USBAE</name>
              <description>Always 1, indicating that control endpoint 0 is always active in all configurations and interfaces</description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
            </field>

            <!-- NAK: NAK Status -->
            <field>
              <name>NAK</name>
              <description>The core is transmitting NAK handshakes on this endpoint</description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
            </field>

            <!-- EP_TYPE: Endpoint Type -->
            <field>
              <name>EP_TYPE</name>
              <description>Hardcoded to 00 for control</description>
              <bitRange>[19:18]</bitRange>
              <access>read-only</access>
            </field>

            <!-- STALL: STALL Handshake -->
            <field>
              <name>STALL</name>
              <description>The application sets this bit, and the core clears it when a SETUP token is received for this endpoint</description>
              <bitRange>[21:21]</bitRange>
            </field>

            <!-- TX_FIFO_NUM: TxFIFO Number -->
            <field>
              <name>TX_FIFO_NUM</name>
              <description>TxFIFO Number</description>
              <bitRange>[25:22]</bitRange>
            </field>

            <!-- CNAK: Clear NAK -->
            <field>
              <name>CNAK</name>
              <description>A write to this bit clears the NAK bit for the endpoint</description>
              <bitRange>[26:26]</bitRange>
              <access>write-only</access>
            </field>

            <!-- SNAK: Set NAK -->
            <field>
              <name>SNAK</name>
              <description>A write to this bit sets the NAK bit for the endpoint</description>
              <bitRange>[27:27]</bitRange>
              <access>write-only</access>
            </field>

            <!-- EPD: Endpoint Disable -->
            <field>
              <name>EPD</name>
              <description>The application sets this bit to stop transmitting data on an endpoint even before the transfer for that endpoint is complete</description>
              <bitRange>[30:30]</bitRange>
            </field>

            <!-- EPE: Endpoint Enable -->
            <field>
              <name>EPE</name>
              <description>the descriptor structure and data buffer with data ready to transmit is setup</description>
              <bitRange>[31:31]</bitRange>
            </field>
          </fields>
        </register>

        <!-- DIEPCTL: Device IN Endpoint N Control Register -->
        <register>
        	<dim>15</dim>
          <dimIncrement>32</dimIncrement>
          <dimIndex>1-15</dimIndex>
        	<name>DIEPCTL%s</name>
          <description>Device IN Endpoint N Control Register</description>
          <addressOffset>0x920</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- MPS: Maximum Packet Size -->
            <field>
              <name>MPS</name>
              <description>Indicates the maximum packet size of the associated endpoint</description>
              <bitRange>[10:0]</bitRange>
            </field>

            <!-- UAE: USB Active Endpoint -->
            <field>
              <name>UAE</name>
              <description>Indicates whether this endpoint is active</description>
              <bitRange>[15:15]</bitRange>
            </field>

            <!-- DPID: Endpoint Data PID -->
            <field>
              <name>DPID</name>
              <description>Endpoint Data PID</description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
            </field>

            <!-- NAK: NAK Status -->
            <field>
              <name>NAK</name>
              <description>The core is transmitting NAK handshakes on this endpoint if set</description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
            </field>

            <!-- EP_TYPE: Endpoint Type -->
            <field>
              <name>EP_TYPE</name>
              <description>Indicates the transfer type selected.</description>
              <bitRange>[19:18]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EP_TYPE_CTRL</name>
                  <description>Control</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>EP_TYPE_ISOCHRONOUS</name>
                  <description>Isochronous</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>EP_TYPE_BULK</name>
                  <description>bulk</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>EP_TYPE_INT</name>
                  <description>Interrupt</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- STALL: STALL Handshake -->
            <field>
              <name>STALL</name>
              <description>To non-control, non-isochronous IN endpoints, stall all tokens. To control endpoints, response an ACK</description>
              <bitRange>[21:21]</bitRange>
            </field>

			<!-- TX_FIFO_NUM: TxFIFO Number -->
            <field>
              <name>TX_FIFO_NUM</name>
              <description>TxFIFO Number</description>
              <bitRange>[25:22]</bitRange>
            </field>

            <!-- CNAK: Clear NAK -->
            <field>
              <name>CNAK</name>
              <description>A write to this bit clears the NAK bit for the endpoint</description>
              <bitRange>[26:26]</bitRange>
              <access>write-only</access>
            </field>

            <!-- SNAK: Set NAK -->
            <field>
              <name>SNAK</name>
              <description>A write to this bit sets the NAK bit for the endpoint</description>
              <bitRange>[27:27]</bitRange>
              <access>write-only</access>
            </field>

            <!-- SET_D0_PID: Set DATA0 PID -->
            <field>
              <name>SET_D0_PID</name>
              <description>Set DATA0 PID</description>
              <bitRange>[28:28]</bitRange>
              <access>write-only</access>
            </field>

            <!-- SET_D1_PID: Set DATA1 PID -->
            <field>
              <name>SET_D1_PID</name>
              <description>Set DATA1 PID</description>
              <bitRange>[29:29]</bitRange>
              <access>write-only</access>
            </field>

            <!-- EPD: Endpoint Disable -->
            <field>
              <name>EPD</name>
              <description>The application sets this bit to stop transmitting data on an endpoint even before the transfer for that endpoint is complete</description>
              <bitRange>[30:30]</bitRange>
            </field>

            <!-- EPE: Endpoint Enable -->
            <field>
              <name>EPE</name>
              <description>the descriptor structure and data buffer with data ready to transmit is setup</description>
              <bitRange>[31:31]</bitRange>
            </field>
          </fields>
        </register>

        <!-- DIEPINT: Device IN Endpoint-n Interrupt Register -->
        <register>
        	<dim>16</dim>
          <dimIncrement>32</dimIncrement>
          <dimIndex>0-15</dimIndex>
        	<name>DIEPINT%s</name>
          <description>Device IN Endpoint-n Interrupt Register</description>
          <addressOffset>0x908</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- TC: Transfer Completed -->
            <field>
              <name>TC</name>
              <description>Transfer completed normally without any errors</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- EPD: Endpoint Disabled Interrupt -->
            <field>
              <name>EPD</name>
              <description>Endpoint Disabled Interrupt</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- AHB_ERR: AHB error -->
            <field>
              <name>AHB_ERR</name>
              <description>there is an AHB error during AHB read/write </description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- TIMEOUT: Timeout Condition -->
            <field>
              <name>TIMEOUT</name>
              <description>a timeout condition on the USB for the last IN token on this endpoint</description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- INTRWTFE: IN Token Received When TxFIFO is Empty -->
            <field>
              <name>INTRWTFE</name>
              <description>IN Token Received When TxFIFO is Empty</description>
              <bitRange>[4:4]</bitRange>
            </field>

            <!-- INTRWEPM: IN Token Received with EP Mismatch -->
            <field>
              <name>INTRWEPM</name>
              <description>IN Token Received with EP Mismatch</description>
              <bitRange>[5:5]</bitRange>
            </field>

            <!-- INEPNE: IN Endpoint NAK Effective -->
            <field>
              <name>INEPNE</name>
              <description>IN Endpoint NAK Effective</description>
              <bitRange>[6:6]</bitRange>
            </field>

            <!-- TFE: Transmit FIFO Empty -->
            <field>
              <name>TFE</name>
              <description>either half or completely empty depending on GAHBCFG.NPTxFEmpLvl</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>

            <!-- TFU: Transmit FIFO Underrun -->
            <field>
              <name>TFU</name>
              <description>Transmit FIFO Underrun</description>
              <bitRange>[8:8]</bitRange>
            </field>

            <!-- BNA: Buffer Not Available -->
            <field>
              <name>BNA</name>
              <description>Buffer Not Available</description>
              <bitRange>[9:9]</bitRange>
            </field>

            <!-- BE: Babble Error -->
            <field>
              <name>BE</name>
              <description>Babble Error</description>
              <bitRange>[12:12]</bitRange>
            </field>

            <!-- NAK: NAK interrupt -->
            <field>
              <name>NAK</name>
              <description>a NAK is transmitted</description>
              <bitRange>[13:13]</bitRange>
            </field>

            <!-- NYET: NYET interrupt -->
            <field>
              <name>NYET</name>
              <description>a NYET response is transmitted</description>
              <bitRange>[14:14]</bitRange>
            </field>
          </fields>
        </register>

        <!-- DIEPTSIZ0: Device IN Endpoint 0 Transfer Size Register -->
        <register>
        	<name>DIEPTSIZ0</name>
          <description>Device IN Endpoint 0 Transfer Size Register</description>
          <addressOffset>0x910</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- SIZE: Transfer Size -->
            <field>
              <name>SIZE</name>
              <description>Indicates the transfer size in bytes for endpoint 0</description>
              <bitRange>[6:0]</bitRange>
            </field>

            <!-- PACKET_CNT: Packet Count -->
            <field>
              <name>PACKET_CNT</name>
              <description>the total number of USB packets</description>
              <bitRange>[20:19]</bitRange>
            </field>
          </fields>
        </register>

        <!-- DIEPTSIZ: Device IN Endpoint-n Transfer Size Register -->
        <register>
        	<dim>15</dim>
          <dimIncrement>32</dimIncrement>
          <dimIndex>1-15</dimIndex>
        	<name>DIEPTSIZ%s</name>
          <description>Device IN Endpoint-n Transfer Size Register</description>
          <addressOffset>0x930</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- SIZE: Transfer Size -->
            <field>
              <name>SIZE</name>
              <description>Indicates the transfer size in bytes for endpoint 0</description>
              <bitRange>[18:0]</bitRange>
            </field>

            <!-- PACKET_CNT: Packet Count -->
            <field>
              <name>PACKET_CNT</name>
              <description>the total number of USB packets</description>
              <bitRange>[28:19]</bitRange>
            </field>

            <!-- MC: Multi Count -->
            <field>
              <name>MC</name>
              <description>the number of packets per microframe to periodic IN endpoints. The number of packets must be fetched per non-periodic IN endpoints</description>
              <bitRange>[30:29]</bitRange>
            </field>
          </fields>
        </register>

        <!-- DIEPDMA: Device IN Endpoint-n DMA Address Register -->
        <register>
        	<dim>16</dim>
          <dimIncrement>32</dimIncrement>
          <dimIndex>0-15</dimIndex>
        	<name>DIEPDMA%s</name>
          <description>Device IN Endpoint-n DMA Address Register</description>
          <addressOffset>0x914</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>

        <!-- DTXFSA: Device IN Endpoint-n Transmit FIFO Space Avail Register -->
        <register>
        	<dim>16</dim>
          <dimIncrement>32</dimIncrement>
          <dimIndex>0-15</dimIndex>
        	<name>DTXFSA%s</name>
          <description>Device IN Endpoint-n Transmit FIFO Space Avail Register</description>
          <addressOffset>0x918</addressOffset>
          <size>16</size>
          <access>read-write</access>
        </register>

        <!-- DIEPDMAB: Device IN Endpoint-n DMA Buffer Address Register -->
        <register>
        	<dim>16</dim>
          <dimIncrement>32</dimIncrement>
          <dimIndex>0-15</dimIndex>
        	<name>DIEPDMAB%s</name>
          <description>Device IN Endpoint-n DMA Buffer Address Register</description>
          <addressOffset>0x91C</addressOffset>
          <size>32</size>
          <access>read-only</access>
        </register>

        <!-- DOEPCTL0: Device Control OUT Endpoint 0 Control Register -->
        <register>
        	<name>DOEPCTL0</name>
          <description>Device Control OUT Endpoint 0 Control Register</description>
          <addressOffset>0xB00</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
          	<!-- MPS: Maximum Packet Size -->
            <field>
              <name>MPS</name>
              <description>Indicates the maximum packet size of the associated endpoint, applies to IN and OUT endpoints</description>
              <bitRange>[1:0]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MPS_64</name>
                  <description>64 Bytes</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MPS_32</name>
                  <description>32 Bytes</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MPS_16</name>
                  <description>16 Bytes</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MPS_8</name>
                  <description>8 Bytes</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- USBAE: USB Active Endpoint -->
            <field>
              <name>USBAE</name>
              <description>Always 1, indicating that control endpoint 0 is always active in all configurations and interfaces</description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
            </field>

            <!-- NAK: NAK Status -->
            <field>
              <name>NAK</name>
              <description>The core is transmitting NAK handshakes on this endpoint</description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
            </field>

            <!-- EP_TYPE: Endpoint Type -->
            <field>
              <name>EP_TYPE</name>
              <description>Hardcoded to 00 for control</description>
              <bitRange>[19:18]</bitRange>
              <access>read-only</access>
            </field>

			<!-- SNOOP: Snoop Mode -->
            <field>
              <name>SNOOP</name>
              <description>does not check if the OUT packets are correct before transferring</description>
              <bitRange>[20:20]</bitRange>
            </field>

            <!-- STALL: STALL Handshake -->
            <field>
              <name>STALL</name>
              <description>The application sets this bit, and the core clears it when a SETUP token is received for this endpoint</description>
              <bitRange>[21:21]</bitRange>
            </field>

            <!-- CNAK: Clear NAK -->
            <field>
              <name>CNAK</name>
              <description>A write to this bit clears the NAK bit for the endpoint</description>
              <bitRange>[26:26]</bitRange>
              <access>write-only</access>
            </field>

            <!-- SNAK: Set NAK -->
            <field>
              <name>SNAK</name>
              <description>A write to this bit sets the NAK bit for the endpoint</description>
              <bitRange>[27:27]</bitRange>
              <access>write-only</access>
            </field>

            <!-- EPD: Endpoint Disable -->
            <field>
              <name>EPD</name>
              <description>The application cannot disable control OUT endpoint 0</description>
              <bitRange>[30:30]</bitRange>
              <access>read-only</access>
            </field>

            <!-- EPE: Endpoint Enable -->
            <field>
              <name>EPE</name>
              <description>the descriptor structure and data buffer with data ready to receive data is setup</description>
              <bitRange>[31:31]</bitRange>
            </field>
          </fields>
        </register>

        <!-- DOEPCTL: Device OUT Endpoint N Control Register -->
        <register>
        	<dim>15</dim>
          <dimIncrement>32</dimIncrement>
          <dimIndex>1-15</dimIndex>
        	<name>DOEPCTL%s</name>
          <description>Device OUT Endpoint N Control Register</description>
          <addressOffset>0xB20</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- MPS: Maximum Packet Size -->
            <field>
              <name>MPS</name>
              <description>Indicates the maximum packet size of the associated endpoint</description>
              <bitRange>[10:0]</bitRange>
            </field>

            <!-- UAE: USB Active Endpoint -->
            <field>
              <name>UAE</name>
              <description>Indicates whether this endpoint is active</description>
              <bitRange>[15:15]</bitRange>
            </field>

            <!-- DPID: Endpoint Data PID -->
            <field>
              <name>DPID</name>
              <description>Endpoint Data PID</description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
            </field>

            <!-- NAK: NAK Status -->
            <field>
              <name>NAK</name>
              <description>The core is transmitting NAK handshakes on this endpoint if set</description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
            </field>

            <!-- EP_TYPE: Endpoint Type -->
            <field>
              <name>EP_TYPE</name>
              <description>Indicates the transfer type selected.</description>
              <bitRange>[19:18]</bitRange>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EP_TYPE_CTRL</name>
                  <description>Control</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>EP_TYPE_ISOCHRONOUS</name>
                  <description>Isochronous</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>EP_TYPE_BULK</name>
                  <description>bulk</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>EP_TYPE_INT</name>
                  <description>Interrupt</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>

            <!-- SNOOP: Snoop Mode -->
            <field>
              <name>EC</name>
              <description>Doesn't check the correctness of OUT packets before transferring</description>
              <bitRange>[20:20]</bitRange>
            </field>

            <!-- STALL: STALL Handshake -->
            <field>
              <name>STALL</name>
              <description>To non-control, non-isochronous OUT endpoints, stall all tokens. To control endpoints, response an ACK</description>
              <bitRange>[21:21]</bitRange>
            </field>

            <!-- CNAK: Clear NAK -->
            <field>
              <name>CNAK</name>
              <description>A write to this bit clears the NAK bit for the endpoint</description>
              <bitRange>[26:26]</bitRange>
              <access>write-only</access>
            </field>

            <!-- SNAK: Set NAK -->
            <field>
              <name>SNAK</name>
              <description>A write to this bit sets the NAK bit for the endpoint</description>
              <bitRange>[27:27]</bitRange>
              <access>write-only</access>
            </field>

            <!-- SET_D0_PID: Set DATA0 PID -->
            <field>
              <name>SET_D0_PID</name>
              <description>Set DATA0 PID</description>
              <bitRange>[28:28]</bitRange>
              <access>write-only</access>
            </field>

            <!-- SET_D1_PID: Set DATA1 PID -->
            <field>
              <name>SET_D1_PID</name>
              <description>Set DATA1 PID</description>
              <bitRange>[29:29]</bitRange>
              <access>write-only</access>
            </field>

            <!-- EPD: Endpoint Disable -->
            <field>
              <name>EPD</name>
              <description>The application sets this bit to stop receiving data on an endpoint even before the transfer for that endpoint is complete</description>
              <bitRange>[30:30]</bitRange>
            </field>

            <!-- EPE: Endpoint Enable -->
            <field>
              <name>EPE</name>
              <description>the descriptor structure and data buffer with data ready to receive data is setup</description>
              <bitRange>[31:31]</bitRange>
            </field>
          </fields>
        </register>

        <!-- DOEPINT: Device OUT Endpoint-n Interrupt Register -->
        <register>
        	<dim>16</dim>
          <dimIncrement>32</dimIncrement>
          <dimIndex>0-15</dimIndex>
        	<name>DOEPINT%s</name>
          <description>Device OUT Endpoint-n Interrupt Register</description>
          <addressOffset>0xB08</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- TC: Transfer Completed -->
            <field>
              <name>TC</name>
              <description>Transfer completed normally without any errors</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- EPD: Endpoint Disabled Interrupt -->
            <field>
              <name>EPD</name>
              <description>Endpoint Disabled Interrupt</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- AHB_ERR: AHB error -->
            <field>
              <name>AHB_ERR</name>
              <description>there is an AHB error during AHB read/write </description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- SETUP: SETUP Phase Done -->
            <field>
              <name>SETUP</name>
              <description>Only for Control OUT endpoints, the SETUP phase for the control endpoint is complete</description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- OUTTRWEPD: OUT Token Received When Endpoint Disabled -->
            <field>
              <name>OUTTRWEPD</name>
              <description>OUT Token Received When Endpoint Disabled</description>
              <bitRange>[4:4]</bitRange>
            </field>

            <!-- SPRFCW: Status Phase Received For Control Write -->
            <field>
              <name>SPRFCW</name>
              <description>Only for Control OUT endpoints, the host has switched from data phase to the status phase of a Control Write transfer</description>
              <bitRange>[5:5]</bitRange>
            </field>

            <!-- B2BSETUPPR: Back-to-Back SETUP Packets Received -->
            <field>
              <name>B2BSETUPPR</name>
              <description>to Control OUT endpoints only, received more than three back-to-back SETUP packets for this particular endpoint</description>
              <bitRange>[6:6]</bitRange>
            </field>

            <!-- TFE: Transmit FIFO Empty -->
            <field>
              <name>TFE</name>
              <description>either half or completely empty depending on GAHBCFG.NPTxFEmpLvl</description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
            </field>

            <!-- OUTPE: OUT Packet Error -->
            <field>
              <name>OUTPE</name>
              <description>an overflow or a CRC error for an OUT packet</description>
              <bitRange>[8:8]</bitRange>
            </field>

            <!-- BNA: Buffer Not Available -->
            <field>
              <name>BNA</name>
              <description>Buffer Not Available</description>
              <bitRange>[9:9]</bitRange>
            </field>

            <!-- BE: Babble Error -->
            <field>
              <name>BE</name>
              <description>Babble Error</description>
              <bitRange>[12:12]</bitRange>
            </field>

            <!-- NAK: NAK interrupt -->
            <field>
              <name>NAK</name>
              <description>a NAK is transmitted</description>
              <bitRange>[13:13]</bitRange>
            </field>

            <!-- NYET: NYET interrupt -->
            <field>
              <name>NYET</name>
              <description>a NYET response is transmitted</description>
              <bitRange>[14:14]</bitRange>
            </field>
          </fields>
        </register>

        <!-- DOEPTSIZ0: Device OUT Endpoint 0 Transfer Size Register -->
        <register>
        	<name>DOEPTSIZ0</name>
          <description>Device OUT Endpoint 0 Transfer Size Register</description>
          <addressOffset>0xB10</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- SIZE: Transfer Size -->
            <field>
              <name>SIZE</name>
              <description>Indicates the transfer size in bytes for endpoint 0</description>
              <bitRange>[6:0]</bitRange>
            </field>

            <!-- PACKET_CNT: Packet Count -->
            <field>
              <name>PACKET_CNT</name>
              <description>This field is decremented to zero after a packet is written into the RxFIFO</description>
              <bitRange>[19:19]</bitRange>
            </field>

            <!-- SETUP_CNT: SETUP Packet Count -->
            <field>
              <name>SETUP_CNT</name>
              <description>the number of back-to-back SETUP data packets the endpoint can receive</description>
              <bitRange>[30:29]</bitRange>
            </field>
          </fields>
        </register>

        <!-- DOEPTSIZ: Device OUT Endpoint-n Transfer Size Register -->
        <register>
        	<dim>15</dim>
          <dimIncrement>32</dimIncrement>
          <dimIndex>1-15</dimIndex>
        	<name>DOEPTSIZ%s</name>
          <description>Device OUT Endpoint-n Transfer Size Register</description>
          <addressOffset>0xB30</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- SIZE: Transfer Size -->
            <field>
              <name>SIZE</name>
              <description>Indicates the transfer size in bytes for endpoint 0</description>
              <bitRange>[18:0]</bitRange>
            </field>

            <!-- PACKET_CNT: Packet Count -->
            <field>
              <name>PACKET_CNT</name>
              <description>the total number of USB packets</description>
              <bitRange>[28:19]</bitRange>
            </field>

            <!-- SETUPCNT_PID: SETUP Packet Count or Received Data PID -->
            <field>
              <name>SETUPCNT_PID</name>
              <description>To control OUT Endpoints only, back-to-back SETUP data packets. To isochronous OUT endpoints, data PID received in the last packet</description>
              <bitRange>[30:29]</bitRange>
            </field>
          </fields>
        </register>

        <!-- DOEPDMA: Device OUT Endpoint-n DMA Address Register -->
        <register>
        	<dim>16</dim>
          <dimIncrement>32</dimIncrement>
          <dimIndex>0-15</dimIndex>
        	<name>DOEPDMA%s</name>
          <description>Device OUT Endpoint-n DMA Address Register</description>
          <addressOffset>0xB14</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>

        <!-- DOEPDMAB: Device OUT Endpoint-n DMA Buffer Address Register -->
        <register>
        	<dim>16</dim>
          <dimIncrement>32</dimIncrement>
          <dimIndex>0-15</dimIndex>
        	<name>DOEPDMAB%s</name>
          <description>Device OUT Endpoint-n DMA Buffer Address Register</description>
          <addressOffset>0xB1C</addressOffset>
          <size>32</size>
          <access>read-only</access>
        </register>
      </registers>
    </peripheral>

    <!-- GLOBAL_CTRL -->
    <peripheral>
      <name>GLOBAL_CTRL</name>
      <version>1.0</version>
      <description>GLOBAL_CTRL</description>
      <groupName>GLOBAL_CTRL</groupName>
			<baseAddress>0x41007010</baseAddress>
      <access>read-write</access>
      <size>32</size>

      <addressBlock>
        <offset>0</offset>
        <size>0x438</size>
        <usage>registers</usage>
      </addressBlock>

			<interrupt>
        <name>FP0_INT</name>
        <value>5</value>
      </interrupt>

      <interrupt>
        <name>FP1_INT</name>
        <value>6</value>
      </interrupt>

      <interrupt>
        <name>FP2_INT</name>
        <value>7</value>
      </interrupt>

			<interrupt>
        <name>FP3_INT</name>
        <value>8</value>
      </interrupt>

			<interrupt>
        <name>FP4_INT</name>
        <value>9</value>
      </interrupt>

      <interrupt>
        <name>FP5_INT</name>
        <value>10</value>
      </interrupt>

      <interrupt>
        <name>FP6_INT</name>
        <value>11</value>
      </interrupt>

			<interrupt>
        <name>FP7_INT</name>
        <value>12</value>
      </interrupt>

      <interrupt>
        <name>FP8_INT</name>
        <value>13</value>
      </interrupt>

      <interrupt>
        <name>FP9_INT</name>
        <value>14</value>
      </interrupt>

      <interrupt>
        <name>FP10_INT</name>
        <value>15</value>
      </interrupt>

			<interrupt>
        <name>FP11_INT</name>
        <value>16</value>
      </interrupt>

			<interrupt>
        <name>FP12_INT</name>
        <value>17</value>
      </interrupt>

      <interrupt>
        <name>FP13_INT</name>
        <value>18</value>
      </interrupt>

      <interrupt>
        <name>FP14_INT</name>
        <value>19</value>
      </interrupt>

			<interrupt>
        <name>FP15_INT</name>
        <value>20</value>
      </interrupt>

			<interrupt>
        <name>PAD_INT</name>
        <value>35</value>
      </interrupt>

      <registers>
        <!-- AES_STATUS: AES status -->
        <register>
          <name>AES_STATUS</name>
          <description>AES status</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-only</access>

          <fields>
          	<!-- RD_ALMOST_EMPTY: FIFO read almost empty -->
            <field>
              <name>RD_ALMOST_EMPTY</name>
              <description>FIFO read almost empty</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- RD_EMPTY: FIFO read empty -->
            <field>
              <name>RD_EMPTY</name>
              <description>FIFO read empty</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- WR_FULL_ALMOST: FIFO write almost full -->
            <field>
              <name>WR_FULL_ALMOST</name>
              <description>FIFO write almost full</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- WR_FULL: FIFO write full -->
            <field>
              <name>WR_FULL</name>
              <description>FIFO write full</description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- IDLE: decryption finish -->
            <field>
              <name>IDLE</name>
              <description>decryption finish</description>
              <bitRange>[4:4]</bitRange>
            </field>
          </fields>
        </register>

        <!-- CLK_SEL_0: clock select 0 -->
        <register>
          <name>CLK_SEL_0</name>
          <description>clock select 0</description>
          <addressOffset>0x3F8</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
          	<!-- CAN1_CLK: CAN 1 clock -->
            <field>
              <name>CAN1_CLK</name>
              <description>CAN1 clock frequency dividor based on system clock, which should be 1/32, 1/4, 1/8, 1/16 from 0 to 3</description>
              <bitRange>[1:0]</bitRange>
            </field>

            <!-- CAN0_CLK: CAN 0 clock -->
            <field>
              <name>CAN0_CLK</name>
              <description>CAN0 clock frequency dividor based on system clock, which should be 1/32, 1/4, 1/8, 1/16 from 0 to 3</description>
              <bitRange>[3:2]</bitRange>
            </field>

            <!-- I2C1_CLK: I2C 1 clock -->
            <field>
              <name>I2C1_CLK</name>
              <description>I2C1 clock frequency dividor based on system clock, which should be 1/2, 1/4, 1/8, 1/16 from 0 to 3</description>
              <bitRange>[5:4]</bitRange>
            </field>

            <!-- I2C0_CLK: I2C 0 clock -->
            <field>
              <name>I2C0_CLK</name>
              <description>I2C0 clock frequency dividor based on system clock, which should be 1/2, 1/4, 1/8, 1/16 from 0 to 3</description>
              <bitRange>[7:6]</bitRange>
            </field>

            <!-- SPI1_CLK: SPI 1 clock -->
            <field>
              <name>SPI1_CLK</name>
              <description>SPI1 clock frequency dividor based on system clock, which should be 1/2, 1/4, 1/8, 1/16 from 0 to 3</description>
              <bitRange>[9:8]</bitRange>
            </field>

            <!-- SPI0_CLK: SPI 0 clock -->
            <field>
              <name>SPI0_CLK</name>
              <description>SPI0 clock frequency dividor based on system clock, which should be 1/2, 1/4, 1/8, 1/16 from 0 to 3</description>
              <bitRange>[11:10]</bitRange>
            </field>

            <!-- UART1_CLK: UART 1 clock -->
            <field>
              <name>UART1_CLK</name>
              <description>UART1 clock frequency dividor based on system clock, which should be 1/2, 1/4, 1/8, 1/16 from 0 to 3</description>
              <bitRange>[13:12]</bitRange>
            </field>

            <!-- UART0_CLK: UART 0 clock -->
            <field>
              <name>UART0_CLK</name>
              <description>UART0 clock frequency dividor based on system clock, which should be 1/2, 1/4, 1/8, 1/16 from 0 to 3</description>
              <bitRange>[15:14]</bitRange>
            </field>

            <!-- RTC_CLK: RTC 0 clock -->
            <field>
              <name>RTC_CLK</name>
              <description>RTC clock frequency dividor based on system clock, which should be 1/2, 1/4, 1/8, 1/16 from 0 to 3</description>
              <bitRange>[17:16]</bitRange>
            </field>

            <!-- GPIO_CLK: GPIO clock -->
            <field>
              <name>GPIO_CLK</name>
              <description>GPIO clock frequency dividor based on system clock, which should be 1/2, 1/4, 1/8, 1/16 from 0 to 3</description>
              <bitRange>[19:18]</bitRange>
            </field>

            <!-- TIMER_CLK: TIMER clock -->
            <field>
              <name>TIMER_CLK</name>
              <description>TIMER clock frequency dividor based on system clock, which should be 1/2, 1/4, 1/8, 1/16 from 0 to 3</description>
              <bitRange>[21:20]</bitRange>
            </field>

            <!-- WDG_CLK: watchdog clock -->
            <field>
              <name>WDG_CLK</name>
              <description>watchdog clock frequency dividor based on system clock, which should be 1/2, 1/4, 1/8, 1/16 from 0 to 3</description>
              <bitRange>[23:22]</bitRange>
            </field>

            <!-- FLASH_CLK: FLASH clock -->
            <field>
              <name>FLASH_CLK</name>
              <description>FLASH clock frequency dividor based on system clock, which should be 1/1, 1/2, 1/4, 1/8 from 0 to 3</description>
              <bitRange>[27:26]</bitRange>
            </field>

            <!-- DMA_AHB_CLK: DMA AHB bus clock -->
            <field>
              <name>DMA_AHB_CLK</name>
              <description>DMA AHB bus clock frequency dividor based on system clock, which should be 1/1, 1/2, 1/4, 1/8 from 0 to 3</description>
              <bitRange>[29:28]</bitRange>
            </field>

            <!-- USB_AHB_CLK: USB AHB bus clock -->
            <field>
              <name>USB_AHB_CLK</name>
              <description>USB AHB bus clock frequency dividor based on system clock, which should be 1/1, 1/2, 1/4, 1/8 from 0 to 3</description>
              <bitRange>[31:30]</bitRange>
            </field>
          </fields>
        </register>

        <!-- CLK_SEL_1: clock select 1 -->
        <register>
          <name>CLK_SEL_1</name>
          <description>clock select 1</description>
          <addressOffset>0x3FC</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
          	<!-- ETH_AHB_CLK: ETH AHB clock -->
            <field>
              <name>ETH_AHB_CLK</name>
              <description>ETH_AHB clock frequency dividor based on system clock, which should be 1/1, 1/2, 1/4, 1/8 from 0 to 3</description>
              <bitRange>[1:0]</bitRange>
            </field>

            <!-- DDR_CLK: DDR clock -->
            <field>
              <name>DDR_CLK</name>
              <description>DDR clock frequency dividor based on system clock, which should be 1/1, 1/2, 1/4, 1/8 from 0 to 3</description>
              <bitRange>[3:2]</bitRange>
            </field>

            <!-- ADC_CLK: ADC clock -->
            <field>
              <name>ADC_CLK</name>
              <description>ADC clock frequency dividor based on system clock, which should be 1/8, 1/16, 1/32, external from 0 to 3</description>
              <bitRange>[9:8]</bitRange>
            </field>

            <!-- EFUSE_CLK: EFUSE clock -->
            <field>
              <name>EFUSE_CLK</name>
              <description>EFUSE clock frequency dividor based on system clock, which should be 1/2, 1/4, 1/8, 1/16 from 0 to 3</description>
              <bitRange>[11:10]</bitRange>
            </field>

            <!-- SYS_CLK: system clock -->
            <field>
              <name>SYS_CLK</name>
              <description>system clock clock frequency dividor based on system clock, which should be oscillator(0), DLL(1), crystal(2), external(3), JTAG(4), PS(8)</description>
              <bitRange>[15:12]</bitRange>
            </field>

            <!-- UART2_CLK: UART 2 clock -->
            <field>
              <name>UART2_CLK</name>
              <description>UART2 clock frequency dividor based on system clock, which should be 1/2, 1/4, 1/8, 1/16 from 0 to 3</description>
              <bitRange>[17:16]</bitRange>
            </field>

            <!-- UTMI_CLK: UTMI clock -->
            <field>
              <name>UTMI_CLK</name>
              <description>UTMI clock came from on-chip usb phy(0) or off-chip usb phy(1)</description>
              <bitRange>[18:18]</bitRange>
            </field>
          </fields>
        </register>

        <!-- USB_PHY_CTRL: USB Phy Control Register -->
        <register>
          <name>USB_PHY_CTRL</name>
          <description>USB Phy Control Register</description>
          <addressOffset>0x400</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x000010E4</resetValue>

          <fields>
          	<!-- BITSTUFF: Bit Stuff Enable -->
            <field>
              <name>BITSTUFF</name>
              <description>0: No bit stuff</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- XTLSEL: 12MHz -->
            <field>
              <name>XTLSEL</name>
              <description>0: 12MHz</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- PLL: PLL mode -->
            <field>
              <name>PLL</name>
              <description>PLL mode</description>
              <bitRange>[2:2]</bitRange>
            </field>

            <!-- VOLDET: Voltage Detector Enable -->
            <field>
              <name>VOLDET</name>
              <description>Voltage Detector Enable, 0: Disable</description>
              <bitRange>[3:3]</bitRange>
            </field>

            <!-- IDUP: ID is pulled up -->
            <field>
              <name>IDUP</name>
              <description>0: ID is uplled up through 33k Ohm resister</description>
              <bitRange>[4:4]</bitRange>
            </field>

            <!-- CKISEL: Clock selection -->
            <field>
              <name>CKISEL</name>
              <description>Clock selection, 0: Crystal, 1: Internal Clock</description>
              <bitRange>[5:5]</bitRange>
            </field>

            <!-- FMOD: Normal -->
            <field>
              <name>FMOD</name>
              <description>1: Normal</description>
              <bitRange>[6:6]</bitRange>
            </field>

            <!-- SQUELCH: Squelch Reference Voltage -->
            <field>
              <name>SQUELCH</name>
              <description>Squelch Reference Voltage, 000: 27.5mV, 001: 137.5mV, 111: 220mV</description>
              <bitRange>[9:7]</bitRange>
            </field>

            <!-- HDISCDT: Host Disconnect Detection Reference Voltage -->
            <field>
              <name>HDISCDT</name>
              <description>Host Disconnect Detection Reference Voltage, 000: 500mV, 100: 588mV, 111: 654mV</description>
              <bitRange>[12:10]</bitRange>
            </field>

            <!-- PRTSEL: Port Selection -->
            <field>
              <name>PRTSEL</name>
              <description>0: Internal OTG PHY, 1: UTMI to External PHY</description>
              <bitRange>[13:13]</bitRange>
            </field>

            <!-- RSTPRT: Reset Preport -->
            <field>
              <name>RSTPRT</name>
              <description>0: The reverse of usb_rst_n will reset, 1: Reset OTG PHY</description>
              <bitRange>[14:14]</bitRange>
            </field>
         </fields>
        </register>

        <!-- RTC_INT_EN: RTC interrupt enable Register -->
        <register>
          <name>RTC_INT_EN</name>
          <description>RTC interrupt enable Register</description>
          <addressOffset>0x404</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0x00000003</resetMask>

          <fields>
          	<!-- SECOND: 1ms interrupt enable -->
            <field>
              <name>SECOND</name>
              <description>1s interrupt enable</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- MILLSECOND: 1ms interrupt enable -->
            <field>
              <name>MILLSECOND</name>
              <description>1ms interrupt enable</description>
              <bitRange>[1:1]</bitRange>
            </field>
          </fields>
        </register>

        <!-- NMI_SEL: nmi interrupt selection -->
        <register>
          <name>NMI_SEL</name>
          <description>nmi interrupt selection</description>
          <addressOffset>0x40C</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
          	<!-- NMI: NMI -->
            <field>
              <name>NMI</name>
              <description>NMI interrupt ID</description>
              <bitRange>[6:0]</bitRange>
            </field>
          </fields>
        </register>

        <!-- AES_TARGET_ADDR: AES target address -->
        <register>
          <name>AES_TARGET_ADDR</name>
          <description>AES target address, default is frame decoder address(0x41800000)</description>
          <addressOffset>0x414</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>

        <!-- AES_BURST_TYPE: AES burst type -->
        <register>
          <name>AES_BURST_TYPE</name>
          <description>AES burst type</description>
          <addressOffset>0x418</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
          	<!-- TYPE: TYPE -->
            <field>
              <name>TYPE</name>
              <description>burst type, fixed(0), incr(1)</description>
              <bitRange>[1:0]</bitRange>
            </field>
          </fields>
        </register>

        <!-- ICACHE: ICACHE Enable -->
        <register>
          <name>ICACHE</name>
          <description>ICACHE Enable</description>
          <addressOffset>0x428</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
          	<!-- TYPE: TYPE -->
            <field>
              <name>EN</name>
              <description>ICACHE Enable</description>
              <bitRange>[0:0]</bitRange>
            </field>
          </fields>
        </register>

        <!-- IBUSOFF: Code Bus Offset -->
        <register>
          <name>IBUSOFF</name>
          <description>Code Bus Offset</description>
          <addressOffset>0x42C</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>

        <!-- DBUSOFF: Data Bus Offset -->
        <register>
          <name>DBUSOFF</name>
          <description>Data Bus Offset</description>
          <addressOffset>0x430</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>

        <!-- EXTADDR: Bus Ext Addr -->
        <register>
          <name>EXTADDR</name>
          <description>Bus Ext Addr</description>
          <addressOffset>0x434</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>
      </registers>
    </peripheral>

    <!-- AES -->
    <peripheral>
      <name>AES</name>
      <version>1.0</version>
      <description>AES</description>
      <groupName>AES</groupName>
			<baseAddress>0x41600000</baseAddress>
      <access>read-write</access>
      <size>32</size>

      <addressBlock>
        <offset>0</offset>
        <size>0x14</size>
        <usage>registers</usage>
      </addressBlock>

      <registers>
        <!-- FIFO: data FIFO -->
        <register>
        	<name>FIFO</name>
          <description>data FIFO to be decoded</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>
      </registers>

      <registers>
        <!-- FIFO_CLEAR: clear data FIFO -->
        <register>
        	<name>FIFO_CLEAR</name>
          <description>clear data FIFO</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>write-only</access>

          <fields>
          	<!-- CLEAR: clear -->
            <field>
              <name>CLEAR</name>
              <description>clear after write 1 and write 0</description>
              <bitRange>[0:0]</bitRange>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>

    <!-- DDRC -->
    <peripheral>
      <name>DDRC</name>
      <version>1.0</version>
      <description>DDR_CFG</description>
      <groupName>DDR</groupName>
			<baseAddress>0x41400000</baseAddress>
      <access>read-write</access>
      <size>32</size>

      <addressBlock>
        <offset>0</offset>
        <size>0xB5</size>
        <usage>registers</usage>
      </addressBlock>

      <interrupt>
        <name>DDRC_SW_PROC</name>
        <value>33</value>
      </interrupt>

      <interrupt>
        <name>DDRC_LANE_SYNC</name>
        <value>36</value>
      </interrupt>

      <registers>
        <register>
        	<name>CMD</name>
          <description>DDR commands to program</description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>

        <register>
        	<name>CTRL</name>
          <description>DDR Control</description>
          <addressOffset>0x04</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- TO: Take over DDRC siggen -->
            <field>
              <name>TO</name>
              <description>Take over DDRC siggen</description>
              <bitRange>[0:0]</bitRange>
            </field>

             <!-- CLR: Clear commands in FIFO -->
            <field>
              <name>CLR</name>
              <description>Clear commands in FIFO</description>
              <bitRange>[1:1]</bitRange>
            </field>

             <!-- STR: Start to execute the commands in FIFO -->
            <field>
              <name>STR</name>
              <description>Start to execute the commands in FIFO</description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
            </field>
         </fields>
        </register>

        <register>
        	<name>MODE</name>
          <description>DDR mode</description>
          <addressOffset>0x08</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- MODE: DDRC Mode -->
            <field>
              <name>MODE</name>
              <description>DDRC Mode</description>
              <bitRange>[5:0]</bitRange>
            </field>

            <!-- LANE: LANE synchronization logic bypass -->
            <field>
              <name>LANE</name>
              <description>LANE synchronization logic bypass</description>
              <bitRange>[8:8]</bitRange>
            </field>

						<!-- ADEC: address decoder mapping -->
            <field>
              <name>ADEC</name>
              <description>address decoder mapping</description>
              <bitRange>[12:12]</bitRange>
            </field>
            
            <!-- B16: Active 16 bit DQ position when the unmber of DQ IO is 16 -->
            <field>
              <name>B16</name>
              <description>Active 16 bit DQ position when the unmber of DQ IO is 16</description>
              <bitRange>[17:16]</bitRange>
            </field>

            <!-- CLKPOL: DQS clkpol set by user on the PHY -->
            <field>
              <name>CLKPOL</name>
              <description>DQS clkpol set by user on the PHY</description>
              <bitRange>[25:24]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>QUE</name>
          <description>DDRC queue depth</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- DEPTH: DDRC queue depth -->
            <field>
              <name>DEPTH</name>
              <description>DDRC queue depth</description>
              <bitRange>[0:0]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>REF</name>
          <description>Refresh control</description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- THRD: Number of refresh requests which can be postponed -->
            <field>
              <name>THRD</name>
              <description>Number of refresh requests which can be postponed</description>
              <bitRange>[4:0]</bitRange>
            </field>

            <!-- TRIG: Number of refresh requests every dl_refi -->
            <field>
              <name>TRIG</name>
              <description>Number of refresh requests every dl_refi</description>
              <bitRange>[11:8]</bitRange>
            </field>

            <!-- TIME: Refresh interval time -->
            <field>
              <name>TIME</name>
              <description>Refresh interval time</description>
              <bitRange>[31:16]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>REF_TRIG</name>
          <description>Refresh trigger</description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <fields>
            <!-- GO: Write 1 to trigger one refresh request by cbus -->
            <field>
              <name>GO</name>
              <description>Write 1 to trigger one refresh request by cbus</description>
              <bitRange>[0:0]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>ZQ_TRIG</name>
          <description>ZQCTL trigger</description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>write-only</access>

          <fields>
            <!-- CS: Write 1 to trigger one ZQCS request by cbus -->
            <field>
              <name>CS</name>
              <description>Write 1 to trigger one ZQCS request by cbus</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- CL: Write 1 to trigger one ZQCL request by cbus -->
            <field>
              <name>CL</name>
              <description>Write 1 to trigger one ZQCL request by cbus</description>
              <bitRange>[1:1]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>ZQCSR</name>
          <description>ZQCSR</description>
          <addressOffset>0x1C</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- EN: Enable ZQCS request -->
            <field>
              <name>EN</name>
              <description>Enable ZQCS request</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- PRI: Prior -->
            <field>
              <name>PRI</name>
              <description>0: DMA access prior to ZQCS, 1: ZQCS prior to DMA access</description>
              <bitRange>[1:1]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>ZQCSI</name>
          <description>ZQCS interval time</description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
        </register>

        <register>
        	<name>RCD</name>
          <description>t(RCD)</description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- DI: t(RCD), delay from ACT command to RW command of same bank -->
            <field>
              <name>DI</name>
              <description>t(RCD), delay from ACT command to RW command of same bank</description>
              <bitRange>[4:0]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>RAS</name>
          <description>t(RAS)</description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- DI: t(RAS), delay from ACT command to PRE command of same bank -->
            <field>
              <name>DI</name>
              <description>t(RAS), delay from ACT command to PRE command of same bank</description>
              <bitRange>[5:0]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>RP</name>
          <description>t(RP)</description>
          <addressOffset>0x2C</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- DI: t(RP), delay from PRE command to ACT/REF/ZQ command -->
            <field>
              <name>DI</name>
              <description>t(RP), delay from PRE command to ACT/REF/ZQ command</description>
              <bitRange>[4:0]</bitRange>
            </field>

            <!-- RPA: 0: t(RP) delay for PREA command; 1: t(RP)+1 delay for PREA command -->
            <field>
              <name>RPA</name>
              <description>0: t(RP) delay for PREA command; 1: t(RP)+1 delay for PREA command</description>
              <bitRange>[8:8]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>RC</name>
          <description>t(RC)</description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- DI: t(RC), delay from ACT command to ACT command of same bank -->
            <field>
              <name>DI</name>
              <description>t(RC), delay from ACT command to ACT command of same bank</description>
              <bitRange>[6:0]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>RRD</name>
          <description>t(RRD)</description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- DI: t(RRD), delay from ACT command to ACT command -->
            <field>
              <name>DI</name>
              <description>t(RRD), delay from ACT command to ACT command</description>
              <bitRange>[3:0]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>CCD</name>
          <description>t(CCD)</description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- DI: t(CCD), delay from RW command to RW command -->
            <field>
              <name>DI</name>
              <description>t(CCD), delay from RW command to RW command</description>
              <bitRange>[2:0]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>RTW</name>
          <description>t(RTW)</description>
          <addressOffset>0x3C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- DI: t(RTW), delay from RD command to WR command -->
            <field>
              <name>DI</name>
              <description>t(RTW), delay from RD command to WR command</description>
              <bitRange>[4:0]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>WTR</name>
          <description>t(WTR)</description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- DI: t(WTR), delay from WR command to RD command -->
            <field>
              <name>DI</name>
              <description>t(WTR), delay from WR command to RD command</description>
              <bitRange>[4:0]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>RTP</name>
          <description>t(RTP)</description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- DI: t(RTP), delay from RD command to PRE command of same bank -->
            <field>
              <name>DI</name>
              <description>t(RTP), delay from RD command to PRE command of same bank</description>
              <bitRange>[2:0]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>WTP</name>
          <description>t(WTP)</description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- DI: t(WTP), delay from WR command to PRE command of same bank -->
            <field>
              <name>DI</name>
              <description>t(WTP), delay from WR command to PRE command of same bank</description>
              <bitRange>[5:0]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>RFC</name>
          <description>t(RFC)</description>
          <addressOffset>0x4C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- DI: t(WTP), delay from WR command to PRE command of same bank -->
            <field>
              <name>DI</name>
              <description>t(WTP), delay from WR command to PRE command of same bank</description>
              <bitRange>[7:0]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>ZQCL</name>
          <description>t(ZQoper)</description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- DI: t(ZQoper), delay from ZQCL command to REF/ZQ/ACT command -->
            <field>
              <name>DI</name>
              <description>t(ZQoper), delay from ZQCL command to REF/ZQ/ACT command</description>
              <bitRange>[8:0]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>ZQCS</name>
          <description>t(ZQCS)</description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- DI: t(ZQCS), delay from ZQCS command to REF/ZQ/ACT command -->
            <field>
              <name>DI</name>
              <description>t(ZQCS), delay from ZQCS command to REF/ZQ/ACT command</description>
              <bitRange>[6:0]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>FAW</name>
          <description>t(FAW)</description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- DI: t(FAW), 4 act command window time -->
            <field>
              <name>DI</name>
              <description>t(FAW), 4 act command window time</description>
              <bitRange>[5:0]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>BURST</name>
          <description>BURST</description>
          <addressOffset>0x5C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- LEN: 0: length 8, 1: length 4 -->
            <field>
              <name>LEN</name>
              <description>0: length 8, 1: length 4</description>
              <bitRange>[0:0]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>PHUNG</name>
          <description>PHUNG</description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- MODE: 0: normal mode, 1: prevent read hang mode -->
            <field>
              <name>MODE</name>
              <description>0: normal mode, 1: prevent read hang mode</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- LPM: 1: stop the IO clk -->
            <field>
              <name>LPM</name>
              <description>1: stop the IO clk</description>
              <bitRange>[1:1]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>RL</name>
          <description>READ Latency</description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- VAL: READ Latency -->
            <field>
              <name>VAL</name>
              <description>READ Latency</description>
              <bitRange>[4:0]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>WL</name>
          <description>WRITE Latency</description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- VAL: WRITE Latency -->
            <field>
              <name>VAL</name>
              <description>WRITE Latency</description>
              <bitRange>[4:0]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>TRAIN</name>
          <description>TRAIN</description>
          <addressOffset>0x6C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- EN: Enable lane N training mode -->
            <field>
              <name>EN</name>
              <description>Enable lane N training mode</description>
              <bitRange>[3:0]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>DQSEN0</name>
          <description>Delay cycles of dqsen of byte lane 0</description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- DL: Delay cycles of dqsen of byte lane 0 -->
            <field>
              <name>DL</name>
              <description>Delay cycles of dqsen of byte lane 0</description>
              <bitRange>[2:0]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>DQSEN1</name>
          <description>Delay cycles of dqsen of byte lane 1</description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- DL: Delay cycles of dqsen of byte lane 1 -->
            <field>
              <name>DL</name>
              <description>Delay cycles of dqsen of byte lane 1</description>
              <bitRange>[2:0]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>DQSEN2</name>
          <description>Delay cycles of dqsen of byte lane 2</description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- DL: Delay cycles of dqsen of byte lane 2 -->
            <field>
              <name>DL</name>
              <description>Delay cycles of dqsen of byte lane 2</description>
              <bitRange>[2:0]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>DQSEN3</name>
          <description>Delay cycles of dqsen of byte lane 0</description>
          <addressOffset>0x7C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- DL: Delay cycles of dqsen of byte lane 3 -->
            <field>
              <name>DL</name>
              <description>Delay cycles of dqsen of byte lane 3</description>
              <bitRange>[2:0]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>ODTH</name>
          <description>Delay from WR command to odt high transition</description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- DL: Delay from WR command to odt high transition -->
            <field>
              <name>DL</name>
              <description>Delay from WR command to odt high transition</description>
              <bitRange>[4:0]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>ODTL</name>
          <description>Delay from WR command to odt low transition</description>
          <addressOffset>0x84</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- DL: Delay from WR command to odt high transition -->
            <field>
              <name>DL</name>
              <description>Delay from WR command to odt low transition</description>
              <bitRange>[4:0]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>ODT</name>
          <description>Used in write leveling mode</description>
          <addressOffset>0x88</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <fields>
            <!-- TRIG: 0: trigger odt low, 1: trigger odt high -->
            <field>
              <name>TRIG</name>
              <description>0: trigger odt low, 1: trigger odt high</description>
              <bitRange>[0:0]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>DQS</name>
          <description>Used in write leveling mode</description>
          <addressOffset>0x8C</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <fields>
            <!-- TRIG: Writing 1 to this register triggers a dqs pulse -->
            <field>
              <name>TRIG</name>
              <description>Writing 1 to this register triggers a dqs pulse</description>
              <bitRange>[0:0]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>STA</name>
          <description>Commands FIFO</description>
          <addressOffset>0x90</addressOffset>
          <size>32</size>
          <access>read-only</access>

          <fields>
            <!-- MODE: DDRC in sw_proc mode -->
            <field>
              <name>MODE</name>
              <description>DDRC in sw_proc mode</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- EMPTY: Sw_proc command fifo empty -->
            <field>
              <name>EMPTY</name>
              <description>Sw_proc command fifo empty</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- FULL: Sw_proc command fifo full -->
            <field>
              <name>FULL</name>
              <description>Sw_proc command fifo full</description>
              <bitRange>[2:2]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>INTCTL</name>
          <description>Interrupt Control</description>
          <addressOffset>0x94</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- DONE: 0: the sw_proc_done int will not be masked, 1: the sw_proc_done int will be masked -->
            <field>
              <name>DONE</name>
              <description>0: the sw_proc_done int will not be masked, 1: the sw_proc_done int will be masked</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- ERR: mask of the lane_sync_error interrupt -->
            <field>
              <name>ERR</name>
              <description>mask of the lane_sync_error interrupt</description>
              <bitRange>[1:1]</bitRange>
            </field>

            <!-- MODE: Interrupt mode -->
            <field>
              <name>MODE</name>
              <description>Interrupt mode: 0: int level active, write 1 to clear; 1: int edge active</description>
              <bitRange>[16:16]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>INTRAW</name>
          <description>Interrupt RAW</description>
          <addressOffset>0x98</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- DONE: Int register of sw_proc_done before mask -->
            <field>
              <name>DONE</name>
              <description>Int register of sw_proc_done before mask</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- ERR: int reg of the lane sync error before masked -->
            <field>
              <name>ERR</name>
              <description>int reg of the lane sync error before masked</description>
              <bitRange>[1:1]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>INTSTA</name>
          <description>Interrupt STA</description>
          <addressOffset>0x9C</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- DONE: Int register of sw_proc_done after mask -->
            <field>
              <name>DONE</name>
              <description>Int register of sw_proc_done after mask</description>
              <bitRange>[0:0]</bitRange>
            </field>

            <!-- ERR: int register of lane sync error after masked -->
            <field>
              <name>ERR</name>
              <description>int register of lane sync error after masked</description>
              <bitRange>[1:1]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>PHY</name>
          <description>PHY</description>
          <addressOffset>0xA0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- RST: FPGA version, reset read dq fifo. Low active -->
            <field>
              <name>RST</name>
              <description>FPGA version, reset read dq fifo. Low active</description>
              <bitRange>[0:0]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>RDQ</name>
          <description>FPGA version, read dq delay of byte lane N</description>
          <addressOffset>0xA4</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- L3: FPGA version, read dq delay of byte lane3 -->
            <field>
              <name>L3</name>
              <description>FPGA version, read dq delay of byte lane3</description>
              <bitRange>[5:0]</bitRange>
            </field>

            <!-- L2: FPGA version, read dq delay of byte lane2 -->
            <field>
              <name>L2</name>
              <description>FPGA version, read dq delay of byte lane2</description>
              <bitRange>[13:8]</bitRange>
            </field>

            <!-- L1: FPGA version, read dq delay of byte lane1 -->
            <field>
              <name>L1</name>
              <description>FPGA version, read dq delay of byte lane3</description>
              <bitRange>[21:16]</bitRange>
            </field>

            <!-- L0: FPGA version, read dq delay of byte lane0 -->
            <field>
              <name>L0</name>
              <description>FPGA version, read dq delay of byte lane0</description>
              <bitRange>[30:24]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>CALIB</name>
          <description>calibration</description>
          <addressOffset>0xA8</addressOffset>
          <size>32</size>
          <access>read-only</access>

          <fields>
            <!-- TPU: calibration result values, if fail then 0x40 -->
            <field>
              <name>TPU</name>
              <description>calibration result values, if fail then 0x40</description>
              <bitRange>[7:0]</bitRange>
            </field>

            <!-- TPD: calibration result values, if fail then 0x40 -->
            <field>
              <name>TPD</name>
              <description>calibration result values, if fail then 0x40</description>
              <bitRange>[15:8]</bitRange>
            </field>

            <!-- PDR: calibration result values, if fail then 0x40 -->
            <field>
              <name>PDR</name>
              <description>calibration result values, if fail then 0x40</description>
              <bitRange>[20:16]</bitRange>
            </field>

            <!-- NDR: calibration result values, if fail then 0x40 -->
            <field>
              <name>NDR</name>
              <description>calibration result values, if fail then 0x40</description>
              <bitRange>[25:21]</bitRange>
            </field>

            <!-- EN: trigger the calibration processing which is sensitive to the positive edge -->
            <field>
              <name>EN</name>
              <description>trigger the calibration processing which is sensitive to the positive edge</description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
            </field>
         </fields>
        </register>

        <register>
        	<name>ITMDLY</name>
          <description>"itmdly" is the fine delay trim to the read path "dq", "itmsdly" is to the read path of "dqs". From 000 to 111 increasingly, each step is about 40ps</description>
          <addressOffset>0xAC</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- I0: itmdly0 -->
            <field>
              <name>I0</name>
              <description>itmdly0</description>
              <bitRange>[3:0]</bitRange>
            </field>

            <field>
              <name>IS0</name>
              <description>itmsdly0</description>
              <bitRange>[7:4]</bitRange>
            </field>

            <!-- I1: itmdly1 -->
            <field>
              <name>I1</name>
              <description>itmdly1</description>
              <bitRange>[11:8]</bitRange>
            </field>

            <field>
              <name>IS1</name>
              <description>itmsdly1</description>
              <bitRange>[15:12]</bitRange>
            </field>

            <!-- I2: itmdly2 -->
            <field>
              <name>I2</name>
              <description>itmdly2</description>
              <bitRange>[19:16]</bitRange>
            </field>

            <field>
              <name>IS2</name>
              <description>itmsdly2</description>
              <bitRange>[23:20]</bitRange>
            </field>

            <!-- I3: itmdly3 -->
            <field>
              <name>I3</name>
              <description>itmdly3</description>
              <bitRange>[27:24]</bitRange>
            </field>

            <field>
              <name>IS3</name>
              <description>itmsdly3</description>
              <bitRange>[31:28]</bitRange>
            </field>
         </fields>
        </register>

        <register>
        	<name>TUNE</name>
          <description>CALIB_TUNE</description>
          <addressOffset>0xB0</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
            <!-- TPU: tpu_tune, finial val = tune[3] ? val - tune : val + tune -->
            <field>
              <name>TPU</name>
              <description>tpu_tune, finial val = tune[3] ? val - tune : val + tune</description>
              <bitRange>[3:0]</bitRange>
            </field>

            <!-- TPU: tpd_tune, tune[3:0] for TPD/TPU, [2:0] is the tune val -->
            <field>
              <name>TPD</name>
              <description>tpd_tune, tune[3:0] for TPD/TPU, [2:0] is the tune val</description>
              <bitRange>[7:4]</bitRange>
            </field>

            <!-- TPU: pdr_tune, inial val = tune[2] ? val - tune : val + tune -->
            <field>
              <name>PDR</name>
              <description>pdr_tune, inial val = tune[2] ? val - tune : val + tune</description>
              <bitRange>[11:8]</bitRange>
            </field>

            <!-- TPU: ndr_tune, tune[2:0] for NDR/PDR, [1:0] is the tune val -->
            <field>
              <name>NDR</name>
              <description>ndr_tune, tune[2:0] for NDR/PDR, [1:0] is the tune val</description>
              <bitRange>[15:12]</bitRange>
            </field>
         </fields>
        </register>
    
      	<register>
	<name>RD_SEL</name>
          <description>RD_WINDOWS_SEL</description>
          <addressOffset>0xB4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <fields>
            <!-- PHY_SEL: To fix the phy read valid issue, this is to adjust the read data valid window to match the phy read valid by cycle level -->
            <field>
              <name>PHY_SEL</name>
              <description>To fix the phy read valid issue, this is to adjust the read data valid window to match the phy read valid by cycle level</description>
              <bitRange>[2:0]</bitRange>
            </field>
         </fields>
	</register>
       </registers>
    </peripheral>

    <!-- PDLOCK -->
    <peripheral>
      <name>PDLOCK</name>
      <version>1.0</version>
      <description>PLL DLL LOCK</description>
      <groupName>PDLOCK</groupName>
			<baseAddress>0x41007000</baseAddress>
      <access>read-write</access>
      <size>32</size>

      <addressBlock>
        <offset>0</offset>
        <size>0x4</size>
        <usage>registers</usage>
      </addressBlock>

      <registers>
        <!-- GCLK: GCLK -->
        <register>
        	<name>GCLK</name>
          <description>GCLK</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-only</access>

          <fields>
          	<!-- C1R2P: gclk_c1r2_pll_lock -->
            <field>
              <name>C1R2P</name>
              <description>gclk_c1r2_pll_lock</description>
              <bitRange>[0:0]</bitRange>
            </field>

          	<!-- C1R1P: gclk_c1r1_pll_lock -->
            <field>
              <name>C1R1P</name>
              <description>gclk_c1r1_pll_lock</description>
              <bitRange>[1:1]</bitRange>
            </field>

          	<!-- C2R1P: gclk_c2r1_pll_lock -->
            <field>
              <name>C2R1P</name>
              <description>gclk_c2r1_pll_lock</description>
              <bitRange>[2:2]</bitRange>
            </field>

          	<!-- C2R2P: gclk_c2r2_pll_lock -->
            <field>
              <name>C2R2P</name>
              <description>gclk_c2r2_pll_lock</description>
              <bitRange>[3:3]</bitRange>
            </field>

          	<!-- C1R2D: gclk_c1r2_dll_lock -->
            <field>
              <name>C1R2D</name>
              <description>gclk_c1r2_dll_lock</description>
              <bitRange>[4:4]</bitRange>
            </field>

          	<!-- C1R1D: gclk_c1r1_dll_lock -->
            <field>
              <name>C1R1D</name>
              <description>gclk_c1r1_dll_lock</description>
              <bitRange>[5:5]</bitRange>
            </field>

          	<!-- C2R1D: gclk_c2r1_dll_lock -->
            <field>
              <name>C2R1D</name>
              <description>gclk_c2r1_dll_lock</description>
              <bitRange>[6:6]</bitRange>
            </field>

          	<!-- C2R2D: gclk_c2r2_dll_lock -->
            <field>
              <name>C2R2D</name>
              <description>gclk_c2r2_dll_lock</description>
              <bitRange>[7:7]</bitRange>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>

    <!-- PDPROT -->
    <peripheral>
      <name>PDPROT</name>
      <version>1.0</version>
      <description>PLL DLL PROTECT</description>
      <groupName>PDPROT</groupName>
			<baseAddress>0x41007C00</baseAddress>
      <access>read-write</access>
      <size>32</size>

      <addressBlock>
        <offset>0</offset>
        <size>0x4</size>
        <usage>registers</usage>
      </addressBlock>

      <registers>
        <!-- LOCK: LOCK -->
        <register>
        	<name>LOCK</name>
          <description>LOCK</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>write-only</access>
          <fields>
          	<!-- EN: Enable the PLL DLL Lock to Protect it -->
            <field>
              <name>EN</name>
              <description>Enable the PLL DLL Lock to Protect it</description>
              <bitRange>[0:0]</bitRange>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>

    <!-- CFG_CTRL -->
    <peripheral>
      <name>CFG_CTRL</name>
      <version>1.0</version>
      <description>CFG_CTRL</description>
      <groupName>CFG_CTRL</groupName>
			<baseAddress>0x41700000</baseAddress>
      <access>read-write</access>
      <size>32</size>

      <addressBlock>
        <offset>0</offset>
        <size>0xB8</size>
        <usage>registers</usage>
      </addressBlock>

      <registers>
        <!-- DONE: DONE CFG -->
        <register>
        	<name>DONE</name>
          <description>DONE CFG</description>
          <addressOffset>0x0C</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
          	<!-- CMD: Write 1 indicate all chain data write over -->
            <field>
              <name>CMD</name>
              <description>Write 1 indicate all chain data write over</description>
              <bitRange>[0:0]</bitRange>
            </field>

          	<!-- STA: 1= all chain config process over, chip is in user mode -->
            <field>
              <name>STA</name>
              <description>1= all chain config process over, chip is in user mode</description>
              <bitRange>[1:1]</bitRange>
            </field>
          </fields>
        </register>

        <!-- PDLLSTR: RLL DLL RESET -->
        <register>
        	<name>PDLLSTR</name>
          <description>PLL DLL RESET</description>
          <addressOffset>0x98</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
          	<!-- C1R1P: C1r1_rstpll_n, low active -->
            <field>
              <name>C1R1P</name>
              <description>C1r1_rstpll_n, low active</description>
              <bitRange>[0:0]</bitRange>
            </field>

          	<!-- C1R2P: C1r2_rstpll_n, low active -->
            <field>
              <name>C1R2P</name>
              <description>C1r2_rstpll_n, low active</description>
              <bitRange>[1:1]</bitRange>
            </field>

          	<!-- C2R1P: C2r1_rstpll_n, low active -->
            <field>
              <name>C2R1P</name>
              <description>C2r1_rstpll_n, low active</description>
              <bitRange>[2:2]</bitRange>
            </field>

          	<!-- C2R2P: C2r2_rstpll_n, low active -->
            <field>
              <name>C2R2P</name>
              <description>C2r2_rstpll_n, low active</description>
              <bitRange>[3:3]</bitRange>
            </field>

          	<!-- C1R1D: C1r1_rstdll_n, low active -->
            <field>
              <name>C1R1D</name>
              <description>C1r1_rstdll_n, low active</description>
              <bitRange>[4:4]</bitRange>
            </field>

          	<!-- C1R2D: C1r2_rstdll_n, low active -->
            <field>
              <name>C1R2D</name>
              <description>C1r2_rstdll_n, low active</description>
              <bitRange>[5:5]</bitRange>
            </field>

          	<!-- C2R1D: C2r1_rstdll_n, low active -->
            <field>
              <name>C2R1D</name>
              <description>C2r1_rstdll_n, low active</description>
              <bitRange>[6:6]</bitRange>
            </field>

          	<!-- C2R2D: C2r2_rstdll_n, low active -->
            <field>
              <name>C2R2D</name>
              <description>C2r2_rstdll_n, low active</description>
              <bitRange>[7:7]</bitRange>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <!-- SOFTRET -->
    <peripheral>
      <name>SOFT_RESET</name>
      <version>1.0</version>
      <description>SUB SOFT RESET</description>
      <groupName>SOFTRESET</groupName>
			<baseAddress>0x41007400</baseAddress>
      <access>read-write</access>
      <size>32</size>

      <addressBlock>
        <offset>0</offset>
        <size>0x4</size>
        <usage>registers</usage>
      </addressBlock>

      <registers>
        <!-- SOFTRST: SUB SOFT RESET -->
        <register>
        	<name>SOFTRST</name>
          <description>SOFTRST</description>
          <addressOffset>0x00</addressOffset>
          <size>32</size>
          <access>read-write</access>

          <fields>
          	<!-- CAN1: soft_rst_can1_n -->
            <field>
              <name>CAN1_n</name>
              <description>soft_rst_can1_n</description>
              <bitRange>[0:0]</bitRange>
            </field>
		<!-- CAN0: soft_rst_can0_n -->
            <field>
              <name>CAN0_n</name>
              <description>soft_rst_can0_n</description>
              <bitRange>[1:1]</bitRange>
            </field>
		<!-- I2C1: soft_rst_i2c1_n -->
            <field>
              <name>I2C1_n</name>
              <description>soft_rst_i2c1_n</description>
              <bitRange>[2:2]</bitRange>
            </field>
		<!-- I2C0: soft_rst_i2c0_n -->
            <field>
              <name>I2C0_n</name>
              <description>soft_rst_i2c0_n</description>
              <bitRange>[3:3]</bitRange>
            </field>
		<!-- SPI1: soft_rst_spi1_n -->
            <field>
              <name>SPI1_n</name>
              <description>soft_rst_spi1_n</description>
              <bitRange>[4:4]</bitRange>
            </field>
		<!-- SPI0: soft_rst_spi0_n -->
            <field>
              <name>SPI0_n</name>
              <description>soft_rst_spi0_n</description>
              <bitRange>[5:5]</bitRange>
            </field>
		<!-- UART1: soft_rst_uart1_n -->
            <field>
              <name>UART1_n</name>
              <description>soft_rst_uart1_n</description>
              <bitRange>[6:6]</bitRange>
            </field>
		<!-- UART0: soft_rst_uart0_n -->
            <field>
              <name>UART0_n</name>
              <description>soft_rst_uart0_n</description>
              <bitRange>[7:7]</bitRange>
            </field>
		<!-- RTC: soft_rst_rtc_n -->
            <field>
              <name>RTC_n</name>
              <description>soft_rst_rtc_n</description>
              <bitRange>[8:8]</bitRange>
            </field>
		<!-- GPIO: soft_rst_gpio_n -->
            <field>
              <name>GPIO_n</name>
              <description>soft_rst_gpio_n</description>
              <bitRange>[9:9]</bitRange>
            </field>
		<!-- TIMER: soft_rst_timer_n -->
            <field>
              <name>TIMER_n</name>
              <description>soft_rst_timer_n</description>
              <bitRange>[10:10]</bitRange>
            </field>
		<!-- WDT: soft_rst_wdt_n -->
            <field>
              <name>WDT_n</name>
              <description>soft_rst_wdt_n</description>
              <bitRange>[11:11]</bitRange>
            </field>
		<!-- LVDS: soft_rst_lvds_n -->
            <field>
              <name>LVDS_n</name>
              <description>soft_rst_lvds_n</description>
              <bitRange>[12:12]</bitRange>
            </field>
		<!-- FLS: soft_rst_fls_n -->
            <field>
              <name>FLS_n</name>
              <description>soft_rst_fls_n</description>
              <bitRange>[13:13]</bitRange>
            </field>
		<!-- DMAC_AHB: soft_rst_dmac_ahb_n -->
            <field>
              <name>DMAC_AHB_n</name>
              <description>soft_rst_dmac_ahb_n</description>
              <bitRange>[14:14]</bitRange>
            </field>
		<!-- USB_AHB: soft_rst_usb_ahb_n -->
            <field>
              <name>USB_AHB_n</name>
              <description>soft_rst_usb_ahb_n</description>
              <bitRange>[15:15]</bitRange>
            </field>
		<!-- ETH_AHB: soft_rst_eth_ahb_n -->
            <field>
              <name>ETH_AHB_n</name>
              <description>soft_rst_eth_ahb_n</description>
              <bitRange>[16:16]</bitRange>
            </field>
		<!-- DDRC: soft_rst_ddrc_n -->
            <field>
              <name>DDRC_n</name>
              <description>soft_rst_ddrc_n</description>
              <bitRange>[17:17]</bitRange>
            </field>
		<!-- ARM_HCLK: soft_rst_arm_HCLK_n -->
            <field>
              <name>ARM_HCLK_n</name>
              <description>soft_rst_arm_HCLK_n</description>
              <bitRange>[18:18]</bitRange>
            </field>
		<!-- _48: soft_rst_48_n -->
            <field>
              <name>_48_n</name>
              <description>soft_rst_48_n</description>
              <bitRange>[19:19]</bitRange>
            </field>
		<!-- UTMI: soft_rst_utmi_n -->
            <field>
              <name>UTM_n</name>
              <description>soft_rst_utmi_n</description>
              <bitRange>[20:20]</bitRange>
            </field>
		<!-- CACHE: soft_rst_cache_n -->
            <field>
              <name>CACHE_n</name>
              <description>soft_rst_cache_n</description>
              <bitRange>[21:21]</bitRange>
            </field>
		<!-- USB: soft_rst_usb_n -->
            <field>
              <name>USB_n</name>
              <description>soft_rst_cache_n</description>
              <bitRange>[22:22]</bitRange>
            </field>
		<!-- ETH_RX: soft_rst_eth_rx_i_n -->
            <field>
              <name>ETH_RX_n</name>
              <description>soft_rst_eth_rx_i_n</description>
              <bitRange>[23:23]</bitRange>
            </field>
		<!-- ETH_TX: soft_rst_eth_tx_i_n -->
            <field>
              <name>ETH_TX_n</name>
              <description>soft_rst_eth_tx_i_n</description>
              <bitRange>[24:24]</bitRange>
            </field>
		<!-- ADC: soft_rst_adc_n -->
            <field>
              <name>ADC_n</name>
              <description>soft_rst_adc_n</description>
              <bitRange>[25:25]</bitRange>
            </field>
		<!-- EFUSE: soft_rst_efuse_n -->
            <field>
              <name>EFUSE_n</name>
              <description>soft_rst_efuse_n</description>
              <bitRange>[26:26]</bitRange>
            </field>
 	<!-- Reserved1: Reserved -->
            <field>
              <name>Reserved1_n</name>
              <description>Reserved11</description>
              <bitRange>[27:27]</bitRange>
            </field>
		<!-- AES: soft_rst_aes_n -->
            <field>
              <name>AES_n</name>
              <description>soft_rst_aes_n</description>
              <bitRange>[28:28]</bitRange>
            </field>
		<!-- UART2: soft_rst_uart2_n -->
            <field>
              <name>UART2_n</name>
              <description>soft_rst_uart2_n</description>
              <bitRange>[29:29]</bitRange>
            </field>
		<!-- AS: soft_rst_as_n -->
            <field>
              <name>AS_n</name>
              <description>soft_rst_as_n</description>
              <bitRange>[30:30]</bitRange>
            </field>  
		<!-- FDCD: soft_rst_fdcd_n -->
            <field>
              <name>FDCD_n</name>
              <description>soft_rst_fdcd_n</description>
              <bitRange>[31:31]</bitRange>
            </field>        	
          </fields>
        </register>
      </registers>
    </peripheral>
  </peripherals>
</device>
